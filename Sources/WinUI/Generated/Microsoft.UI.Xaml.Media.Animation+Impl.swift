// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml_Media_Animation {
    public enum AddDeleteThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = AddDeleteThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIAddDeleteThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIAddDeleteThemeTransition>?) -> AddDeleteThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BackEaseBridge: AbiBridge {
        public typealias SwiftProjection = BackEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBackEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBackEase>?) -> BackEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BasicConnectedAnimationConfigurationBridge: ComposableBridge {
        public typealias SwiftProjection = BasicConnectedAnimationConfiguration
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBasicConnectedAnimationConfiguration
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBasicConnectedAnimationConfiguration>?) -> BasicConnectedAnimationConfiguration? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBasicConnectedAnimationConfiguration : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = BasicConnectedAnimationConfiguration
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBasicConnectedAnimationConfiguration
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IBasicConnectedAnimationConfiguration
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBasicConnectedAnimationConfiguration
    }

    public enum BeginStoryboardBridge: AbiBridge {
        public typealias SwiftProjection = BeginStoryboard
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBeginStoryboard
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBeginStoryboard>?) -> BeginStoryboard? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BounceEaseBridge: AbiBridge {
        public typealias SwiftProjection = BounceEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBounceEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBounceEase>?) -> BounceEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CircleEaseBridge: AbiBridge {
        public typealias SwiftProjection = CircleEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICircleEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICircleEase>?) -> CircleEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorAnimationBridge: AbiBridge {
        public typealias SwiftProjection = ColorAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimation>?) -> ColorAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorAnimationUsingKeyFramesBridge: AbiBridge {
        public typealias SwiftProjection = ColorAnimationUsingKeyFrames
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimationUsingKeyFrames
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimationUsingKeyFrames>?) -> ColorAnimationUsingKeyFrames? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorKeyFrameBridge: ComposableBridge {
        public typealias SwiftProjection = ColorKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorKeyFrame>?) -> ColorKeyFrame? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IColorKeyFrame : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ColorKeyFrame
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorKeyFrame
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IColorKeyFrame
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IColorKeyFrame
    }

    public enum ColorKeyFrameCollectionBridge: AbiBridge {
        public typealias SwiftProjection = ColorKeyFrameCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CColorKeyFrame
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CColorKeyFrame>?) -> ColorKeyFrameCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CommonNavigationTransitionInfoBridge: AbiBridge {
        public typealias SwiftProjection = CommonNavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICommonNavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICommonNavigationTransitionInfo>?) -> CommonNavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ConnectedAnimationBridge: AbiBridge {
        public typealias SwiftProjection = ConnectedAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimation>?) -> ConnectedAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ConnectedAnimationConfigurationBridge: ComposableBridge {
        public typealias SwiftProjection = ConnectedAnimationConfiguration
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationConfiguration
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationConfiguration>?) -> ConnectedAnimationConfiguration? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IConnectedAnimationConfiguration : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ConnectedAnimationConfiguration
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationConfiguration
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimationConfiguration
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IConnectedAnimationConfiguration
    }

    public enum ConnectedAnimationServiceBridge: AbiBridge {
        public typealias SwiftProjection = ConnectedAnimationService
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationService
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationService>?) -> ConnectedAnimationService? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = ContentThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContentThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContentThemeTransition>?) -> ContentThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContinuumNavigationTransitionInfoBridge: AbiBridge {
        public typealias SwiftProjection = ContinuumNavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContinuumNavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContinuumNavigationTransitionInfo>?) -> ContinuumNavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CubicEaseBridge: AbiBridge {
        public typealias SwiftProjection = CubicEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICubicEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICubicEase>?) -> CubicEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DirectConnectedAnimationConfigurationBridge: ComposableBridge {
        public typealias SwiftProjection = DirectConnectedAnimationConfiguration
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDirectConnectedAnimationConfiguration
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDirectConnectedAnimationConfiguration>?) -> DirectConnectedAnimationConfiguration? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IDirectConnectedAnimationConfiguration : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = DirectConnectedAnimationConfiguration
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDirectConnectedAnimationConfiguration
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDirectConnectedAnimationConfiguration
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IDirectConnectedAnimationConfiguration
    }

    public enum DiscreteColorKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = DiscreteColorKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteColorKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteColorKeyFrame>?) -> DiscreteColorKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DiscreteDoubleKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = DiscreteDoubleKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteDoubleKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteDoubleKeyFrame>?) -> DiscreteDoubleKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DiscreteObjectKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = DiscreteObjectKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteObjectKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteObjectKeyFrame>?) -> DiscreteObjectKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DiscretePointKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = DiscretePointKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscretePointKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscretePointKeyFrame>?) -> DiscretePointKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DoubleAnimationBridge: AbiBridge {
        public typealias SwiftProjection = DoubleAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimation>?) -> DoubleAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DoubleAnimationUsingKeyFramesBridge: AbiBridge {
        public typealias SwiftProjection = DoubleAnimationUsingKeyFrames
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimationUsingKeyFrames
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimationUsingKeyFrames>?) -> DoubleAnimationUsingKeyFrames? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DoubleKeyFrameBridge: ComposableBridge {
        public typealias SwiftProjection = DoubleKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleKeyFrame>?) -> DoubleKeyFrame? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IDoubleKeyFrame : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = DoubleKeyFrame
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleKeyFrame
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleKeyFrame
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IDoubleKeyFrame
    }

    public enum DoubleKeyFrameCollectionBridge: AbiBridge {
        public typealias SwiftProjection = DoubleKeyFrameCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CDoubleKeyFrame
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CDoubleKeyFrame>?) -> DoubleKeyFrameCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragItemThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = DragItemThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragItemThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragItemThemeAnimation>?) -> DragItemThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragOverThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = DragOverThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragOverThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragOverThemeAnimation>?) -> DragOverThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DrillInNavigationTransitionInfoBridge: AbiBridge {
        public typealias SwiftProjection = DrillInNavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInNavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInNavigationTransitionInfo>?) -> DrillInNavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DrillInThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = DrillInThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInThemeAnimation>?) -> DrillInThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DrillOutThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = DrillOutThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillOutThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillOutThemeAnimation>?) -> DrillOutThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DropTargetItemThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = DropTargetItemThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDropTargetItemThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDropTargetItemThemeAnimation>?) -> DropTargetItemThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EasingColorKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = EasingColorKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingColorKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingColorKeyFrame>?) -> EasingColorKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EasingDoubleKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = EasingDoubleKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingDoubleKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingDoubleKeyFrame>?) -> EasingDoubleKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EasingFunctionBaseBridge: ComposableBridge {
        public typealias SwiftProjection = EasingFunctionBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase>?) -> EasingFunctionBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IEasingFunctionBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = EasingFunctionBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingFunctionBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IEasingFunctionBase
    }

    public enum EasingPointKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = EasingPointKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingPointKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingPointKeyFrame>?) -> EasingPointKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EdgeUIThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = EdgeUIThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEdgeUIThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEdgeUIThemeTransition>?) -> EdgeUIThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ElasticEaseBridge: AbiBridge {
        public typealias SwiftProjection = ElasticEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIElasticEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIElasticEase>?) -> ElasticEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EntranceNavigationTransitionInfoBridge: AbiBridge {
        public typealias SwiftProjection = EntranceNavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceNavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceNavigationTransitionInfo>?) -> EntranceNavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EntranceThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = EntranceThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceThemeTransition>?) -> EntranceThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ExponentialEaseBridge: AbiBridge {
        public typealias SwiftProjection = ExponentialEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIExponentialEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIExponentialEase>?) -> ExponentialEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FadeInThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = FadeInThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeInThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeInThemeAnimation>?) -> FadeInThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FadeOutThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = FadeOutThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeOutThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeOutThemeAnimation>?) -> FadeOutThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum GravityConnectedAnimationConfigurationBridge: ComposableBridge {
        public typealias SwiftProjection = GravityConnectedAnimationConfiguration
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIGravityConnectedAnimationConfiguration
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIGravityConnectedAnimationConfiguration>?) -> GravityConnectedAnimationConfiguration? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IGravityConnectedAnimationConfiguration : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = GravityConnectedAnimationConfiguration
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIGravityConnectedAnimationConfiguration
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IGravityConnectedAnimationConfiguration
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IGravityConnectedAnimationConfiguration
    }

    public enum KeySplineBridge: AbiBridge {
        public typealias SwiftProjection = KeySpline
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeySpline
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeySpline>?) -> KeySpline? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum KeyTimeHelperBridge: AbiBridge {
        public typealias SwiftProjection = KeyTimeHelper
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeyTimeHelper
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeyTimeHelper>?) -> KeyTimeHelper? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum LinearColorKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = LinearColorKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearColorKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearColorKeyFrame>?) -> LinearColorKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum LinearDoubleKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = LinearDoubleKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearDoubleKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearDoubleKeyFrame>?) -> LinearDoubleKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum LinearPointKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = LinearPointKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearPointKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearPointKeyFrame>?) -> LinearPointKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = NavigationThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationThemeTransition>?) -> NavigationThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationTransitionInfoBridge: ComposableBridge {
        public typealias SwiftProjection = NavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfo>?) -> NavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum INavigationTransitionInfoOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
            public typealias Class = NavigationTransitionInfo
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfo
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfo
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = INavigationTransitionInfoOverrides
    }

    public enum ObjectAnimationUsingKeyFramesBridge: AbiBridge {
        public typealias SwiftProjection = ObjectAnimationUsingKeyFrames
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectAnimationUsingKeyFrames
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectAnimationUsingKeyFrames>?) -> ObjectAnimationUsingKeyFrames? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ObjectKeyFrameBridge: ComposableBridge {
        public typealias SwiftProjection = ObjectKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectKeyFrame>?) -> ObjectKeyFrame? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IObjectKeyFrame : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ObjectKeyFrame
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectKeyFrame
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectKeyFrame
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IObjectKeyFrame
    }

    public enum ObjectKeyFrameCollectionBridge: AbiBridge {
        public typealias SwiftProjection = ObjectKeyFrameCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CObjectKeyFrame
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CObjectKeyFrame>?) -> ObjectKeyFrameCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PaneThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = PaneThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPaneThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPaneThemeTransition>?) -> PaneThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointAnimationBridge: AbiBridge {
        public typealias SwiftProjection = PointAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimation>?) -> PointAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointAnimationUsingKeyFramesBridge: AbiBridge {
        public typealias SwiftProjection = PointAnimationUsingKeyFrames
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimationUsingKeyFrames
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimationUsingKeyFrames>?) -> PointAnimationUsingKeyFrames? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointKeyFrameBridge: ComposableBridge {
        public typealias SwiftProjection = PointKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointKeyFrame>?) -> PointKeyFrame? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IPointKeyFrame : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = PointKeyFrame
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointKeyFrame
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointKeyFrame
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IPointKeyFrame
    }

    public enum PointKeyFrameCollectionBridge: AbiBridge {
        public typealias SwiftProjection = PointKeyFrameCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CPointKeyFrame
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CPointKeyFrame>?) -> PointKeyFrameCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointerDownThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = PointerDownThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerDownThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerDownThemeAnimation>?) -> PointerDownThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointerUpThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = PointerUpThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerUpThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerUpThemeAnimation>?) -> PointerUpThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PopInThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = PopInThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopInThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopInThemeAnimation>?) -> PopInThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PopOutThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = PopOutThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopOutThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopOutThemeAnimation>?) -> PopOutThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PopupThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = PopupThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopupThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopupThemeTransition>?) -> PopupThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PowerEaseBridge: AbiBridge {
        public typealias SwiftProjection = PowerEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPowerEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPowerEase>?) -> PowerEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum QuadraticEaseBridge: AbiBridge {
        public typealias SwiftProjection = QuadraticEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuadraticEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuadraticEase>?) -> QuadraticEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum QuarticEaseBridge: AbiBridge {
        public typealias SwiftProjection = QuarticEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuarticEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuarticEase>?) -> QuarticEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum QuinticEaseBridge: AbiBridge {
        public typealias SwiftProjection = QuinticEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuinticEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuinticEase>?) -> QuinticEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ReorderThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = ReorderThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIReorderThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIReorderThemeTransition>?) -> ReorderThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RepeatBehaviorHelperBridge: AbiBridge {
        public typealias SwiftProjection = RepeatBehaviorHelper
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepeatBehaviorHelper
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepeatBehaviorHelper>?) -> RepeatBehaviorHelper? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RepositionThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = RepositionThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeAnimation>?) -> RepositionThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RepositionThemeTransitionBridge: AbiBridge {
        public typealias SwiftProjection = RepositionThemeTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeTransition>?) -> RepositionThemeTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SineEaseBridge: AbiBridge {
        public typealias SwiftProjection = SineEase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISineEase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISineEase>?) -> SineEase? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SlideNavigationTransitionInfoBridge: AbiBridge {
        public typealias SwiftProjection = SlideNavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISlideNavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISlideNavigationTransitionInfo>?) -> SlideNavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SplineColorKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = SplineColorKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineColorKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineColorKeyFrame>?) -> SplineColorKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SplineDoubleKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = SplineDoubleKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineDoubleKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineDoubleKeyFrame>?) -> SplineDoubleKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SplinePointKeyFrameBridge: AbiBridge {
        public typealias SwiftProjection = SplinePointKeyFrame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplinePointKeyFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplinePointKeyFrame>?) -> SplinePointKeyFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SplitCloseThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = SplitCloseThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitCloseThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitCloseThemeAnimation>?) -> SplitCloseThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SplitOpenThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = SplitOpenThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitOpenThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitOpenThemeAnimation>?) -> SplitOpenThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum StoryboardBridge: AbiBridge {
        public typealias SwiftProjection = Storyboard
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIStoryboard
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIStoryboard>?) -> Storyboard? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SuppressNavigationTransitionInfoBridge: AbiBridge {
        public typealias SwiftProjection = SuppressNavigationTransitionInfo
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISuppressNavigationTransitionInfo
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISuppressNavigationTransitionInfo>?) -> SuppressNavigationTransitionInfo? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SwipeBackThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = SwipeBackThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeBackThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeBackThemeAnimation>?) -> SwipeBackThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SwipeHintThemeAnimationBridge: AbiBridge {
        public typealias SwiftProjection = SwipeHintThemeAnimation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeHintThemeAnimation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeHintThemeAnimation>?) -> SwipeHintThemeAnimation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TimelineBridge: ComposableBridge {
        public typealias SwiftProjection = Timeline
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITimeline
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITimeline>?) -> Timeline? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITimeline : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = Timeline
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITimeline
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ITimeline
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITimeline
    }

    public enum TimelineCollectionBridge: AbiBridge {
        public typealias SwiftProjection = TimelineCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTimeline
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTimeline>?) -> TimelineCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TransitionBridge: ComposableBridge {
        public typealias SwiftProjection = Transition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition>?) -> Transition? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITransition : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = Transition
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ITransition
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITransition
    }

    public enum TransitionCollectionBridge: AbiBridge {
        public typealias SwiftProjection = TransitionCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTransition
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTransition>?) -> TransitionCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension KeyTime: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CKeyTime
    public static func from(abi: ABI) -> Self {
        .init(timeSpan: .from(abi: abi.TimeSpan))
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension RepeatBehavior: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CRepeatBehavior
    public static func from(abi: ABI) -> Self {
        .init(count: abi.Count, duration: .from(abi: abi.Duration), type: abi.Type)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class AddDeleteThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = AddDeleteThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AddDeleteThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BackEaseMaker: MakeFromAbi {
    public typealias SwiftType = BackEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BackEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BasicConnectedAnimationConfigurationMaker: MakeFromAbi {
    public typealias SwiftType = BasicConnectedAnimationConfiguration
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BasicConnectedAnimationConfiguration(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BeginStoryboardMaker: MakeFromAbi {
    public typealias SwiftType = BeginStoryboard
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BeginStoryboard(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BounceEaseMaker: MakeFromAbi {
    public typealias SwiftType = BounceEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BounceEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CircleEaseMaker: MakeFromAbi {
    public typealias SwiftType = CircleEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CircleEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorAnimationMaker: MakeFromAbi {
    public typealias SwiftType = ColorAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorAnimationUsingKeyFramesMaker: MakeFromAbi {
    public typealias SwiftType = ColorAnimationUsingKeyFrames
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorAnimationUsingKeyFrames(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = ColorKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorKeyFrameCollectionMaker: MakeFromAbi {
    public typealias SwiftType = ColorKeyFrameCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorKeyFrameCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CommonNavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = CommonNavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CommonNavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ConnectedAnimationMaker: MakeFromAbi {
    public typealias SwiftType = ConnectedAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ConnectedAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ConnectedAnimationConfigurationMaker: MakeFromAbi {
    public typealias SwiftType = ConnectedAnimationConfiguration
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ConnectedAnimationConfiguration(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ConnectedAnimationServiceMaker: MakeFromAbi {
    public typealias SwiftType = ConnectedAnimationService
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ConnectedAnimationService(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = ContentThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContinuumNavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = ContinuumNavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContinuumNavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CubicEaseMaker: MakeFromAbi {
    public typealias SwiftType = CubicEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CubicEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DirectConnectedAnimationConfigurationMaker: MakeFromAbi {
    public typealias SwiftType = DirectConnectedAnimationConfiguration
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DirectConnectedAnimationConfiguration(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DiscreteColorKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = DiscreteColorKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DiscreteColorKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DiscreteDoubleKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = DiscreteDoubleKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DiscreteDoubleKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DiscreteObjectKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = DiscreteObjectKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DiscreteObjectKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DiscretePointKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = DiscretePointKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DiscretePointKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DoubleAnimationMaker: MakeFromAbi {
    public typealias SwiftType = DoubleAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DoubleAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DoubleAnimationUsingKeyFramesMaker: MakeFromAbi {
    public typealias SwiftType = DoubleAnimationUsingKeyFrames
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DoubleAnimationUsingKeyFrames(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DoubleKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = DoubleKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DoubleKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DoubleKeyFrameCollectionMaker: MakeFromAbi {
    public typealias SwiftType = DoubleKeyFrameCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DoubleKeyFrameCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragItemThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = DragItemThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragItemThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragOverThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = DragOverThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragOverThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DrillInNavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = DrillInNavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DrillInNavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DrillInThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = DrillInThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DrillInThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DrillOutThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = DrillOutThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DrillOutThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DropTargetItemThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = DropTargetItemThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DropTargetItemThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EasingColorKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = EasingColorKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EasingColorKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EasingDoubleKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = EasingDoubleKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EasingDoubleKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EasingFunctionBaseMaker: MakeFromAbi {
    public typealias SwiftType = EasingFunctionBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EasingFunctionBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EasingPointKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = EasingPointKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EasingPointKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EdgeUIThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = EdgeUIThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EdgeUIThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ElasticEaseMaker: MakeFromAbi {
    public typealias SwiftType = ElasticEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ElasticEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EntranceNavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = EntranceNavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EntranceNavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EntranceThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = EntranceThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EntranceThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ExponentialEaseMaker: MakeFromAbi {
    public typealias SwiftType = ExponentialEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ExponentialEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FadeInThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = FadeInThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FadeInThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FadeOutThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = FadeOutThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FadeOutThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GravityConnectedAnimationConfigurationMaker: MakeFromAbi {
    public typealias SwiftType = GravityConnectedAnimationConfiguration
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GravityConnectedAnimationConfiguration(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class KeySplineMaker: MakeFromAbi {
    public typealias SwiftType = KeySpline
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return KeySpline(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class KeyTimeHelperMaker: MakeFromAbi {
    public typealias SwiftType = KeyTimeHelper
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return KeyTimeHelper(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LinearColorKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = LinearColorKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LinearColorKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LinearDoubleKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = LinearDoubleKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LinearDoubleKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LinearPointKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = LinearPointKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LinearPointKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = NavigationThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = NavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ObjectAnimationUsingKeyFramesMaker: MakeFromAbi {
    public typealias SwiftType = ObjectAnimationUsingKeyFrames
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ObjectAnimationUsingKeyFrames(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ObjectKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = ObjectKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ObjectKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ObjectKeyFrameCollectionMaker: MakeFromAbi {
    public typealias SwiftType = ObjectKeyFrameCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ObjectKeyFrameCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PaneThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = PaneThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PaneThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointAnimationMaker: MakeFromAbi {
    public typealias SwiftType = PointAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointAnimationUsingKeyFramesMaker: MakeFromAbi {
    public typealias SwiftType = PointAnimationUsingKeyFrames
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointAnimationUsingKeyFrames(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = PointKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointKeyFrameCollectionMaker: MakeFromAbi {
    public typealias SwiftType = PointKeyFrameCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointKeyFrameCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointerDownThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = PointerDownThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointerDownThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointerUpThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = PointerUpThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointerUpThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PopInThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = PopInThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PopInThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PopOutThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = PopOutThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PopOutThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PopupThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = PopupThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PopupThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PowerEaseMaker: MakeFromAbi {
    public typealias SwiftType = PowerEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PowerEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class QuadraticEaseMaker: MakeFromAbi {
    public typealias SwiftType = QuadraticEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return QuadraticEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class QuarticEaseMaker: MakeFromAbi {
    public typealias SwiftType = QuarticEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return QuarticEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class QuinticEaseMaker: MakeFromAbi {
    public typealias SwiftType = QuinticEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return QuinticEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ReorderThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = ReorderThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ReorderThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RepeatBehaviorHelperMaker: MakeFromAbi {
    public typealias SwiftType = RepeatBehaviorHelper
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RepeatBehaviorHelper(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RepositionThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = RepositionThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RepositionThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RepositionThemeTransitionMaker: MakeFromAbi {
    public typealias SwiftType = RepositionThemeTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RepositionThemeTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SineEaseMaker: MakeFromAbi {
    public typealias SwiftType = SineEase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SineEase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SlideNavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = SlideNavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SlideNavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplineColorKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = SplineColorKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplineColorKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplineDoubleKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = SplineDoubleKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplineDoubleKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplinePointKeyFrameMaker: MakeFromAbi {
    public typealias SwiftType = SplinePointKeyFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplinePointKeyFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplitCloseThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = SplitCloseThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplitCloseThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplitOpenThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = SplitOpenThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplitOpenThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class StoryboardMaker: MakeFromAbi {
    public typealias SwiftType = Storyboard
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Storyboard(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SuppressNavigationTransitionInfoMaker: MakeFromAbi {
    public typealias SwiftType = SuppressNavigationTransitionInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SuppressNavigationTransitionInfo(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SwipeBackThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = SwipeBackThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SwipeBackThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SwipeHintThemeAnimationMaker: MakeFromAbi {
    public typealias SwiftType = SwipeHintThemeAnimation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SwipeHintThemeAnimation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TimelineMaker: MakeFromAbi {
    public typealias SwiftType = Timeline
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Timeline(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TimelineCollectionMaker: MakeFromAbi {
    public typealias SwiftType = TimelineCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TimelineCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TransitionMaker: MakeFromAbi {
    public typealias SwiftType = Transition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Transition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TransitionCollectionMaker: MakeFromAbi {
    public typealias SwiftType = TransitionCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TransitionCollection(fromAbi: abi)
    }
}
