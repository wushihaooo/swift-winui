// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.animationdirection)
public typealias AnimationDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CAnimationDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.componentresourcelocation)
public typealias ComponentResourceLocation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.edgetransitionlocation)
public typealias EdgeTransitionLocation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CEdgeTransitionLocation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutplacementmode)
public typealias FlyoutPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutshowmode)
public typealias FlyoutShowMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.generatordirection)
public typealias GeneratorDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.groupheaderplacement)
public typealias GroupHeaderPlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGroupHeaderPlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.placementmode)
public typealias PlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popupplacementmode)
public typealias PopupPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollsnappointsalignment)
public typealias ScrollSnapPointsAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CScrollSnapPointsAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.slidersnapsto)
public typealias SliderSnapsTo = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.snappointsalignment)
public typealias SnapPointsAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.tickplacement)
public typealias TickPlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings)
public final class AppBarTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IAppBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.cliprect)
    public var clipRect : WindowsFoundation.Rect {
        get { try! _default.get_ClipRect() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.compactrootmargin)
    public var compactRootMargin : WinUI.Thickness {
        get { try! _default.get_CompactRootMargin() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.compactverticaldelta)
    public var compactVerticalDelta : Double {
        get { try! _default.get_CompactVerticalDelta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.hiddenrootmargin)
    public var hiddenRootMargin : WinUI.Thickness {
        get { try! _default.get_HiddenRootMargin() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.hiddenverticaldelta)
    public var hiddenVerticalDelta : Double {
        get { try! _default.get_HiddenVerticalDelta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.minimalrootmargin)
    public var minimalRootMargin : WinUI.Thickness {
        get { try! _default.get_MinimalRootMargin() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.minimalverticaldelta)
    public var minimalVerticalDelta : Double {
        get { try! _default.get_MinimalVerticalDelta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.negativecompactverticaldelta)
    public var negativeCompactVerticalDelta : Double {
        get { try! _default.get_NegativeCompactVerticalDelta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.negativehiddenverticaldelta)
    public var negativeHiddenVerticalDelta : Double {
        get { try! _default.get_NegativeHiddenVerticalDelta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.appbartemplatesettings.negativeminimalverticaldelta)
    public var negativeMinimalVerticalDelta : Double {
        get { try! _default.get_NegativeMinimalVerticalDelta() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase)
open class ButtonBase : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IButtonBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IButtonBaseFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IButtonBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.ButtonBaseBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IButtonBaseFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IButtonBaseStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IButtonBaseStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.clickmodeproperty)
    public class var clickModeProperty : WinUI.DependencyProperty! {
        get { try! _IButtonBaseStatics.get_ClickModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.commandparameterproperty)
    public class var commandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IButtonBaseStatics.get_CommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.commandproperty)
    public class var commandProperty : WinUI.DependencyProperty! {
        get { try! _IButtonBaseStatics.get_CommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.ispointeroverproperty)
    public class var isPointerOverProperty : WinUI.DependencyProperty! {
        get { try! _IButtonBaseStatics.get_IsPointerOverProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.ispressedproperty)
    public class var isPressedProperty : WinUI.DependencyProperty! {
        get { try! _IButtonBaseStatics.get_IsPressedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.clickmode)
    public var clickMode : WinUI.ClickMode {
        get { try! _default.get_ClickMode() }
        set { try! _default.put_ClickMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.command)
    public var command : WinUI.AnyICommand! {
        get { try! _default.get_Command() }
        set { try! _default.put_Command(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.commandparameter)
    public var commandParameter : Any! {
        get { try! _default.get_CommandParameter() }
        set { try! _default.put_CommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.ispointerover)
    public var isPointerOver : Bool {
        get { try! _default.get_IsPointerOver() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.ispressed)
    public var isPressed : Bool {
        get { try! _default.get_IsPressed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.buttonbase.click)
    public lazy var click : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Click($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Click($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.comboboxtemplatesettings)
public final class ComboBoxTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IComboBoxTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.comboboxtemplatesettings.dropdownclosedheight)
    public var dropDownClosedHeight : Double {
        get { try! _default.get_DropDownClosedHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.comboboxtemplatesettings.dropdowncontentminwidth)
    public var dropDownContentMinWidth : Double {
        get { try! _default.get_DropDownContentMinWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.comboboxtemplatesettings.dropdownoffset)
    public var dropDownOffset : Double {
        get { try! _default.get_DropDownOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.comboboxtemplatesettings.dropdownopenedheight)
    public var dropDownOpenedHeight : Double {
        get { try! _default.get_DropDownOpenedHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.comboboxtemplatesettings.selecteditemdirection)
    public var selectedItemDirection : AnimationDirection {
        get { try! _default.get_SelectedItemDirection() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase)
open class FlyoutBase : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IFlyoutBaseFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.FlyoutBaseBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlyoutBaseFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFlyoutBaseStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.getattachedflyout)
    public class func getAttachedFlyout(_ element: WinUI.FrameworkElement!) throws -> FlyoutBase! {
        return try _IFlyoutBaseStatics.GetAttachedFlyout(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.setattachedflyout)
    public class func setAttachedFlyout(_ element: WinUI.FrameworkElement!, _ value: FlyoutBase!) throws {
        try _IFlyoutBaseStatics.SetAttachedFlyout(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.showattachedflyout)
    public class func showAttachedFlyout(_ flyoutOwner: WinUI.FrameworkElement!) throws {
        try _IFlyoutBaseStatics.ShowAttachedFlyout(flyoutOwner)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.allowfocusoninteractionproperty)
    public class var allowFocusOnInteractionProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_AllowFocusOnInteractionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.allowfocuswhendisabledproperty)
    public class var allowFocusWhenDisabledProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_AllowFocusWhenDisabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.areopencloseanimationsenabledproperty)
    public class var areOpenCloseAnimationsEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_AreOpenCloseAnimationsEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.attachedflyoutproperty)
    public class var attachedFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_AttachedFlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.elementsoundmodeproperty)
    public class var elementSoundModeProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_ElementSoundModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.inputdeviceprefersprimarycommandsproperty)
    public class var inputDevicePrefersPrimaryCommandsProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_InputDevicePrefersPrimaryCommandsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_IsOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_LightDismissOverlayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.overlayinputpassthroughelementproperty)
    public class var overlayInputPassThroughElementProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_OverlayInputPassThroughElementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.placementproperty)
    public class var placementProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_PlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.shouldconstraintorootboundsproperty)
    public class var shouldConstrainToRootBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_ShouldConstrainToRootBoundsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.showmodeproperty)
    public class var showModeProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_ShowModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.targetproperty)
    public class var targetProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics.get_TargetProperty() }
    }

    private static let _IFlyoutBaseStatics2: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.systembackdropproperty)
    public class var systemBackdropProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutBaseStatics2.get_SystemBackdropProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.showat)
    public func showAt(_ placementTarget: WinUI.FrameworkElement!) throws {
        try _default.ShowAt(placementTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.showat)
    public func showAt(_ placementTarget: WinUI.DependencyObject!, _ showOptions: FlyoutShowOptions!) throws {
        try _default.ShowAtWithOptions(placementTarget, showOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.hide)
    public func hide() throws {
        try _default.Hide()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.tryinvokekeyboardaccelerator)
    public func tryInvokeKeyboardAccelerator(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs!) throws {
        try _default.TryInvokeKeyboardAccelerator(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.allowfocusoninteraction)
    public var allowFocusOnInteraction : Bool {
        get { try! _default.get_AllowFocusOnInteraction() }
        set { try! _default.put_AllowFocusOnInteraction(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.allowfocuswhendisabled)
    public var allowFocusWhenDisabled : Bool {
        get { try! _default.get_AllowFocusWhenDisabled() }
        set { try! _default.put_AllowFocusWhenDisabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.areopencloseanimationsenabled)
    public var areOpenCloseAnimationsEnabled : Bool {
        get { try! _default.get_AreOpenCloseAnimationsEnabled() }
        set { try! _default.put_AreOpenCloseAnimationsEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.elementsoundmode)
    public var elementSoundMode : WinUI.ElementSoundMode {
        get { try! _default.get_ElementSoundMode() }
        set { try! _default.put_ElementSoundMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.inputdeviceprefersprimarycommands)
    public var inputDevicePrefersPrimaryCommands : Bool {
        get { try! _default.get_InputDevicePrefersPrimaryCommands() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.isconstrainedtorootbounds)
    public var isConstrainedToRootBounds : Bool {
        get { try! _default.get_IsConstrainedToRootBounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpen() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.lightdismissoverlaymode)
    public var lightDismissOverlayMode : WinUI.LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayMode() }
        set { try! _default.put_LightDismissOverlayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.overlayinputpassthroughelement)
    public var overlayInputPassThroughElement : WinUI.DependencyObject! {
        get { try! _default.get_OverlayInputPassThroughElement() }
        set { try! _default.put_OverlayInputPassThroughElement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.placement)
    public var placement : FlyoutPlacementMode {
        get { try! _default.get_Placement() }
        set { try! _default.put_Placement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.shouldconstraintorootbounds)
    public var shouldConstrainToRootBounds : Bool {
        get { try! _default.get_ShouldConstrainToRootBounds() }
        set { try! _default.put_ShouldConstrainToRootBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.showmode)
    public var showMode : FlyoutShowMode {
        get { try! _default.get_ShowMode() }
        set { try! _default.put_ShowMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.target)
    public var target : WinUI.FrameworkElement! {
        get { try! _default.get_Target() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.xamlroot)
    public var xamlRoot : WinUI.XamlRoot! {
        get { try! _default.get_XamlRoot() }
        set { try! _default.put_XamlRoot(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.closed)
    public lazy var closed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.closing)
    public lazy var closing : Event<TypedEventHandler<FlyoutBase?, FlyoutBaseClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.opened)
    public lazy var opened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opened($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.opening)
    public lazy var opening : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opening($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opening($0)
       }
      )
    }()

    private lazy var _IFlyoutBase2: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBase2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.systembackdrop)
    public var systemBackdrop : WinUI.SystemBackdrop! {
        get { try! _IFlyoutBase2.get_SystemBackdrop() }
        set { try! _IFlyoutBase2.put_SystemBackdrop(newValue) }
    }

    private lazy var _IFlyoutBaseOverrides: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.createpresenter)
    open func createPresenter() throws -> WinUI.Control! {
        try _IFlyoutBaseOverrides.CreatePresenter()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbase.onprocesskeyboardaccelerators)
    open func onProcessKeyboardAccelerators(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs!) throws {
        try _IFlyoutBaseOverrides.OnProcessKeyboardAccelerators(args)
    }

    deinit {
        _default = nil
        _IFlyoutBase2 = nil
        _IFlyoutBaseOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbaseclosingeventargs)
public final class FlyoutBaseClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutbaseclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutshowoptions)
open class FlyoutShowOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutShowOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutShowOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutShowOptionsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.FlyoutShowOptionsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IFlyoutShowOptionsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutshowoptions.exclusionrect)
    public var exclusionRect : WindowsFoundation.Rect? {
        get { try! _default.get_ExclusionRect() }
        set { try! _default.put_ExclusionRect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutshowoptions.placement)
    public var placement : FlyoutPlacementMode {
        get { try! _default.get_Placement() }
        set { try! _default.put_Placement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutshowoptions.position)
    public var position : WindowsFoundation.Point? {
        get { try! _default.get_Position() }
        set { try! _default.put_Position(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.flyoutshowoptions.showmode)
    public var showMode : FlyoutShowMode {
        get { try! _default.get_ShowMode() }
        set { try! _default.put_ShowMode(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.gridviewitemtemplatesettings)
public final class GridViewItemTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IGridViewItemTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIGridViewItemTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.gridviewitemtemplatesettings.dragitemscount)
    public var dragItemsCount : Int32 {
        get { try! _default.get_DragItemsCount() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.itemschangedeventargs)
public final class ItemsChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IItemsChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.itemschangedeventargs.action)
    public var action : Int32 {
        get { try! _default.get_Action() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.itemschangedeventargs.itemcount)
    public var itemCount : Int32 {
        get { try! _default.get_ItemCount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.itemschangedeventargs.itemuicount)
    public var itemUICount : Int32 {
        get { try! _default.get_ItemUICount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.itemschangedeventargs.oldposition)
    public var oldPosition : GeneratorPosition {
        get { try! _default.get_OldPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.itemschangedeventargs.position)
    public var position : GeneratorPosition {
        get { try! _default.get_Position() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.listviewitemtemplatesettings)
public final class ListViewItemTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IListViewItemTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIListViewItemTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.listviewitemtemplatesettings.dragitemscount)
    public var dragItemsCount : Int32 {
        get { try! _default.get_DragItemsCount() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.menuflyoutitemtemplatesettings)
public final class MenuFlyoutItemTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IMenuFlyoutItemTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIMenuFlyoutItemTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.menuflyoutitemtemplatesettings.keyboardacceleratortextminwidth)
    public var keyboardAcceleratorTextMinWidth : Double {
        get { try! _default.get_KeyboardAcceleratorTextMinWidth() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup)
public final class Popup : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPopup
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.Popup")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IPopupStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPopupStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.Popup")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.childproperty)
    public static var childProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_ChildProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.childtransitionsproperty)
    public static var childTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_ChildTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.horizontaloffsetproperty)
    public static var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_HorizontalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.islightdismissenabledproperty)
    public static var isLightDismissEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_IsLightDismissEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.isopenproperty)
    public static var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_IsOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.lightdismissoverlaymodeproperty)
    public static var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_LightDismissOverlayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.shouldconstraintorootboundsproperty)
    public static var shouldConstrainToRootBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_ShouldConstrainToRootBoundsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.verticaloffsetproperty)
    public static var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics.get_VerticalOffsetProperty() }
    }

    private static let _IPopupStatics2: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPopupStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.Popup")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.desiredplacementproperty)
    public static var desiredPlacementProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics2.get_DesiredPlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.placementtargetproperty)
    public static var placementTargetProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics2.get_PlacementTargetProperty() }
    }

    private static let _IPopupStatics3: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPopupStatics3 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.Popup")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.systembackdropproperty)
    public static var systemBackdropProperty : WinUI.DependencyProperty! {
        get { try! _IPopupStatics3.get_SystemBackdropProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_Child() }
        set { try! _default.put_Child(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.childtransitions)
    public var childTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildTransitions() }
        set { try! _default.put_ChildTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
        set { try! _default.put_HorizontalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.isconstrainedtorootbounds)
    public var isConstrainedToRootBounds : Bool {
        get { try! _default.get_IsConstrainedToRootBounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.islightdismissenabled)
    public var isLightDismissEnabled : Bool {
        get { try! _default.get_IsLightDismissEnabled() }
        set { try! _default.put_IsLightDismissEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpen() }
        set { try! _default.put_IsOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.lightdismissoverlaymode)
    public var lightDismissOverlayMode : WinUI.LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayMode() }
        set { try! _default.put_LightDismissOverlayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.shouldconstraintorootbounds)
    public var shouldConstrainToRootBounds : Bool {
        get { try! _default.get_ShouldConstrainToRootBounds() }
        set { try! _default.put_ShouldConstrainToRootBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
        set { try! _default.put_VerticalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.closed)
    public lazy var closed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.opened)
    public lazy var opened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opened($0)
       }
      )
    }()

    private lazy var _IPopup2: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPopup2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.actualplacement)
    public var actualPlacement : PopupPlacementMode {
        get { try! _IPopup2.get_ActualPlacement() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.desiredplacement)
    public var desiredPlacement : PopupPlacementMode {
        get { try! _IPopup2.get_DesiredPlacement() }
        set { try! _IPopup2.put_DesiredPlacement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.placementtarget)
    public var placementTarget : WinUI.FrameworkElement! {
        get { try! _IPopup2.get_PlacementTarget() }
        set { try! _IPopup2.put_PlacementTarget(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.actualplacementchanged)
    public lazy var actualPlacementChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IPopup2 else { return .init() }
          return try! this.add_ActualPlacementChanged($0)
        },
        remove: { [weak self] in
         try? self?._IPopup2.remove_ActualPlacementChanged($0)
       }
      )
    }()

    private lazy var _IPopup3: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPopup3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.popup.systembackdrop)
    public var systemBackdrop : WinUI.SystemBackdrop! {
        get { try! _IPopup3.get_SystemBackdrop() }
        set { try! _IPopup3.put_SystemBackdrop(newValue) }
    }

    deinit {
        _default = nil
        _IPopup2 = nil
        _IPopup3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase)
open class RangeBase : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IRangeBaseFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.RangeBase")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.RangeBaseBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRangeBaseFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IRangeBaseStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.RangeBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.largechangeproperty)
    public class var largeChangeProperty : WinUI.DependencyProperty! {
        get { try! _IRangeBaseStatics.get_LargeChangeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.maximumproperty)
    public class var maximumProperty : WinUI.DependencyProperty! {
        get { try! _IRangeBaseStatics.get_MaximumProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.minimumproperty)
    public class var minimumProperty : WinUI.DependencyProperty! {
        get { try! _IRangeBaseStatics.get_MinimumProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.smallchangeproperty)
    public class var smallChangeProperty : WinUI.DependencyProperty! {
        get { try! _IRangeBaseStatics.get_SmallChangeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IRangeBaseStatics.get_ValueProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.largechange)
    public var largeChange : Double {
        get { try! _default.get_LargeChange() }
        set { try! _default.put_LargeChange(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.maximum)
    public var maximum : Double {
        get { try! _default.get_Maximum() }
        set { try! _default.put_Maximum(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.minimum)
    public var minimum : Double {
        get { try! _default.get_Minimum() }
        set { try! _default.put_Minimum(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.smallchange)
    public var smallChange : Double {
        get { try! _default.get_SmallChange() }
        set { try! _default.put_SmallChange(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.value)
    public var value : Double {
        get { try! _default.get_Value() }
        set { try! _default.put_Value(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.valuechanged)
    public lazy var valueChanged : Event<RangeBaseValueChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ValueChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ValueChanged($0)
       }
      )
    }()

    private lazy var _IRangeBaseOverrides: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.onminimumchanged)
    open func onMinimumChanged(_ oldMinimum: Double, _ newMinimum: Double) throws {
        try _IRangeBaseOverrides.OnMinimumChanged(oldMinimum, newMinimum)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.onmaximumchanged)
    open func onMaximumChanged(_ oldMaximum: Double, _ newMaximum: Double) throws {
        try _IRangeBaseOverrides.OnMaximumChanged(oldMaximum, newMaximum)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebase.onvaluechanged)
    open func onValueChanged(_ oldValue: Double, _ newValue: Double) throws {
        try _IRangeBaseOverrides.OnValueChanged(oldValue, newValue)
    }

    deinit {
        _default = nil
        _IRangeBaseOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebasevaluechangedeventargs)
public final class RangeBaseValueChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseValueChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebasevaluechangedeventargs.newvalue)
    public var newValue : Double {
        get { try! _default.get_NewValue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.rangebasevaluechangedeventargs.oldvalue)
    public var oldValue : Double {
        get { try! _default.get_OldValue() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrolleraddscrollvelocityrequestedeventargs)
public final class ScrollControllerAddScrollVelocityRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerAddScrollVelocityRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IScrollControllerAddScrollVelocityRequestedEventArgsFactory: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs")
    public init(_ offsetVelocity: Float, _ inertiaDecayRate: Float?) {
        super.init(try! Self._IScrollControllerAddScrollVelocityRequestedEventArgsFactory.CreateInstance(offsetVelocity, inertiaDecayRate))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrolleraddscrollvelocityrequestedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
        set { try! _default.put_CorrelationId(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrolleraddscrollvelocityrequestedeventargs.inertiadecayrate)
    public var inertiaDecayRate : Float? {
        get { try! _default.get_InertiaDecayRate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrolleraddscrollvelocityrequestedeventargs.offsetvelocity)
    public var offsetVelocity : Float {
        get { try! _default.get_OffsetVelocity() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerpanrequestedeventargs)
public final class ScrollControllerPanRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IScrollControllerPanRequestedEventArgsFactory: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanRequestedEventArgsFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs")
    public init(_ pointerPoint: WinAppSDK.PointerPoint!) {
        super.init(try! Self._IScrollControllerPanRequestedEventArgsFactory.CreateInstance(pointerPoint))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerpanrequestedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerpanrequestedeventargs.pointerpoint)
    public var pointerPoint : WinAppSDK.PointerPoint! {
        get { try! _default.get_PointerPoint() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrollbyrequestedeventargs)
public final class ScrollControllerScrollByRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerScrollByRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IScrollControllerScrollByRequestedEventArgsFactory: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerScrollByRequestedEventArgsFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs")
    public init(_ offsetDelta: Double, _ options: WinUI.ScrollingScrollOptions!) {
        super.init(try! Self._IScrollControllerScrollByRequestedEventArgsFactory.CreateInstance(offsetDelta, options))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrollbyrequestedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
        set { try! _default.put_CorrelationId(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrollbyrequestedeventargs.offsetdelta)
    public var offsetDelta : Double {
        get { try! _default.get_OffsetDelta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrollbyrequestedeventargs.options)
    public var options : WinUI.ScrollingScrollOptions! {
        get { try! _default.get_Options() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrolltorequestedeventargs)
public final class ScrollControllerScrollToRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerScrollToRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IScrollControllerScrollToRequestedEventArgsFactory: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerScrollToRequestedEventArgsFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs")
    public init(_ offset: Double, _ options: WinUI.ScrollingScrollOptions!) {
        super.init(try! Self._IScrollControllerScrollToRequestedEventArgsFactory.CreateInstance(offset, options))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrolltorequestedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
        set { try! _default.put_CorrelationId(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrolltorequestedeventargs.offset)
    public var offset : Double {
        get { try! _default.get_Offset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollcontrollerscrolltorequestedeventargs.options)
    public var options : WinUI.ScrollingScrollOptions! {
        get { try! _default.get_Options() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter)
open class ScrollPresenter : WinUI.FrameworkElement, WinUI.IScrollAnchorProvider {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollPresenterFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.ScrollPresenterBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IScrollPresenterFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IScrollPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollPresenterStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_BackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.computedhorizontalscrollmodeproperty)
    public class var computedHorizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_ComputedHorizontalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.computedverticalscrollmodeproperty)
    public class var computedVerticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_ComputedVerticalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.contentorientationproperty)
    public class var contentOrientationProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_ContentOrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalanchorratioproperty)
    public class var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_HorizontalAnchorRatioProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollchainmodeproperty)
    public class var horizontalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_HorizontalScrollChainModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollmodeproperty)
    public class var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_HorizontalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollrailmodeproperty)
    public class var horizontalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_HorizontalScrollRailModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.ignoredinputkindsproperty)
    public class var ignoredInputKindsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_IgnoredInputKindsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.maxzoomfactorproperty)
    public class var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_MaxZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.minzoomfactorproperty)
    public class var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_MinZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalanchorratioproperty)
    public class var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_VerticalAnchorRatioProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollchainmodeproperty)
    public class var verticalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_VerticalScrollChainModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollmodeproperty)
    public class var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_VerticalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollrailmodeproperty)
    public class var verticalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_VerticalScrollRailModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomchainmodeproperty)
    public class var zoomChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_ZoomChainModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoommodeproperty)
    public class var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollPresenterStatics.get_ZoomModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollto)
    public func scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
        try _default.ScrollTo(horizontalOffset, verticalOffset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollto)
    public func scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: WinUI.ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollToWithOptions(horizontalOffset, verticalOffset, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollby)
    public func scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
        try _default.ScrollBy(horizontalOffsetDelta, verticalOffsetDelta)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollby)
    public func scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: WinUI.ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollByWithOptions(horizontalOffsetDelta, verticalOffsetDelta, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.addscrollvelocity)
    public func addScrollVelocity(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.AddScrollVelocity(offsetsVelocity, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomto)
    public func zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomTo(zoomFactor, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomto)
    public func zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomToWithOptions(zoomFactor, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomby)
    public func zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomBy(zoomFactorDelta, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomby)
    public func zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomByWithOptions(zoomFactorDelta, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.addzoomvelocity)
    public func addZoomVelocity(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
        try _default.AddZoomVelocity(zoomFactorVelocity, centerPoint, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.computedhorizontalscrollmode)
    public var computedHorizontalScrollMode : WinUI.ScrollingScrollMode {
        get { try! _default.get_ComputedHorizontalScrollMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.computedverticalscrollmode)
    public var computedVerticalScrollMode : WinUI.ScrollingScrollMode {
        get { try! _default.get_ComputedVerticalScrollMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.contentorientation)
    public var contentOrientation : WinUI.ScrollingContentOrientation {
        get { try! _default.get_ContentOrientation() }
        set { try! _default.put_ContentOrientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.expressionanimationsources)
    public var expressionAnimationSources : WinAppSDK.CompositionPropertySet! {
        get { try! _default.get_ExpressionAnimationSources() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatio() }
        set { try! _default.put_HorizontalAnchorRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollchainmode)
    public var horizontalScrollChainMode : WinUI.ScrollingChainMode {
        get { try! _default.get_HorizontalScrollChainMode() }
        set { try! _default.put_HorizontalScrollChainMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollcontroller)
    public var horizontalScrollController : AnyIScrollController! {
        get { try! _default.get_HorizontalScrollController() }
        set { try! _default.put_HorizontalScrollController(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollmode)
    public var horizontalScrollMode : WinUI.ScrollingScrollMode {
        get { try! _default.get_HorizontalScrollMode() }
        set { try! _default.put_HorizontalScrollMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalscrollrailmode)
    public var horizontalScrollRailMode : WinUI.ScrollingRailMode {
        get { try! _default.get_HorizontalScrollRailMode() }
        set { try! _default.put_HorizontalScrollRailMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.horizontalsnappoints)
    public var horizontalSnapPoints : WindowsFoundation.AnyIVector<ScrollSnapPointBase?>! {
        get { try! _default.get_HorizontalSnapPoints() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.ignoredinputkinds)
    public var ignoredInputKinds : WinUI.ScrollingInputKinds {
        get { try! _default.get_IgnoredInputKinds() }
        set { try! _default.put_IgnoredInputKinds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.maxzoomfactor)
    public var maxZoomFactor : Double {
        get { try! _default.get_MaxZoomFactor() }
        set { try! _default.put_MaxZoomFactor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.minzoomfactor)
    public var minZoomFactor : Double {
        get { try! _default.get_MinZoomFactor() }
        set { try! _default.put_MinZoomFactor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.state)
    public var state : WinUI.ScrollingInteractionState {
        get { try! _default.get_State() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatio() }
        set { try! _default.put_VerticalAnchorRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollchainmode)
    public var verticalScrollChainMode : WinUI.ScrollingChainMode {
        get { try! _default.get_VerticalScrollChainMode() }
        set { try! _default.put_VerticalScrollChainMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollcontroller)
    public var verticalScrollController : AnyIScrollController! {
        get { try! _default.get_VerticalScrollController() }
        set { try! _default.put_VerticalScrollController(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollmode)
    public var verticalScrollMode : WinUI.ScrollingScrollMode {
        get { try! _default.get_VerticalScrollMode() }
        set { try! _default.put_VerticalScrollMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalscrollrailmode)
    public var verticalScrollRailMode : WinUI.ScrollingRailMode {
        get { try! _default.get_VerticalScrollRailMode() }
        set { try! _default.put_VerticalScrollRailMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.verticalsnappoints)
    public var verticalSnapPoints : WindowsFoundation.AnyIVector<ScrollSnapPointBase?>! {
        get { try! _default.get_VerticalSnapPoints() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomchainmode)
    public var zoomChainMode : WinUI.ScrollingChainMode {
        get { try! _default.get_ZoomChainMode() }
        set { try! _default.put_ZoomChainMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoommode)
    public var zoomMode : WinUI.ScrollingZoomMode {
        get { try! _default.get_ZoomMode() }
        set { try! _default.put_ZoomMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomsnappoints)
    public var zoomSnapPoints : WindowsFoundation.AnyIVector<ZoomSnapPointBase?>! {
        get { try! _default.get_ZoomSnapPoints() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollPresenter?, ScrollingAnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AnchorRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AnchorRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.bringingintoview)
    public lazy var bringingIntoView : Event<TypedEventHandler<ScrollPresenter?, ScrollingBringingIntoViewEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BringingIntoView($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BringingIntoView($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.extentchanged)
    public lazy var extentChanged : Event<TypedEventHandler<ScrollPresenter?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ExtentChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ExtentChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollanimationstarting)
    public lazy var scrollAnimationStarting : Event<TypedEventHandler<ScrollPresenter?, ScrollingScrollAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollAnimationStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollAnimationStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollcompleted)
    public lazy var scrollCompleted : Event<TypedEventHandler<ScrollPresenter?, ScrollingScrollCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ScrollPresenter?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StateChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StateChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.viewchanged)
    public lazy var viewChanged : Event<TypedEventHandler<ScrollPresenter?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomanimationstarting)
    public lazy var zoomAnimationStarting : Event<TypedEventHandler<ScrollPresenter?, ScrollingZoomAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomAnimationStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomAnimationStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomcompleted)
    public lazy var zoomCompleted : Event<TypedEventHandler<ScrollPresenter?, ScrollingZoomCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomCompleted($0)
       }
      )
    }()

    private lazy var _IScrollPresenter2: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollPresenter2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.scrollstarting)
    public lazy var scrollStarting : Event<TypedEventHandler<ScrollPresenter?, ScrollingScrollStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollPresenter2 else { return .init() }
          return try! this.add_ScrollStarting($0)
        },
        remove: { [weak self] in
         try? self?._IScrollPresenter2.remove_ScrollStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.zoomstarting)
    public lazy var zoomStarting : Event<TypedEventHandler<ScrollPresenter?, ScrollingZoomStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollPresenter2 else { return .init() }
          return try! this.add_ZoomStarting($0)
        },
        remove: { [weak self] in
         try? self?._IScrollPresenter2.remove_ZoomStarting($0)
       }
      )
    }()

    private lazy var _IScrollAnchorProvider: __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.registeranchorcandidate)
    public func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.RegisterAnchorCandidate(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.unregisteranchorcandidate)
    public func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.UnregisterAnchorCandidate(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollpresenter.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _IScrollAnchorProvider.get_CurrentAnchor() }
    }

    deinit {
        _default = nil
        _IScrollPresenter2 = nil
        _IScrollAnchorProvider = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollsnappointbase)
open class ScrollSnapPointBase : WinUI.SnapPointBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollSnapPointBaseFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.scrollsnappointbase.alignment)
    public var alignment : ScrollSnapPointsAlignment {
        get { try! _default.get_Alignment() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector)
open class Selector : WinUI.ItemsControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectorFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelectorFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.Selector")

    private static let _ISelectorStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelectorStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.Selector")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.getisselectionactive)
    public class func getIsSelectionActive(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _ISelectorStatics.GetIsSelectionActive(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.issynchronizedwithcurrentitemproperty)
    public class var isSynchronizedWithCurrentItemProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorStatics.get_IsSynchronizedWithCurrentItemProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectedindexproperty)
    public class var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorStatics.get_SelectedIndexProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorStatics.get_SelectedItemProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectedvaluepathproperty)
    public class var selectedValuePathProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorStatics.get_SelectedValuePathProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectedvalueproperty)
    public class var selectedValueProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorStatics.get_SelectedValueProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.issynchronizedwithcurrentitem)
    public var isSynchronizedWithCurrentItem : Bool? {
        get { try! _default.get_IsSynchronizedWithCurrentItem() }
        set { try! _default.put_IsSynchronizedWithCurrentItem(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndex() }
        set { try! _default.put_SelectedIndex(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItem() }
        set { try! _default.put_SelectedItem(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectedvalue)
    public var selectedValue : Any! {
        get { try! _default.get_SelectedValue() }
        set { try! _default.put_SelectedValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectedvaluepath)
    public var selectedValuePath : String {
        get { try! _default.get_SelectedValuePath() }
        set { try! _default.put_SelectedValuePath(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selector.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.SelectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selectoritem)
open class SelectorItem : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelectorItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectorItemFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelectorItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.SelectorItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.SelectorItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISelectorItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ISelectorItemStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelectorItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.SelectorItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selectoritem.isselectedproperty)
    public class var isSelectedProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorItemStatics.get_IsSelectedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.selectoritem.isselected)
    public var isSelected : Bool {
        get { try! _default.get_IsSelected() }
        set { try! _default.put_IsSelected(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.snappointbase)
open class SnapPointBase : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISnapPointBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISnapPointBaseFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISnapPointBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings)
public final class SplitViewTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISplitViewTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings.compactpanegridlength)
    public var compactPaneGridLength : WinUI.GridLength {
        get { try! _default.get_CompactPaneGridLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings.negativeopenpanelength)
    public var negativeOpenPaneLength : Double {
        get { try! _default.get_NegativeOpenPaneLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings.negativeopenpanelengthminuscompactlength)
    public var negativeOpenPaneLengthMinusCompactLength : Double {
        get { try! _default.get_NegativeOpenPaneLengthMinusCompactLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings.openpanegridlength)
    public var openPaneGridLength : WinUI.GridLength {
        get { try! _default.get_OpenPaneGridLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.splitviewtemplatesettings.openpanelengthminuscompactlength)
    public var openPaneLengthMinusCompactLength : Double {
        get { try! _default.get_OpenPaneLengthMinusCompactLength() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton)
open class ToggleButton : WinUI.ButtonBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IToggleButtonFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ToggleButton")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls_Primitives.ToggleButtonBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IToggleButtonFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IToggleButtonStatics: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ToggleButton")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.ischeckedproperty)
    public class var isCheckedProperty : WinUI.DependencyProperty! {
        get { try! _IToggleButtonStatics.get_IsCheckedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.isthreestateproperty)
    public class var isThreeStateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleButtonStatics.get_IsThreeStateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.ischecked)
    public var isChecked : Bool? {
        get { try! _default.get_IsChecked() }
        set { try! _default.put_IsChecked(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.isthreestate)
    public var isThreeState : Bool {
        get { try! _default.get_IsThreeState() }
        set { try! _default.put_IsThreeState(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.checked)
    public lazy var checked : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Checked($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Checked($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.indeterminate)
    public lazy var indeterminate : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Indeterminate($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Indeterminate($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.unchecked)
    public lazy var unchecked : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Unchecked($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Unchecked($0)
       }
      )
    }()

    private lazy var _IToggleButtonOverrides: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.togglebutton.ontoggle)
    open func onToggle() throws {
        try _IToggleButtonOverrides.OnToggle()
    }

    deinit {
        _default = nil
        _IToggleButtonOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings)
public final class ToggleSwitchTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleSwitchTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.curtaincurrenttooffoffset)
    public var curtainCurrentToOffOffset : Double {
        get { try! _default.get_CurtainCurrentToOffOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.curtaincurrenttoonoffset)
    public var curtainCurrentToOnOffset : Double {
        get { try! _default.get_CurtainCurrentToOnOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.curtainofftoonoffset)
    public var curtainOffToOnOffset : Double {
        get { try! _default.get_CurtainOffToOnOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.curtainontooffoffset)
    public var curtainOnToOffOffset : Double {
        get { try! _default.get_CurtainOnToOffOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.knobcurrenttooffoffset)
    public var knobCurrentToOffOffset : Double {
        get { try! _default.get_KnobCurrentToOffOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.knobcurrenttoonoffset)
    public var knobCurrentToOnOffset : Double {
        get { try! _default.get_KnobCurrentToOnOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.knobofftoonoffset)
    public var knobOffToOnOffset : Double {
        get { try! _default.get_KnobOffToOnOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.toggleswitchtemplatesettings.knobontooffoffset)
    public var knobOnToOffOffset : Double {
        get { try! _default.get_KnobOnToOffOffset() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.tooltiptemplatesettings)
public final class ToolTipTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToolTipTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.tooltiptemplatesettings.fromhorizontaloffset)
    public var fromHorizontalOffset : Double {
        get { try! _default.get_FromHorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.tooltiptemplatesettings.fromverticaloffset)
    public var fromVerticalOffset : Double {
        get { try! _default.get_FromVerticalOffset() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.zoomsnappointbase)
open class ZoomSnapPointBase : WinUI.SnapPointBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IZoomSnapPointBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IZoomSnapPointBaseFactory : __ABI_Microsoft_UI_Xaml_Controls_Primitives.IZoomSnapPointBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase")

    deinit {
        _default = nil
    }
}

public typealias ItemsChangedEventHandler = (Any?, ItemsChangedEventArgs?) throws -> ()
public typealias RangeBaseValueChangedEventHandler = (Any?, RangeBaseValueChangedEventArgs?) throws -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.generatorposition)
public struct GeneratorPosition: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.generatorposition.index)
    public var index: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.generatorposition.offset)
    public var offset: Int32 = 0
    public init() {}
    public init(index: Int32, offset: Int32) {
        self.index = index
        self.offset = offset
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller)
public protocol IScrollController : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.setisscrollable)
    func setIsScrollable(_ isScrollable: Bool) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.setvalues)
    func setValues(_ minOffset: Double, _ maxOffset: Double, _ offset: Double, _ viewportLength: Double) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.getscrollanimation)
    func getScrollAnimation(_ correlationId: Int32, _ startPosition: WindowsFoundation.Vector2, _ endPosition: WindowsFoundation.Vector2, _ defaultAnimation: WinAppSDK.CompositionAnimation!) throws -> WinAppSDK.CompositionAnimation!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.notifyrequestedscrollcompleted)
    func notifyRequestedScrollCompleted(_ correlationId: Int32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.canscroll)
    var canScroll: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.isscrollingwithmouse)
    var isScrollingWithMouse: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.panninginfo)
    var panningInfo: WinUI.AnyIScrollControllerPanningInfo! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.addscrollvelocityrequested)
    var addScrollVelocityRequested: Event<TypedEventHandler<IScrollController?, ScrollControllerAddScrollVelocityRequestedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.canscrollchanged)
    var canScrollChanged: Event<TypedEventHandler<IScrollController?, Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.isscrollingwithmousechanged)
    var isScrollingWithMouseChanged: Event<TypedEventHandler<IScrollController?, Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.scrollbyrequested)
    var scrollByRequested: Event<TypedEventHandler<IScrollController?, ScrollControllerScrollByRequestedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.scrolltorequested)
    var scrollToRequested: Event<TypedEventHandler<IScrollController?, ScrollControllerScrollToRequestedEventArgs?>> { get }
}

extension IScrollController {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIScrollController = any IScrollController

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo)
public protocol IScrollControllerPanningInfo : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.setpanningelementexpressionanimationsources)
    func setPanningElementExpressionAnimationSources(_ propertySet: WinAppSDK.CompositionPropertySet!, _ minOffsetPropertyName: String, _ maxOffsetPropertyName: String, _ offsetPropertyName: String, _ multiplierPropertyName: String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.israilenabled)
    var isRailEnabled: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panorientation)
    var panOrientation: WinUI.Orientation { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panningelementancestor)
    var panningElementAncestor: WinUI.UIElement! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.changed)
    var changed: Event<TypedEventHandler<IScrollControllerPanningInfo?, Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panrequested)
    var panRequested: Event<TypedEventHandler<IScrollControllerPanningInfo?, ScrollControllerPanRequestedEventArgs?>> { get }
}

extension IScrollControllerPanningInfo {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIScrollControllerPanningInfo = any IScrollControllerPanningInfo

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo)
public protocol IScrollSnapPointsInfo : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.getirregularsnappoints)
    func getIrregularSnapPoints(_ orientation: WinUI.Orientation, _ alignment: WinUI.SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.getregularsnappoints)
    func getRegularSnapPoints(_ orientation: WinUI.Orientation, _ alignment: WinUI.SnapPointsAlignment, _ offset: inout Float) throws -> Float
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.arehorizontalsnappointsregular)
    var areHorizontalSnapPointsRegular: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.areverticalsnappointsregular)
    var areVerticalSnapPointsRegular: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.horizontalsnappointschanged)
    var horizontalSnapPointsChanged: Event<EventHandler<Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.verticalsnappointschanged)
    var verticalSnapPointsChanged: Event<EventHandler<Any?>> { get }
}

extension IScrollSnapPointsInfo {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIScrollSnapPointsInfo = any IScrollSnapPointsInfo

extension WinUI.AnimationDirection {
    public static var left : WinUI.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CAnimationDirection_Left
    }
    public static var top : WinUI.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CAnimationDirection_Top
    }
    public static var right : WinUI.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CAnimationDirection_Right
    }
    public static var bottom : WinUI.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CAnimationDirection_Bottom
    }
}
extension WinUI.AnimationDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ComponentResourceLocation {
    public static var application : WinUI.ComponentResourceLocation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation_Application
    }
    public static var nested : WinUI.ComponentResourceLocation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation_Nested
    }
}
extension WinUI.ComponentResourceLocation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.EdgeTransitionLocation {
    public static var left : WinUI.EdgeTransitionLocation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CEdgeTransitionLocation_Left
    }
    public static var top : WinUI.EdgeTransitionLocation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CEdgeTransitionLocation_Top
    }
    public static var right : WinUI.EdgeTransitionLocation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CEdgeTransitionLocation_Right
    }
    public static var bottom : WinUI.EdgeTransitionLocation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CEdgeTransitionLocation_Bottom
    }
}
extension WinUI.EdgeTransitionLocation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FlyoutPlacementMode {
    public static var top : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_Top
    }
    public static var bottom : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_Bottom
    }
    public static var left : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_Left
    }
    public static var right : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_Right
    }
    public static var full : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_Full
    }
    public static var topEdgeAlignedLeft : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_TopEdgeAlignedLeft
    }
    public static var topEdgeAlignedRight : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_TopEdgeAlignedRight
    }
    public static var bottomEdgeAlignedLeft : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_BottomEdgeAlignedLeft
    }
    public static var bottomEdgeAlignedRight : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_BottomEdgeAlignedRight
    }
    public static var leftEdgeAlignedTop : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_LeftEdgeAlignedTop
    }
    public static var leftEdgeAlignedBottom : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_LeftEdgeAlignedBottom
    }
    public static var rightEdgeAlignedTop : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_RightEdgeAlignedTop
    }
    public static var rightEdgeAlignedBottom : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_RightEdgeAlignedBottom
    }
    public static var auto : WinUI.FlyoutPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode_Auto
    }
}
extension WinUI.FlyoutPlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FlyoutShowMode {
    public static var auto : WinUI.FlyoutShowMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode_Auto
    }
    public static var standard : WinUI.FlyoutShowMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode_Standard
    }
    public static var transient : WinUI.FlyoutShowMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode_Transient
    }
    public static var transientWithDismissOnPointerMoveAway : WinUI.FlyoutShowMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode_TransientWithDismissOnPointerMoveAway
    }
}
extension WinUI.FlyoutShowMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.GeneratorDirection {
    public static var forward : WinUI.GeneratorDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorDirection_Forward
    }
    public static var backward : WinUI.GeneratorDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorDirection_Backward
    }
}
extension WinUI.GeneratorDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.GroupHeaderPlacement {
    public static var top : WinUI.GroupHeaderPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGroupHeaderPlacement_Top
    }
    public static var left : WinUI.GroupHeaderPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGroupHeaderPlacement_Left
    }
}
extension WinUI.GroupHeaderPlacement: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PlacementMode {
    public static var bottom : WinUI.PlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode_Bottom
    }
    public static var left : WinUI.PlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode_Left
    }
    public static var mouse : WinUI.PlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode_Mouse
    }
    public static var right : WinUI.PlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode_Right
    }
    public static var top : WinUI.PlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode_Top
    }
}
extension WinUI.PlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PopupPlacementMode {
    public static var auto : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_Auto
    }
    public static var top : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_Top
    }
    public static var bottom : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_Bottom
    }
    public static var left : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_Left
    }
    public static var right : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_Right
    }
    public static var topEdgeAlignedLeft : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_TopEdgeAlignedLeft
    }
    public static var topEdgeAlignedRight : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_TopEdgeAlignedRight
    }
    public static var bottomEdgeAlignedLeft : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_BottomEdgeAlignedLeft
    }
    public static var bottomEdgeAlignedRight : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_BottomEdgeAlignedRight
    }
    public static var leftEdgeAlignedTop : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_LeftEdgeAlignedTop
    }
    public static var leftEdgeAlignedBottom : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_LeftEdgeAlignedBottom
    }
    public static var rightEdgeAlignedTop : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_RightEdgeAlignedTop
    }
    public static var rightEdgeAlignedBottom : WinUI.PopupPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode_RightEdgeAlignedBottom
    }
}
extension WinUI.PopupPlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollSnapPointsAlignment {
    public static var near : WinUI.ScrollSnapPointsAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CScrollSnapPointsAlignment_Near
    }
    public static var center : WinUI.ScrollSnapPointsAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CScrollSnapPointsAlignment_Center
    }
    public static var far : WinUI.ScrollSnapPointsAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CScrollSnapPointsAlignment_Far
    }
}
extension WinUI.ScrollSnapPointsAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SliderSnapsTo {
    public static var stepValues : WinUI.SliderSnapsTo {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_StepValues
    }
    public static var ticks : WinUI.SliderSnapsTo {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_Ticks
    }
}
extension WinUI.SliderSnapsTo: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SnapPointsAlignment {
    public static var near : WinUI.SnapPointsAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Near
    }
    public static var center : WinUI.SnapPointsAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Center
    }
    public static var far : WinUI.SnapPointsAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Far
    }
}
extension WinUI.SnapPointsAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TickPlacement {
    public static var none : WinUI.TickPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_None
    }
    public static var topLeft : WinUI.TickPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_TopLeft
    }
    public static var bottomRight : WinUI.TickPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_BottomRight
    }
    public static var outside : WinUI.TickPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_Outside
    }
    public static var inline : WinUI.TickPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_Inline
    }
}
extension WinUI.TickPlacement: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

