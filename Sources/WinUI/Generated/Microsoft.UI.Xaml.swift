// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.applicationhighcontrastadjustment)
public typealias ApplicationHighContrastAdjustment = __x_ABI_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.applicationtheme)
public typealias ApplicationTheme = __x_ABI_CMicrosoft_CUI_CXaml_CApplicationTheme
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dispatchershutdownmode)
public typealias DispatcherShutdownMode = __x_ABI_CMicrosoft_CUI_CXaml_CDispatcherShutdownMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.durationtype)
public typealias DurationType = __x_ABI_CMicrosoft_CUI_CXaml_CDurationType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementhighcontrastadjustment)
public typealias ElementHighContrastAdjustment = __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementsoundmode)
public typealias ElementSoundMode = __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementtheme)
public typealias ElementTheme = __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.flowdirection)
public typealias FlowDirection = __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.focusstate)
public typealias FocusState = __x_ABI_CMicrosoft_CUI_CXaml_CFocusState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.focusvisualkind)
public typealias FocusVisualKind = __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridunittype)
public typealias GridUnitType = __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.horizontalalignment)
public typealias HorizontalAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.layoutcycledebugbreaklevel)
public typealias LayoutCycleDebugBreakLevel = __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.layoutcycletracinglevel)
public typealias LayoutCycleTracingLevel = __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.linestackingstrategy)
public typealias LineStackingStrategy = __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.opticalmarginalignment)
public typealias OpticalMarginAlignment = __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textalignment)
public typealias TextAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textlinebounds)
public typealias TextLineBounds = __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textreadingorder)
public typealias TextReadingOrder = __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.texttrimming)
public typealias TextTrimming = __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textwrapping)
public typealias TextWrapping = __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transitioncomponents)
public typealias Vector3TransitionComponents = __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.verticalalignment)
public typealias VerticalAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.visibility)
public typealias Visibility = __x_ABI_CMicrosoft_CUI_CXaml_CVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivationstate)
public typealias WindowActivationState = __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application)
open class Application : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IApplication
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplication
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IApplicationOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml.IApplicationOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IApplicationFactory : __ABI_Microsoft_UI_Xaml.IApplicationFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Application")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.ApplicationBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IApplicationFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IApplicationStatics: __ABI_Microsoft_UI_Xaml.IApplicationStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Application")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.start)
    public class func start(_ callback: ApplicationInitializationCallback!) throws {
        try _IApplicationStatics.Start(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.loadcomponent)
    public class func loadComponent(_ component: Any!, _ resourceLocator: WindowsFoundation.Uri!) throws {
        try _IApplicationStatics.LoadComponent(component, resourceLocator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.loadcomponent)
    public class func loadComponent(_ component: Any!, _ resourceLocator: WindowsFoundation.Uri!, _ componentResourceLocation: WinUI.ComponentResourceLocation) throws {
        try _IApplicationStatics.LoadComponentWithResourceLocation(component, resourceLocator, componentResourceLocation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.current)
    public class var current : Application! {
        get { try! _IApplicationStatics.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.exit)
    public func exit() throws {
        try _default.Exit()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.debugsettings)
    public var debugSettings : DebugSettings! {
        get { try! _default.get_DebugSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.focusvisualkind)
    public var focusVisualKind : FocusVisualKind {
        get { try! _default.get_FocusVisualKind() }
        set { try! _default.put_FocusVisualKind(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.highcontrastadjustment)
    public var highContrastAdjustment : ApplicationHighContrastAdjustment {
        get { try! _default.get_HighContrastAdjustment() }
        set { try! _default.put_HighContrastAdjustment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.requestedtheme)
    public var requestedTheme : ApplicationTheme {
        get { try! _default.get_RequestedTheme() }
        set { try! _default.put_RequestedTheme(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.resources)
    public var resources : ResourceDictionary! {
        get { try! _default.get_Resources() }
        set { try! _default.put_Resources(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.unhandledexception)
    public lazy var unhandledException : Event<UnhandledExceptionEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_UnhandledException($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_UnhandledException($0)
       }
      )
    }()

    private lazy var _IApplication2: __ABI_Microsoft_UI_Xaml.IApplication2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.resourcemanagerrequested)
    public lazy var resourceManagerRequested : Event<TypedEventHandler<Any?, ResourceManagerRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IApplication2 else { return .init() }
          return try! this.add_ResourceManagerRequested($0)
        },
        remove: { [weak self] in
         try? self?._IApplication2.remove_ResourceManagerRequested($0)
       }
      )
    }()

    private lazy var _IApplication3: __ABI_Microsoft_UI_Xaml.IApplication3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.dispatchershutdownmode)
    public var dispatcherShutdownMode : DispatcherShutdownMode {
        get { try! _IApplication3.get_DispatcherShutdownMode() }
        set { try! _IApplication3.put_DispatcherShutdownMode(newValue) }
    }

    private lazy var _IApplicationOverrides: __ABI_Microsoft_UI_Xaml.IApplicationOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.onlaunched)
    open func onLaunched(_ args: LaunchActivatedEventArgs!) throws {
        try _IApplicationOverrides.OnLaunched(args)
    }

    deinit {
        _default = nil
        _IApplication2 = nil
        _IApplication3 = nil
        _IApplicationOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.applicationinitializationcallbackparams)
public final class ApplicationInitializationCallbackParams : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IApplicationInitializationCallbackParams
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bindingfailedeventargs)
public final class BindingFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IBindingFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBindingFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bindingfailedeventargs.message)
    public var message : String {
        get { try! _default.get_Message() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions)
public final class BringIntoViewOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IBringIntoViewOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.BringIntoViewOptions")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.animationdesired)
    public var animationDesired : Bool {
        get { try! _default.get_AnimationDesired() }
        set { try! _default.put_AnimationDesired(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Double {
        get { try! _default.get_HorizontalAlignmentRatio() }
        set { try! _default.put_HorizontalAlignmentRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
        set { try! _default.put_HorizontalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.targetrect)
    public var targetRect : WindowsFoundation.Rect? {
        get { try! _default.get_TargetRect() }
        set { try! _default.put_TargetRect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.verticalalignmentratio)
    public var verticalAlignmentRatio : Double {
        get { try! _default.get_VerticalAlignmentRatio() }
        set { try! _default.put_VerticalAlignmentRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
        set { try! _default.put_VerticalOffset(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs)
public final class BringIntoViewRequestedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IBringIntoViewRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.animationdesired)
    public var animationDesired : Bool {
        get { try! _default.get_AnimationDesired() }
        set { try! _default.put_AnimationDesired(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Double {
        get { try! _default.get_HorizontalAlignmentRatio() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
        set { try! _default.put_HorizontalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.targetelement)
    public var targetElement : UIElement! {
        get { try! _default.get_TargetElement() }
        set { try! _default.put_TargetElement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.targetrect)
    public var targetRect : WindowsFoundation.Rect {
        get { try! _default.get_TargetRect() }
        set { try! _default.put_TargetRect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.verticalalignmentratio)
    public var verticalAlignmentRatio : Double {
        get { try! _default.get_VerticalAlignmentRatio() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
        set { try! _default.put_VerticalOffset(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.brushtransition)
open class BrushTransition : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IBrushTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBrushTransitionFactory : __ABI_Microsoft_UI_Xaml.IBrushTransitionFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.BrushTransition")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.BrushTransitionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBrushTransitionFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.brushtransition.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_Duration() }
        set { try! _default.put_Duration(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datacontextchangedeventargs)
public final class DataContextChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDataContextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datacontextchangedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datacontextchangedeventargs.newvalue)
    public var newValue : Any! {
        get { try! _default.get_NewValue() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate)
open class DataTemplate : WinUI.FrameworkTemplate, IElementFactory {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDataTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDataTemplateFactory : __ABI_Microsoft_UI_Xaml.IDataTemplateFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.DataTemplate")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml.DataTemplateBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IDataTemplateFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IDataTemplateStatics: __ABI_Microsoft_UI_Xaml.IDataTemplateStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.DataTemplate")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.getextensioninstance)
    public class func getExtensionInstance(_ element: FrameworkElement!) throws -> AnyIDataTemplateExtension! {
        return try _IDataTemplateStatics.GetExtensionInstance(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.setextensioninstance)
    public class func setExtensionInstance(_ element: FrameworkElement!, _ value: AnyIDataTemplateExtension!) throws {
        try _IDataTemplateStatics.SetExtensionInstance(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.extensioninstanceproperty)
    public class var extensionInstanceProperty : DependencyProperty! {
        get { try! _IDataTemplateStatics.get_ExtensionInstanceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.loadcontent)
    public func loadContent() throws -> DependencyObject! {
        try _default.LoadContent()
    }

    private lazy var _IElementFactory: __ABI_Microsoft_UI_Xaml.IElementFactory! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.getelement)
    public func getElement(_ args: ElementFactoryGetArgs!) throws -> UIElement! {
        try _IElementFactory.GetElement(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.recycleelement)
    public func recycleElement(_ args: ElementFactoryRecycleArgs!) throws {
        try _IElementFactory.RecycleElement(args)
    }

    deinit {
        _default = nil
        _IElementFactory = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings)
public final class DebugSettings : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDebugSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDebugSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.enableframeratecounter)
    public var enableFrameRateCounter : Bool {
        get { try! _default.get_EnableFrameRateCounter() }
        set { try! _default.put_EnableFrameRateCounter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.failfastonerrors)
    public var failFastOnErrors : Bool {
        get { try! _default.get_FailFastOnErrors() }
        set { try! _default.put_FailFastOnErrors(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.isbindingtracingenabled)
    public var isBindingTracingEnabled : Bool {
        get { try! _default.get_IsBindingTracingEnabled() }
        set { try! _default.put_IsBindingTracingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.istextperformancevisualizationenabled)
    public var isTextPerformanceVisualizationEnabled : Bool {
        get { try! _default.get_IsTextPerformanceVisualizationEnabled() }
        set { try! _default.put_IsTextPerformanceVisualizationEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.bindingfailed)
    public lazy var bindingFailed : Event<BindingFailedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BindingFailed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BindingFailed($0)
       }
      )
    }()

    private lazy var _IDebugSettings2: __ABI_Microsoft_UI_Xaml.IDebugSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.isxamlresourcereferencetracingenabled)
    public var isXamlResourceReferenceTracingEnabled : Bool {
        get { try! _IDebugSettings2.get_IsXamlResourceReferenceTracingEnabled() }
        set { try! _IDebugSettings2.put_IsXamlResourceReferenceTracingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.xamlresourcereferencefailed)
    public lazy var xamlResourceReferenceFailed : Event<TypedEventHandler<DebugSettings?, XamlResourceReferenceFailedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IDebugSettings2 else { return .init() }
          return try! this.add_XamlResourceReferenceFailed($0)
        },
        remove: { [weak self] in
         try? self?._IDebugSettings2.remove_XamlResourceReferenceFailed($0)
       }
      )
    }()

    private lazy var _IDebugSettings3: __ABI_Microsoft_UI_Xaml.IDebugSettings3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.layoutcycledebugbreaklevel)
    public var layoutCycleDebugBreakLevel : LayoutCycleDebugBreakLevel {
        get { try! _IDebugSettings3.get_LayoutCycleDebugBreakLevel() }
        set { try! _IDebugSettings3.put_LayoutCycleDebugBreakLevel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.layoutcycletracinglevel)
    public var layoutCycleTracingLevel : LayoutCycleTracingLevel {
        get { try! _IDebugSettings3.get_LayoutCycleTracingLevel() }
        set { try! _IDebugSettings3.put_LayoutCycleTracingLevel(newValue) }
    }

    deinit {
        _default = nil
        _IDebugSettings2 = nil
        _IDebugSettings3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject)
open class DependencyObject : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDependencyObject
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDependencyObjectFactory : __ABI_Microsoft_UI_Xaml.IDependencyObjectFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.DependencyObject")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.DependencyObjectBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IDependencyObjectFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.getvalue)
    public func getValue(_ dp: DependencyProperty!) throws -> Any! {
        try _default.GetValue(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.setvalue)
    public func setValue(_ dp: DependencyProperty!, _ value: Any!) throws {
        try _default.SetValue(dp, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.clearvalue)
    public func clearValue(_ dp: DependencyProperty!) throws {
        try _default.ClearValue(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.readlocalvalue)
    public func readLocalValue(_ dp: DependencyProperty!) throws -> Any! {
        try _default.ReadLocalValue(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.getanimationbasevalue)
    public func getAnimationBaseValue(_ dp: DependencyProperty!) throws -> Any! {
        try _default.GetAnimationBaseValue(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.registerpropertychangedcallback)
    public func registerPropertyChangedCallback(_ dp: DependencyProperty!, _ callback: DependencyPropertyChangedCallback!) throws -> Int64 {
        try _default.RegisterPropertyChangedCallback(dp, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.unregisterpropertychangedcallback)
    public func unregisterPropertyChangedCallback(_ dp: DependencyProperty!, _ token: Int64) throws {
        try _default.UnregisterPropertyChangedCallback(dp, token)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.dispatcher)
    public var dispatcher : UWP.CoreDispatcher! {
        get { try! _default.get_Dispatcher() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueue() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty)
public final class DependencyProperty : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDependencyProperty
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyProperty
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IDependencyPropertyStatics: __ABI_Microsoft_UI_Xaml.IDependencyPropertyStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.DependencyProperty")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.register)
    public static func register(_ name: String, _ propertyType: WinUI.TypeName, _ ownerType: WinUI.TypeName, _ typeMetadata: PropertyMetadata!) throws -> DependencyProperty! {
        return try _IDependencyPropertyStatics.Register(name, propertyType, ownerType, typeMetadata)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.registerattached)
    public static func registerAttached(_ name: String, _ propertyType: WinUI.TypeName, _ ownerType: WinUI.TypeName, _ defaultMetadata: PropertyMetadata!) throws -> DependencyProperty! {
        return try _IDependencyPropertyStatics.RegisterAttached(name, propertyType, ownerType, defaultMetadata)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.unsetvalue)
    public static var unsetValue : Any! {
        get { try! _IDependencyPropertyStatics.get_UnsetValue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.getmetadata)
    public func getMetadata(_ forType: WinUI.TypeName) throws -> PropertyMetadata! {
        try _default.GetMetadata(forType)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs)
public final class DependencyPropertyChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDependencyPropertyChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs.newvalue)
    public var newValue : Any! {
        get { try! _default.get_NewValue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs.oldvalue)
    public var oldValue : Any! {
        get { try! _default.get_OldValue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs.property)
    public var property : DependencyProperty! {
        get { try! _default.get_Property() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs)
public final class DragEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDragEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.getdeferral)
    public func getDeferral() throws -> DragOperationDeferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.getposition)
    public func getPosition(_ relativeTo: UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPosition(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.acceptedoperation)
    public var acceptedOperation : UWP.DataPackageOperation {
        get { try! _default.get_AcceptedOperation() }
        set { try! _default.put_AcceptedOperation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.allowedoperations)
    public var allowedOperations : UWP.DataPackageOperation {
        get { try! _default.get_AllowedOperations() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_Data() }
        set { try! _default.put_Data(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.dataview)
    public var dataView : UWP.DataPackageView! {
        get { try! _default.get_DataView() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.draguioverride)
    public var dragUIOverride : DragUIOverride! {
        get { try! _default.get_DragUIOverride() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.modifiers)
    public var modifiers : UWP.DragDropModifiers {
        get { try! _default.get_Modifiers() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragoperationdeferral)
public final class DragOperationDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDragOperationDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragOperationDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragoperationdeferral.complete)
    public func complete() throws {
        try _default.Complete()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs)
public final class DragStartingEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDragStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.getdeferral)
    public func getDeferral() throws -> DragOperationDeferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.getposition)
    public func getPosition(_ relativeTo: UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPosition(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.allowedoperations)
    public var allowedOperations : UWP.DataPackageOperation {
        get { try! _default.get_AllowedOperations() }
        set { try! _default.put_AllowedOperations(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_Data() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.dragui)
    public var dragUI : DragUI! {
        get { try! _default.get_DragUI() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui)
public final class DragUI : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDragUI
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragUI
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfrombitmapimage)
    public func setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!) throws {
        try _default.SetContentFromBitmapImage(bitmapImage)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfrombitmapimage)
    public func setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromBitmapImageWithAnchorPoint(bitmapImage, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfromsoftwarebitmap)
    public func setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!) throws {
        try _default.SetContentFromSoftwareBitmap(softwareBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfromsoftwarebitmap)
    public func setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromSoftwareBitmapWithAnchorPoint(softwareBitmap, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfromdatapackage)
    public func setContentFromDataPackage() throws {
        try _default.SetContentFromDataPackage()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride)
public final class DragUIOverride : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDragUIOverride
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragUIOverride
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.clear)
    public func clear() throws {
        try _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfrombitmapimage)
    public func setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!) throws {
        try _default.SetContentFromBitmapImage(bitmapImage)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfrombitmapimage)
    public func setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromBitmapImageWithAnchorPoint(bitmapImage, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfromsoftwarebitmap)
    public func setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!) throws {
        try _default.SetContentFromSoftwareBitmap(softwareBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfromsoftwarebitmap)
    public func setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromSoftwareBitmapWithAnchorPoint(softwareBitmap, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.caption)
    public var caption : String {
        get { try! _default.get_Caption() }
        set { try! _default.put_Caption(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.iscaptionvisible)
    public var isCaptionVisible : Bool {
        get { try! _default.get_IsCaptionVisible() }
        set { try! _default.put_IsCaptionVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.iscontentvisible)
    public var isContentVisible : Bool {
        get { try! _default.get_IsContentVisible() }
        set { try! _default.put_IsContentVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.isglyphvisible)
    public var isGlyphVisible : Bool {
        get { try! _default.get_IsGlyphVisible() }
        set { try! _default.put_IsGlyphVisible(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dropcompletedeventargs)
public final class DropCompletedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDropCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dropcompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResult() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs)
public final class EffectiveViewportChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IEffectiveViewportChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.bringintoviewdistancex)
    public var bringIntoViewDistanceX : Double {
        get { try! _default.get_BringIntoViewDistanceX() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.bringintoviewdistancey)
    public var bringIntoViewDistanceY : Double {
        get { try! _default.get_BringIntoViewDistanceY() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.effectiveviewport)
    public var effectiveViewport : WindowsFoundation.Rect {
        get { try! _default.get_EffectiveViewport() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.maxviewport)
    public var maxViewport : WindowsFoundation.Rect {
        get { try! _default.get_MaxViewport() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactorygetargs)
open class ElementFactoryGetArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IElementFactoryGetArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IElementFactoryGetArgsFactory : __ABI_Microsoft_UI_Xaml.IElementFactoryGetArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.ElementFactoryGetArgs")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.ElementFactoryGetArgsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IElementFactoryGetArgsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactorygetargs.data)
    public var data : Any! {
        get { try! _default.get_Data() }
        set { try! _default.put_Data(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactorygetargs.parent)
    public var parent : UIElement! {
        get { try! _default.get_Parent() }
        set { try! _default.put_Parent(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactoryrecycleargs)
open class ElementFactoryRecycleArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IElementFactoryRecycleArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IElementFactoryRecycleArgsFactory : __ABI_Microsoft_UI_Xaml.IElementFactoryRecycleArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.ElementFactoryRecycleArgs")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.ElementFactoryRecycleArgsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IElementFactoryRecycleArgsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactoryrecycleargs.element)
    public var element : UIElement! {
        get { try! _default.get_Element() }
        set { try! _default.put_Element(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactoryrecycleargs.parent)
    public var parent : UIElement! {
        get { try! _default.get_Parent() }
        set { try! _default.put_Parent(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.exceptionroutedeventargs)
open class ExceptionRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IExceptionRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IExceptionRoutedEventArgsFactory : __ABI_Microsoft_UI_Xaml.IExceptionRoutedEventArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.ExceptionRoutedEventArgs")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.exceptionroutedeventargs.errormessage)
    public var errorMessage : String {
        get { try! _default.get_ErrorMessage() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement)
open class FrameworkElement : WinUI.UIElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IFrameworkElementFactory : __ABI_Microsoft_UI_Xaml.IFrameworkElementFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.FrameworkElement")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml.FrameworkElementBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFrameworkElementFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFrameworkElementStatics: __ABI_Microsoft_UI_Xaml.IFrameworkElementStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.FrameworkElement")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.defertree)
    public class func deferTree(_ element: DependencyObject!) throws {
        try _IFrameworkElementStatics.DeferTree(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualheightproperty)
    public class var actualHeightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_ActualHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualthemeproperty)
    public class var actualThemeProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_ActualThemeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualwidthproperty)
    public class var actualWidthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_ActualWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocusoninteractionproperty)
    public class var allowFocusOnInteractionProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_AllowFocusOnInteractionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocuswhendisabledproperty)
    public class var allowFocusWhenDisabledProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_AllowFocusWhenDisabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.datacontextproperty)
    public class var dataContextProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_DataContextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.flowdirectionproperty)
    public class var flowDirectionProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FlowDirectionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualmarginproperty)
    public class var focusVisualMarginProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualMarginProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarybrushproperty)
    public class var focusVisualPrimaryBrushProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualPrimaryBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarythicknessproperty)
    public class var focusVisualPrimaryThicknessProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualPrimaryThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarybrushproperty)
    public class var focusVisualSecondaryBrushProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualSecondaryBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarythicknessproperty)
    public class var focusVisualSecondaryThicknessProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualSecondaryThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.heightproperty)
    public class var heightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_HeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.horizontalalignmentproperty)
    public class var horizontalAlignmentProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_HorizontalAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.languageproperty)
    public class var languageProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_LanguageProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.marginproperty)
    public class var marginProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MarginProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxheightproperty)
    public class var maxHeightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MaxHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxwidthproperty)
    public class var maxWidthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MaxWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minheightproperty)
    public class var minHeightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MinHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minwidthproperty)
    public class var minWidthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MinWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.nameproperty)
    public class var nameProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_NameProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.requestedthemeproperty)
    public class var requestedThemeProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_RequestedThemeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.styleproperty)
    public class var styleProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_StyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.tagproperty)
    public class var tagProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_TagProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.verticalalignmentproperty)
    public class var verticalAlignmentProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_VerticalAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.widthproperty)
    public class var widthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_WidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.findname)
    public func findName(_ name: String) throws -> Any! {
        try _default.FindName(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.setbinding)
    public func setBinding(_ dp: DependencyProperty!, _ binding: WinUI.BindingBase!) throws {
        try _default.SetBinding(dp, binding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.getbindingexpression)
    public func getBindingExpression(_ dp: DependencyProperty!) throws -> WinUI.BindingExpression! {
        try _default.GetBindingExpression(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualheight)
    public var actualHeight : Double {
        get { try! _default.get_ActualHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualtheme)
    public var actualTheme : ElementTheme {
        get { try! _default.get_ActualTheme() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualwidth)
    public var actualWidth : Double {
        get { try! _default.get_ActualWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocusoninteraction)
    public var allowFocusOnInteraction : Bool {
        get { try! _default.get_AllowFocusOnInteraction() }
        set { try! _default.put_AllowFocusOnInteraction(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocuswhendisabled)
    public var allowFocusWhenDisabled : Bool {
        get { try! _default.get_AllowFocusWhenDisabled() }
        set { try! _default.put_AllowFocusWhenDisabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.baseuri)
    public var baseUri : WindowsFoundation.Uri! {
        get { try! _default.get_BaseUri() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.datacontext)
    public var dataContext : Any! {
        get { try! _default.get_DataContext() }
        set { try! _default.put_DataContext(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.flowdirection)
    public var flowDirection : FlowDirection {
        get { try! _default.get_FlowDirection() }
        set { try! _default.put_FlowDirection(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualmargin)
    public var focusVisualMargin : Thickness {
        get { try! _default.get_FocusVisualMargin() }
        set { try! _default.put_FocusVisualMargin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarybrush)
    public var focusVisualPrimaryBrush : WinUI.Brush! {
        get { try! _default.get_FocusVisualPrimaryBrush() }
        set { try! _default.put_FocusVisualPrimaryBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarythickness)
    public var focusVisualPrimaryThickness : Thickness {
        get { try! _default.get_FocusVisualPrimaryThickness() }
        set { try! _default.put_FocusVisualPrimaryThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarybrush)
    public var focusVisualSecondaryBrush : WinUI.Brush! {
        get { try! _default.get_FocusVisualSecondaryBrush() }
        set { try! _default.put_FocusVisualSecondaryBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarythickness)
    public var focusVisualSecondaryThickness : Thickness {
        get { try! _default.get_FocusVisualSecondaryThickness() }
        set { try! _default.put_FocusVisualSecondaryThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.height)
    public var height : Double {
        get { try! _default.get_Height() }
        set { try! _default.put_Height(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.horizontalalignment)
    public var horizontalAlignment : HorizontalAlignment {
        get { try! _default.get_HorizontalAlignment() }
        set { try! _default.put_HorizontalAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.isloaded)
    public var isLoaded : Bool {
        get { try! _default.get_IsLoaded() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.language)
    public var language : String {
        get { try! _default.get_Language() }
        set { try! _default.put_Language(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.margin)
    public var margin : Thickness {
        get { try! _default.get_Margin() }
        set { try! _default.put_Margin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxheight)
    public var maxHeight : Double {
        get { try! _default.get_MaxHeight() }
        set { try! _default.put_MaxHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxwidth)
    public var maxWidth : Double {
        get { try! _default.get_MaxWidth() }
        set { try! _default.put_MaxWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minheight)
    public var minHeight : Double {
        get { try! _default.get_MinHeight() }
        set { try! _default.put_MinHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minwidth)
    public var minWidth : Double {
        get { try! _default.get_MinWidth() }
        set { try! _default.put_MinWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.name)
    public var name : String {
        get { try! _default.get_Name() }
        set { try! _default.put_Name(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.parent)
    public var parent : DependencyObject! {
        get { try! _default.get_Parent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.requestedtheme)
    public var requestedTheme : ElementTheme {
        get { try! _default.get_RequestedTheme() }
        set { try! _default.put_RequestedTheme(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.resources)
    public var resources : ResourceDictionary! {
        get { try! _default.get_Resources() }
        set { try! _default.put_Resources(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.style)
    public var style : Style! {
        get { try! _default.get_Style() }
        set { try! _default.put_Style(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.tag)
    public var tag : Any! {
        get { try! _default.get_Tag() }
        set { try! _default.put_Tag(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.triggers)
    public var triggers : TriggerCollection! {
        get { try! _default.get_Triggers() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.verticalalignment)
    public var verticalAlignment : VerticalAlignment {
        get { try! _default.get_VerticalAlignment() }
        set { try! _default.put_VerticalAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.width)
    public var width : Double {
        get { try! _default.get_Width() }
        set { try! _default.put_Width(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualthemechanged)
    public lazy var actualThemeChanged : Event<TypedEventHandler<FrameworkElement?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ActualThemeChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ActualThemeChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.datacontextchanged)
    public lazy var dataContextChanged : Event<TypedEventHandler<FrameworkElement?, DataContextChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DataContextChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DataContextChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.effectiveviewportchanged)
    public lazy var effectiveViewportChanged : Event<TypedEventHandler<FrameworkElement?, EffectiveViewportChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EffectiveViewportChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EffectiveViewportChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.layoutupdated)
    public lazy var layoutUpdated : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LayoutUpdated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LayoutUpdated($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.loaded)
    public lazy var loaded : Event<RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Loaded($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Loaded($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.loading)
    public lazy var loading : Event<TypedEventHandler<FrameworkElement?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Loading($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Loading($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.sizechanged)
    public lazy var sizeChanged : Event<SizeChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SizeChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SizeChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.unloaded)
    public lazy var unloaded : Event<RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Unloaded($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Unloaded($0)
       }
      )
    }()

    private lazy var _IFrameworkElementProtected: __ABI_Microsoft_UI_Xaml.IFrameworkElementProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.invalidateviewport)
    public func invalidateViewport() throws {
        try _IFrameworkElementProtected.InvalidateViewport()
    }

    private lazy var _IFrameworkElementOverrides: __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.measureoverride)
    open func measureOverride(_ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IFrameworkElementOverrides.MeasureOverride(availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.arrangeoverride)
    open func arrangeOverride(_ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IFrameworkElementOverrides.ArrangeOverride(finalSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.onapplytemplate)
    open func onApplyTemplate() throws {
        try _IFrameworkElementOverrides.OnApplyTemplate()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.gotoelementstatecore)
    open func goToElementStateCore(_ stateName: String, _ useTransitions: Bool) throws -> Bool {
        try _IFrameworkElementOverrides.GoToElementStateCore(stateName, useTransitions)
    }

    deinit {
        _default = nil
        _IFrameworkElementProtected = nil
        _IFrameworkElementOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworktemplate)
open class FrameworkTemplate : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFrameworkTemplateFactory : __ABI_Microsoft_UI_Xaml.IFrameworkTemplateFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.FrameworkTemplate")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml.FrameworkTemplateBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFrameworkTemplateFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.launchactivatedeventargs)
public final class LaunchActivatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ILaunchActivatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.launchactivatedeventargs.arguments)
    public var arguments : String {
        get { try! _default.get_Arguments() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.launchactivatedeventargs.uwplaunchactivatedeventargs)
    public var uwpLaunchActivatedEventArgs : UWP.LaunchActivatedEventArgs! {
        get { try! _default.get_UWPLaunchActivatedEventArgs() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata)
open class PropertyMetadata : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IPropertyMetadata
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPropertyMetadataFactory : __ABI_Microsoft_UI_Xaml.IPropertyMetadataFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.PropertyMetadata")

    public init(_ defaultValue: Any!) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.PropertyMetadataBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IPropertyMetadataFactory.CreateInstanceWithDefaultValue(defaultValue, baseInterface, &innerInterface)
        }
    }

    public init(_ defaultValue: Any!, _ propertyChangedCallback: PropertyChangedCallback!) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.PropertyMetadataBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IPropertyMetadataFactory.CreateInstanceWithDefaultValueAndCallback(defaultValue, propertyChangedCallback, baseInterface, &innerInterface)
        }
    }

    private static let _IPropertyMetadataStatics: __ABI_Microsoft_UI_Xaml.IPropertyMetadataStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.PropertyMetadata")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class func create(_ defaultValue: Any!) throws -> PropertyMetadata! {
        return try _IPropertyMetadataStatics.CreateWithDefaultValue(defaultValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class func create(_ defaultValue: Any!, _ propertyChangedCallback: PropertyChangedCallback!) throws -> PropertyMetadata! {
        return try _IPropertyMetadataStatics.CreateWithDefaultValueAndCallback(defaultValue, propertyChangedCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class func create(_ createDefaultValueCallback: CreateDefaultValueCallback!) throws -> PropertyMetadata! {
        return try _IPropertyMetadataStatics.CreateWithFactory(createDefaultValueCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class func create(_ createDefaultValueCallback: CreateDefaultValueCallback!, _ propertyChangedCallback: PropertyChangedCallback!) throws -> PropertyMetadata! {
        return try _IPropertyMetadataStatics.CreateWithFactoryAndCallback(createDefaultValueCallback, propertyChangedCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.createdefaultvaluecallback)
    public var createDefaultValueCallback : CreateDefaultValueCallback! {
        get { try! _default.get_CreateDefaultValueCallback() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.defaultvalue)
    public var defaultValue : Any! {
        get { try! _default.get_DefaultValue() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertypath)
public final class PropertyPath : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IPropertyPath
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyPath
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IPropertyPathFactory: __ABI_Microsoft_UI_Xaml.IPropertyPathFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.PropertyPath")
    public init(_ path: String) {
        super.init(fromAbi: try! Self._IPropertyPathFactory.CreateInstance(path))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertypath.path)
    public var path : String {
        get { try! _default.get_Path() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary)
open class ResourceDictionary : WinUI.DependencyObject, IMap, IIterable {
    public typealias K = Any?
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IResourceDictionary
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IResourceDictionaryFactory : __ABI_Microsoft_UI_Xaml.IResourceDictionaryFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.ResourceDictionary")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml.ResourceDictionaryBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IResourceDictionaryFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.mergeddictionaries)
    public var mergedDictionaries : WindowsFoundation.AnyIVector<ResourceDictionary?>! {
        get { try! _default.get_MergedDictionaries() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.source)
    public var source : WindowsFoundation.Uri! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.themedictionaries)
    public var themeDictionaries : WindowsFoundation.AnyIMap<Any?, Any?>! {
        get { try! _default.get_ThemeDictionaries() }
    }

    private lazy var _IMap: IMapAny_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.lookup)
    public func lookup(_ key: Any?) -> Any? {
        try! _IMap.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.haskey)
    public func hasKey(_ key: Any?) -> Bool {
        try! _IMap.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<Any?, Any?>? {
        try! _IMap.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.insert)
    public func insert(_ key: Any?, _ value: Any?) -> Bool {
        try! _IMap.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.remove)
    public func remove(_ key: Any?) {
        try! _IMap.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.clear)
    public func clear() {
        try! _IMap.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.size)
    public var size : UInt32 {
        get { try! _IMap.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairAny_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IMap = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcemanagerrequestedeventargs)
public final class ResourceManagerRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IResourceManagerRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceManagerRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcemanagerrequestedeventargs.customresourcemanager)
    public var customResourceManager : WinAppSDK.AnyIResourceManager! {
        get { try! _default.get_CustomResourceManager() }
        set { try! _default.put_CustomResourceManager(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.routedevent)
public final class RoutedEvent : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IRoutedEvent
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEvent
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.routedeventargs)
open class RoutedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRoutedEventArgsFactory : __ABI_Microsoft_UI_Xaml.IRoutedEventArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.RoutedEventArgs")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.RoutedEventArgsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IRoutedEventArgsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.routedeventargs.originalsource)
    public var originalSource : Any! {
        get { try! _default.get_OriginalSource() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.scalartransition)
open class ScalarTransition : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IScalarTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScalarTransitionFactory : __ABI_Microsoft_UI_Xaml.IScalarTransitionFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.ScalarTransition")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.ScalarTransitionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScalarTransitionFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.scalartransition.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_Duration() }
        set { try! _default.put_Duration(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter)
public final class Setter : WinUI.SetterBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ISetter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Setter")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ISetterFactory: __ABI_Microsoft_UI_Xaml.ISetterFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Setter")
    public init(_ targetProperty: DependencyProperty!, _ value: Any!) {
        super.init(fromAbi: try! Self._ISetterFactory.CreateInstance(targetProperty, value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter.property)
    public var property : DependencyProperty! {
        get { try! _default.get_Property() }
        set { try! _default.put_Property(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter.target)
    public var target : TargetPropertyPath! {
        get { try! _default.get_Target() }
        set { try! _default.put_Target(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter.value)
    public var value : Any! {
        get { try! _default.get_Value() }
        set { try! _default.put_Value(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbase)
open class SetterBase : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ISetterBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISetterBaseFactory : __ABI_Microsoft_UI_Xaml.ISetterBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.SetterBase")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbase.issealed)
    public var isSealed : Bool {
        get { try! _default.get_IsSealed() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection)
public final class SetterBaseCollection : WinRTClass, IVector, IIterable {
    public typealias T = SetterBase?
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ISetterBaseCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBaseCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.SetterBaseCollection")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.issealed)
    public var isSealed : Bool {
        get { try! _default.get_IsSealed() }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    private lazy var _IVector: IVectorSetterBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.getat)
    public func getAt(_ index: UInt32) -> SetterBase? {
        try! _IVector.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<SetterBase?>? {
        try! _IVector.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.indexof)
    public func indexOf(_ value: SetterBase?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.setat)
    public func setAt(_ index: UInt32, _ value: SetterBase?) {
        try! _IVector.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: SetterBase?) {
        try! _IVector.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.append)
    public func append(_ value: SetterBase?) {
        try! _IVector.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.clear)
    public func clear() {
        try! _IVector.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [SetterBase?]) -> UInt32 {
        try! _IVector.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.replaceall)
    public func replaceAll(_ items: [SetterBase?]) {
        try! _IVector.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_Size() }
    }

    private lazy var _IIterable: IIterableSetterBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<SetterBase?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.sizechangedeventargs)
public final class SizeChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ISizeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.sizechangedeventargs.newsize)
    public var newSize : WindowsFoundation.Size {
        get { try! _default.get_NewSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.sizechangedeventargs.previoussize)
    public var previousSize : WindowsFoundation.Size {
        get { try! _default.get_PreviousSize() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style)
public final class Style : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IStyle
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIStyle
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Style")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IStyleFactory: __ABI_Microsoft_UI_Xaml.IStyleFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Style")
    public init(_ targetType: WinUI.TypeName) {
        super.init(fromAbi: try! Self._IStyleFactory.CreateInstance(targetType))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.seal)
    public func seal() throws {
        try _default.Seal()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.basedon)
    public var basedOn : Style! {
        get { try! _default.get_BasedOn() }
        set { try! _default.put_BasedOn(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.issealed)
    public var isSealed : Bool {
        get { try! _default.get_IsSealed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.setters)
    public var setters : SetterBaseCollection! {
        get { try! _default.get_Setters() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.targettype)
    public var targetType : WinUI.TypeName {
        get { try! _default.get_TargetType() }
        set { try! _default.put_TargetType(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.targetpropertypath)
public final class TargetPropertyPath : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ITargetPropertyPath
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITargetPropertyPath
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.TargetPropertyPath")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ITargetPropertyPathFactory: __ABI_Microsoft_UI_Xaml.ITargetPropertyPathFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.TargetPropertyPath")
    public init(_ targetProperty: DependencyProperty!) {
        super.init(try! Self._ITargetPropertyPathFactory.CreateInstance(targetProperty))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.targetpropertypath.path)
    public var path : PropertyPath! {
        get { try! _default.get_Path() }
        set { try! _default.put_Path(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.targetpropertypath.target)
    public var target : Any! {
        get { try! _default.get_Target() }
        set { try! _default.put_Target(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggeraction)
open class TriggerAction : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ITriggerAction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITriggerActionFactory : __ABI_Microsoft_UI_Xaml.ITriggerActionFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.TriggerAction")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggerbase)
open class TriggerBase : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ITriggerBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITriggerBaseFactory : __ABI_Microsoft_UI_Xaml.ITriggerBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.TriggerBase")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection)
public final class TriggerCollection : WinRTClass, IVector, IIterable {
    public typealias T = TriggerBase?
    private typealias SwiftABI = WinUI.IVectorTriggerBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CTriggerBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.getat)
    public func getAt(_ index: UInt32) -> TriggerBase? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<TriggerBase?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.indexof)
    public func indexOf(_ value: TriggerBase?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.setat)
    public func setAt(_ index: UInt32, _ value: TriggerBase?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.insertat)
    public func insertAt(_ index: UInt32, _ value: TriggerBase?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.append)
    public func append(_ value: TriggerBase?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [TriggerBase?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.replaceall)
    public func replaceAll(_ items: [TriggerBase?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableTriggerBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<TriggerBase?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement)
open class UIElement : WinUI.DependencyObject, WinAppSDK.IAnimationObject, WinAppSDK.IVisualElement, WinAppSDK.IVisualElement2 {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IUIElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IUIElementFactory : __ABI_Microsoft_UI_Xaml.IUIElementFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.UIElement")

    private static let _IUIElementStatics: __ABI_Microsoft_UI_Xaml.IUIElementStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.UIElement")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.trystartdirectmanipulation)
    public class func tryStartDirectManipulation(_ value: WinUI.Pointer!) throws -> Bool {
        return try _IUIElementStatics.TryStartDirectManipulation(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.registerasscrollport)
    public class func registerAsScrollPort(_ element: UIElement!) throws {
        try _IUIElementStatics.RegisterAsScrollPort(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyproperty)
    public class var accessKeyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_AccessKeyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyscopeownerproperty)
    public class var accessKeyScopeOwnerProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_AccessKeyScopeOwnerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.allowdropproperty)
    public class var allowDropProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_AllowDropProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.bringintoviewrequestedevent)
    public class var bringIntoViewRequestedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_BringIntoViewRequestedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.cachemodeproperty)
    public class var cacheModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CacheModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.canbescrollanchorproperty)
    public class var canBeScrollAnchorProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CanBeScrollAnchorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.candragproperty)
    public class var canDragProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CanDragProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.characterreceivedevent)
    public class var characterReceivedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_CharacterReceivedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.clipproperty)
    public class var clipProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ClipProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.compositemodeproperty)
    public class var compositeModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CompositeModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextflyoutproperty)
    public class var contextFlyoutProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ContextFlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextrequestedevent)
    public class var contextRequestedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ContextRequestedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.doubletappedevent)
    public class var doubleTappedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DoubleTappedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragenterevent)
    public class var dragEnterEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DragEnterEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragleaveevent)
    public class var dragLeaveEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DragLeaveEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragoverevent)
    public class var dragOverEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DragOverEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dropevent)
    public class var dropEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DropEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.exitdisplaymodeonaccesskeyinvokedproperty)
    public class var exitDisplayModeOnAccessKeyInvokedProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ExitDisplayModeOnAccessKeyInvokedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.focusstateproperty)
    public class var focusStateProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_FocusStateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.gettingfocusevent)
    public class var gettingFocusEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_GettingFocusEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.highcontrastadjustmentproperty)
    public class var highContrastAdjustmentProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_HighContrastAdjustmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.holdingevent)
    public class var holdingEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_HoldingEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isaccesskeyscopeproperty)
    public class var isAccessKeyScopeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsAccessKeyScopeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isdoubletapenabledproperty)
    public class var isDoubleTapEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsDoubleTapEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.ishittestvisibleproperty)
    public class var isHitTestVisibleProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsHitTestVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isholdingenabledproperty)
    public class var isHoldingEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsHoldingEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isrighttapenabledproperty)
    public class var isRightTapEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsRightTapEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istabstopproperty)
    public class var isTabStopProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsTabStopProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istapenabledproperty)
    public class var isTapEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsTapEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keydownevent)
    public class var keyDownEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_KeyDownEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiphorizontaloffsetproperty)
    public class var keyTipHorizontalOffsetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipHorizontalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipplacementmodeproperty)
    public class var keyTipPlacementModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipPlacementModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiptargetproperty)
    public class var keyTipTargetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipTargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipverticaloffsetproperty)
    public class var keyTipVerticalOffsetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipVerticalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyupevent)
    public class var keyUpEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_KeyUpEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementmodeproperty)
    public class var keyboardAcceleratorPlacementModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyboardAcceleratorPlacementModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementtargetproperty)
    public class var keyboardAcceleratorPlacementTargetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyboardAcceleratorPlacementTargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.lightsproperty)
    public class var lightsProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_LightsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.losingfocusevent)
    public class var losingFocusEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_LosingFocusEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationcompletedevent)
    public class var manipulationCompletedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationCompletedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationdeltaevent)
    public class var manipulationDeltaEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationDeltaEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationinertiastartingevent)
    public class var manipulationInertiaStartingEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationInertiaStartingEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationmodeproperty)
    public class var manipulationModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ManipulationModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstartedevent)
    public class var manipulationStartedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationStartedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstartingevent)
    public class var manipulationStartingEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationStartingEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.nofocuscandidatefoundevent)
    public class var noFocusCandidateFoundEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_NoFocusCandidateFoundEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.opacityproperty)
    public class var opacityProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_OpacityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercanceledevent)
    public class var pointerCanceledEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerCanceledEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercapturelostevent)
    public class var pointerCaptureLostEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerCaptureLostEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercapturesproperty)
    public class var pointerCapturesProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_PointerCapturesProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerenteredevent)
    public class var pointerEnteredEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerEnteredEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerexitedevent)
    public class var pointerExitedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerExitedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointermovedevent)
    public class var pointerMovedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerMovedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerpressedevent)
    public class var pointerPressedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerPressedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerreleasedevent)
    public class var pointerReleasedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerReleasedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerwheelchangedevent)
    public class var pointerWheelChangedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerWheelChangedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeydownevent)
    public class var previewKeyDownEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PreviewKeyDownEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeyupevent)
    public class var previewKeyUpEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PreviewKeyUpEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.projectionproperty)
    public class var projectionProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ProjectionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransformoriginproperty)
    public class var renderTransformOriginProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_RenderTransformOriginProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransformproperty)
    public class var renderTransformProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_RenderTransformProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.righttappedevent)
    public class var rightTappedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_RightTappedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.shadowproperty)
    public class var shadowProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ShadowProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabfocusnavigationproperty)
    public class var tabFocusNavigationProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_TabFocusNavigationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabindexproperty)
    public class var tabIndexProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_TabIndexProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tappedevent)
    public class var tappedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_TappedEvent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transform3dproperty)
    public class var transform3DProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_Transform3DProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transitionsproperty)
    public class var transitionsProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_TransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.uselayoutroundingproperty)
    public class var useLayoutRoundingProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_UseLayoutRoundingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.usesystemfocusvisualsproperty)
    public class var useSystemFocusVisualsProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_UseSystemFocusVisualsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.visibilityproperty)
    public class var visibilityProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_VisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdownnavigationstrategyproperty)
    public class var xyFocusDownNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusDownNavigationStrategyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdownproperty)
    public class var xyFocusDownProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusDownProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocuskeyboardnavigationproperty)
    public class var xyFocusKeyboardNavigationProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusKeyboardNavigationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleftnavigationstrategyproperty)
    public class var xyFocusLeftNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusLeftNavigationStrategyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleftproperty)
    public class var xyFocusLeftProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusLeftProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusrightnavigationstrategyproperty)
    public class var xyFocusRightNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusRightNavigationStrategyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusrightproperty)
    public class var xyFocusRightProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusRightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusupnavigationstrategyproperty)
    public class var xyFocusUpNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusUpNavigationStrategyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusupproperty)
    public class var xyFocusUpProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusUpProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.measure)
    public func measure(_ availableSize: WindowsFoundation.Size) throws {
        try _default.Measure(availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.arrange)
    public func arrange(_ finalRect: WindowsFoundation.Rect) throws {
        try _default.Arrange(finalRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.capturepointer)
    public func capturePointer(_ value: WinUI.Pointer!) throws -> Bool {
        try _default.CapturePointer(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.releasepointercapture)
    public func releasePointerCapture(_ value: WinUI.Pointer!) throws {
        try _default.ReleasePointerCapture(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.releasepointercaptures)
    public func releasePointerCaptures() throws {
        try _default.ReleasePointerCaptures()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.addhandler)
    public func addHandler(_ routedEvent: RoutedEvent!, _ handler: Any!, _ handledEventsToo: Bool) throws {
        try _default.AddHandler(routedEvent, handler, handledEventsToo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.removehandler)
    public func removeHandler(_ routedEvent: RoutedEvent!, _ handler: Any!) throws {
        try _default.RemoveHandler(routedEvent, handler)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transformtovisual)
    public func transformToVisual(_ visual: UIElement!) throws -> WinUI.GeneralTransform! {
        try _default.TransformToVisual(visual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.invalidatemeasure)
    public func invalidateMeasure() throws {
        try _default.InvalidateMeasure()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.invalidatearrange)
    public func invalidateArrange() throws {
        try _default.InvalidateArrange()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.updatelayout)
    public func updateLayout() throws {
        try _default.UpdateLayout()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.canceldirectmanipulations)
    public func cancelDirectManipulations() throws -> Bool {
        try _default.CancelDirectManipulations()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startdragasync)
    public func startDragAsync(_ pointerPoint: WinAppSDK.PointerPoint!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DataPackageOperation>! {
        try _default.StartDragAsync(pointerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startbringintoview)
    public func startBringIntoView() throws {
        try _default.StartBringIntoView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startbringintoview)
    public func startBringIntoView(_ options: BringIntoViewOptions!) throws {
        try _default.StartBringIntoViewWithOptions(options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tryinvokekeyboardaccelerator)
    public func tryInvokeKeyboardAccelerator(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs!) throws {
        try _default.TryInvokeKeyboardAccelerator(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.focus)
    public func focus(_ value: FocusState) throws -> Bool {
        try _default.Focus(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startanimation)
    public func startAnimation(_ animation: WinAppSDK.AnyICompositionAnimationBase!) throws {
        try _default.StartAnimation(animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.stopanimation)
    public func stopAnimation(_ animation: WinAppSDK.AnyICompositionAnimationBase!) throws {
        try _default.StopAnimation(animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskey)
    public var accessKey : String {
        get { try! _default.get_AccessKey() }
        set { try! _default.put_AccessKey(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyscopeowner)
    public var accessKeyScopeOwner : DependencyObject! {
        get { try! _default.get_AccessKeyScopeOwner() }
        set { try! _default.put_AccessKeyScopeOwner(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.actualoffset)
    public var actualOffset : WindowsFoundation.Vector3 {
        get { try! _default.get_ActualOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.actualsize)
    public var actualSize : WindowsFoundation.Vector2 {
        get { try! _default.get_ActualSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.allowdrop)
    public var allowDrop : Bool {
        get { try! _default.get_AllowDrop() }
        set { try! _default.put_AllowDrop(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.cachemode)
    public var cacheMode : WinUI.CacheMode! {
        get { try! _default.get_CacheMode() }
        set { try! _default.put_CacheMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.canbescrollanchor)
    public var canBeScrollAnchor : Bool {
        get { try! _default.get_CanBeScrollAnchor() }
        set { try! _default.put_CanBeScrollAnchor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.candrag)
    public var canDrag : Bool {
        get { try! _default.get_CanDrag() }
        set { try! _default.put_CanDrag(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.centerpoint)
    public var centerPoint : WindowsFoundation.Vector3 {
        get { try! _default.get_CenterPoint() }
        set { try! _default.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.clip)
    public var clip : WinUI.RectangleGeometry! {
        get { try! _default.get_Clip() }
        set { try! _default.put_Clip(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.compositemode)
    public var compositeMode : WinUI.ElementCompositeMode {
        get { try! _default.get_CompositeMode() }
        set { try! _default.put_CompositeMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextflyout)
    public var contextFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_ContextFlyout() }
        set { try! _default.put_ContextFlyout(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.desiredsize)
    public var desiredSize : WindowsFoundation.Size {
        get { try! _default.get_DesiredSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.exitdisplaymodeonaccesskeyinvoked)
    public var exitDisplayModeOnAccessKeyInvoked : Bool {
        get { try! _default.get_ExitDisplayModeOnAccessKeyInvoked() }
        set { try! _default.put_ExitDisplayModeOnAccessKeyInvoked(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.focusstate)
    public var focusState : FocusState {
        get { try! _default.get_FocusState() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.highcontrastadjustment)
    public var highContrastAdjustment : ElementHighContrastAdjustment {
        get { try! _default.get_HighContrastAdjustment() }
        set { try! _default.put_HighContrastAdjustment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isaccesskeyscope)
    public var isAccessKeyScope : Bool {
        get { try! _default.get_IsAccessKeyScope() }
        set { try! _default.put_IsAccessKeyScope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isdoubletapenabled)
    public var isDoubleTapEnabled : Bool {
        get { try! _default.get_IsDoubleTapEnabled() }
        set { try! _default.put_IsDoubleTapEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.ishittestvisible)
    public var isHitTestVisible : Bool {
        get { try! _default.get_IsHitTestVisible() }
        set { try! _default.put_IsHitTestVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isholdingenabled)
    public var isHoldingEnabled : Bool {
        get { try! _default.get_IsHoldingEnabled() }
        set { try! _default.put_IsHoldingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isrighttapenabled)
    public var isRightTapEnabled : Bool {
        get { try! _default.get_IsRightTapEnabled() }
        set { try! _default.put_IsRightTapEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istabstop)
    public var isTabStop : Bool {
        get { try! _default.get_IsTabStop() }
        set { try! _default.put_IsTabStop(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istapenabled)
    public var isTapEnabled : Bool {
        get { try! _default.get_IsTapEnabled() }
        set { try! _default.put_IsTapEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiphorizontaloffset)
    public var keyTipHorizontalOffset : Double {
        get { try! _default.get_KeyTipHorizontalOffset() }
        set { try! _default.put_KeyTipHorizontalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipplacementmode)
    public var keyTipPlacementMode : WinUI.KeyTipPlacementMode {
        get { try! _default.get_KeyTipPlacementMode() }
        set { try! _default.put_KeyTipPlacementMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiptarget)
    public var keyTipTarget : DependencyObject! {
        get { try! _default.get_KeyTipTarget() }
        set { try! _default.put_KeyTipTarget(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipverticaloffset)
    public var keyTipVerticalOffset : Double {
        get { try! _default.get_KeyTipVerticalOffset() }
        set { try! _default.put_KeyTipVerticalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementmode)
    public var keyboardAcceleratorPlacementMode : WinUI.KeyboardAcceleratorPlacementMode {
        get { try! _default.get_KeyboardAcceleratorPlacementMode() }
        set { try! _default.put_KeyboardAcceleratorPlacementMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementtarget)
    public var keyboardAcceleratorPlacementTarget : DependencyObject! {
        get { try! _default.get_KeyboardAcceleratorPlacementTarget() }
        set { try! _default.put_KeyboardAcceleratorPlacementTarget(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardaccelerators)
    public var keyboardAccelerators : WindowsFoundation.AnyIVector<WinUI.KeyboardAccelerator?>! {
        get { try! _default.get_KeyboardAccelerators() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.lights)
    public var lights : WindowsFoundation.AnyIVector<WinUI.XamlLight?>! {
        get { try! _default.get_Lights() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationmode)
    public var manipulationMode : WinUI.ManipulationModes {
        get { try! _default.get_ManipulationMode() }
        set { try! _default.put_ManipulationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.opacity)
    public var opacity : Double {
        get { try! _default.get_Opacity() }
        set { try! _default.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.opacitytransition)
    public var opacityTransition : ScalarTransition! {
        get { try! _default.get_OpacityTransition() }
        set { try! _default.put_OpacityTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercaptures)
    public var pointerCaptures : WindowsFoundation.AnyIVectorView<WinUI.Pointer?>! {
        get { try! _default.get_PointerCaptures() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.projection)
    public var projection : WinUI.Projection! {
        get { try! _default.get_Projection() }
        set { try! _default.put_Projection(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rasterizationscale)
    public var rasterizationScale : Double {
        get { try! _default.get_RasterizationScale() }
        set { try! _default.put_RasterizationScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendersize)
    public var renderSize : WindowsFoundation.Size {
        get { try! _default.get_RenderSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransform)
    public var renderTransform : WinUI.Transform! {
        get { try! _default.get_RenderTransform() }
        set { try! _default.put_RenderTransform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransformorigin)
    public var renderTransformOrigin : WindowsFoundation.Point {
        get { try! _default.get_RenderTransformOrigin() }
        set { try! _default.put_RenderTransformOrigin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rotation)
    public var rotation : Float {
        get { try! _default.get_Rotation() }
        set { try! _default.put_Rotation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rotationaxis)
    public var rotationAxis : WindowsFoundation.Vector3 {
        get { try! _default.get_RotationAxis() }
        set { try! _default.put_RotationAxis(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rotationtransition)
    public var rotationTransition : ScalarTransition! {
        get { try! _default.get_RotationTransition() }
        set { try! _default.put_RotationTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.scale)
    public var scale : WindowsFoundation.Vector3 {
        get { try! _default.get_Scale() }
        set { try! _default.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.scaletransition)
    public var scaleTransition : Vector3Transition! {
        get { try! _default.get_ScaleTransition() }
        set { try! _default.put_ScaleTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.shadow)
    public var shadow : WinUI.Shadow! {
        get { try! _default.get_Shadow() }
        set { try! _default.put_Shadow(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabfocusnavigation)
    public var tabFocusNavigation : WinUI.KeyboardNavigationMode {
        get { try! _default.get_TabFocusNavigation() }
        set { try! _default.put_TabFocusNavigation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabindex)
    public var tabIndex : Int32 {
        get { try! _default.get_TabIndex() }
        set { try! _default.put_TabIndex(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transform3d)
    public var transform3D : WinUI.Transform3D! {
        get { try! _default.get_Transform3D() }
        set { try! _default.put_Transform3D(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transitions)
    public var transitions : WinUI.TransitionCollection! {
        get { try! _default.get_Transitions() }
        set { try! _default.put_Transitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.translation)
    public var translation : WindowsFoundation.Vector3 {
        get { try! _default.get_Translation() }
        set { try! _default.put_Translation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.translationtransition)
    public var translationTransition : Vector3Transition! {
        get { try! _default.get_TranslationTransition() }
        set { try! _default.put_TranslationTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.uselayoutrounding)
    public var useLayoutRounding : Bool {
        get { try! _default.get_UseLayoutRounding() }
        set { try! _default.put_UseLayoutRounding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.usesystemfocusvisuals)
    public var useSystemFocusVisuals : Bool {
        get { try! _default.get_UseSystemFocusVisuals() }
        set { try! _default.put_UseSystemFocusVisuals(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.visibility)
    public var visibility : Visibility {
        get { try! _default.get_Visibility() }
        set { try! _default.put_Visibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdown)
    public var xyFocusDown : DependencyObject! {
        get { try! _default.get_XYFocusDown() }
        set { try! _default.put_XYFocusDown(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdownnavigationstrategy)
    public var xyFocusDownNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusDownNavigationStrategy() }
        set { try! _default.put_XYFocusDownNavigationStrategy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocuskeyboardnavigation)
    public var xyFocusKeyboardNavigation : WinUI.XYFocusKeyboardNavigationMode {
        get { try! _default.get_XYFocusKeyboardNavigation() }
        set { try! _default.put_XYFocusKeyboardNavigation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleft)
    public var xyFocusLeft : DependencyObject! {
        get { try! _default.get_XYFocusLeft() }
        set { try! _default.put_XYFocusLeft(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleftnavigationstrategy)
    public var xyFocusLeftNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusLeftNavigationStrategy() }
        set { try! _default.put_XYFocusLeftNavigationStrategy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusright)
    public var xyFocusRight : DependencyObject! {
        get { try! _default.get_XYFocusRight() }
        set { try! _default.put_XYFocusRight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusrightnavigationstrategy)
    public var xyFocusRightNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusRightNavigationStrategy() }
        set { try! _default.put_XYFocusRightNavigationStrategy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusup)
    public var xyFocusUp : DependencyObject! {
        get { try! _default.get_XYFocusUp() }
        set { try! _default.put_XYFocusUp(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusupnavigationstrategy)
    public var xyFocusUpNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusUpNavigationStrategy() }
        set { try! _default.put_XYFocusUpNavigationStrategy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xamlroot)
    public var xamlRoot : XamlRoot! {
        get { try! _default.get_XamlRoot() }
        set { try! _default.put_XamlRoot(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeydisplaydismissed)
    public lazy var accessKeyDisplayDismissed : Event<TypedEventHandler<UIElement?, AccessKeyDisplayDismissedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AccessKeyDisplayDismissed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AccessKeyDisplayDismissed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeydisplayrequested)
    public lazy var accessKeyDisplayRequested : Event<TypedEventHandler<UIElement?, AccessKeyDisplayRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AccessKeyDisplayRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AccessKeyDisplayRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyinvoked)
    public lazy var accessKeyInvoked : Event<TypedEventHandler<UIElement?, AccessKeyInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AccessKeyInvoked($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AccessKeyInvoked($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.bringintoviewrequested)
    public lazy var bringIntoViewRequested : Event<TypedEventHandler<UIElement?, BringIntoViewRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BringIntoViewRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BringIntoViewRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.characterreceived)
    public lazy var characterReceived : Event<TypedEventHandler<UIElement?, CharacterReceivedRoutedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CharacterReceived($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CharacterReceived($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextcanceled)
    public lazy var contextCanceled : Event<TypedEventHandler<UIElement?, RoutedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextCanceled($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextCanceled($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextrequested)
    public lazy var contextRequested : Event<TypedEventHandler<UIElement?, ContextRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.doubletapped)
    public lazy var doubleTapped : Event<WinUI.DoubleTappedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DoubleTapped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DoubleTapped($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragenter)
    public lazy var dragEnter : Event<DragEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragEnter($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragEnter($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragleave)
    public lazy var dragLeave : Event<DragEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragLeave($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragLeave($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragover)
    public lazy var dragOver : Event<DragEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragOver($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragOver($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragstarting)
    public lazy var dragStarting : Event<TypedEventHandler<UIElement?, DragStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.drop)
    public lazy var drop : Event<DragEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Drop($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Drop($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dropcompleted)
    public lazy var dropCompleted : Event<TypedEventHandler<UIElement?, DropCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DropCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DropCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.gettingfocus)
    public lazy var gettingFocus : Event<TypedEventHandler<UIElement?, GettingFocusEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GettingFocus($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GettingFocus($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.gotfocus)
    public lazy var gotFocus : Event<RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GotFocus($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GotFocus($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.holding)
    public lazy var holding : Event<WinUI.HoldingEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Holding($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Holding($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keydown)
    public lazy var keyDown : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_KeyDown($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_KeyDown($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyup)
    public lazy var keyUp : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_KeyUp($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_KeyUp($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.losingfocus)
    public lazy var losingFocus : Event<TypedEventHandler<UIElement?, LosingFocusEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LosingFocus($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LosingFocus($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.lostfocus)
    public lazy var lostFocus : Event<RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LostFocus($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LostFocus($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationcompleted)
    public lazy var manipulationCompleted : Event<WinUI.ManipulationCompletedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationdelta)
    public lazy var manipulationDelta : Event<WinUI.ManipulationDeltaEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationDelta($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationDelta($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationinertiastarting)
    public lazy var manipulationInertiaStarting : Event<WinUI.ManipulationInertiaStartingEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationInertiaStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationInertiaStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstarted)
    public lazy var manipulationStarted : Event<WinUI.ManipulationStartedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationStarted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationStarted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstarting)
    public lazy var manipulationStarting : Event<WinUI.ManipulationStartingEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.nofocuscandidatefound)
    public lazy var noFocusCandidateFound : Event<TypedEventHandler<UIElement?, NoFocusCandidateFoundEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NoFocusCandidateFound($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NoFocusCandidateFound($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercanceled)
    public lazy var pointerCanceled : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerCanceled($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerCanceled($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercapturelost)
    public lazy var pointerCaptureLost : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerCaptureLost($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerCaptureLost($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerentered)
    public lazy var pointerEntered : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerEntered($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerEntered($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerexited)
    public lazy var pointerExited : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerExited($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerExited($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointermoved)
    public lazy var pointerMoved : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerMoved($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerMoved($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerpressed)
    public lazy var pointerPressed : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerPressed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerPressed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerreleased)
    public lazy var pointerReleased : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerReleased($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerReleased($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerwheelchanged)
    public lazy var pointerWheelChanged : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerWheelChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerWheelChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeydown)
    public lazy var previewKeyDown : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PreviewKeyDown($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PreviewKeyDown($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeyup)
    public lazy var previewKeyUp : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PreviewKeyUp($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PreviewKeyUp($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.processkeyboardaccelerators)
    public lazy var processKeyboardAccelerators : Event<TypedEventHandler<UIElement?, ProcessKeyboardAcceleratorEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ProcessKeyboardAccelerators($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ProcessKeyboardAccelerators($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.righttapped)
    public lazy var rightTapped : Event<WinUI.RightTappedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RightTapped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RightTapped($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tapped)
    public lazy var tapped : Event<WinUI.TappedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Tapped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Tapped($0)
       }
      )
    }()

    private lazy var _IUIElementProtected: __ABI_Microsoft_UI_Xaml.IUIElementProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.protectedcursor)
    public var protectedCursor : WinAppSDK.InputCursor! {
        get { try! _IUIElementProtected.get_ProtectedCursor() }
        set { try! _IUIElementProtected.put_ProtectedCursor(newValue) }
    }

    private lazy var _IUIElementOverrides: __ABI_Microsoft_UI_Xaml.IUIElementOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.oncreateautomationpeer)
    open func onCreateAutomationPeer() throws -> WinUI.AutomationPeer! {
        try _IUIElementOverrides.OnCreateAutomationPeer()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.ondisconnectvisualchildren)
    open func onDisconnectVisualChildren() throws {
        try _IUIElementOverrides.OnDisconnectVisualChildren()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.findsubelementsfortouchtargeting)
    open func findSubElementsForTouchTargeting(_ point: WindowsFoundation.Point, _ boundingRect: WindowsFoundation.Rect) throws -> WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIIterable<WindowsFoundation.Point>?>! {
        try _IUIElementOverrides.FindSubElementsForTouchTargeting(point, boundingRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.getchildrenintabfocusorder)
    open func getChildrenInTabFocusOrder() throws -> WindowsFoundation.AnyIIterable<DependencyObject?>! {
        try _IUIElementOverrides.GetChildrenInTabFocusOrder()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.onkeyboardacceleratorinvoked)
    open func onKeyboardAcceleratorInvoked(_ args: WinUI.KeyboardAcceleratorInvokedEventArgs!) throws {
        try _IUIElementOverrides.OnKeyboardAcceleratorInvoked(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.onprocesskeyboardaccelerators)
    open func onProcessKeyboardAccelerators(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs!) throws {
        try _IUIElementOverrides.OnProcessKeyboardAccelerators(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.onbringintoviewrequested)
    open func onBringIntoViewRequested(_ e: BringIntoViewRequestedEventArgs!) throws {
        try _IUIElementOverrides.OnBringIntoViewRequested(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.populatepropertyinfooverride)
    open func populatePropertyInfoOverride(_ propertyName: String, _ animationPropertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IUIElementOverrides.PopulatePropertyInfoOverride(propertyName, animationPropertyInfo)
    }

    private lazy var _IAnimationObject: __ABI_Microsoft_UI_Composition.IAnimationObject! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.populatepropertyinfo)
    public func populatePropertyInfo(_ propertyName: String, _ propertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IAnimationObject.PopulatePropertyInfo(propertyName, propertyInfo)
    }

    private lazy var _IVisualElement: __ABI_Microsoft_UI_Composition.IVisualElement! = getInterfaceForCaching()
    private lazy var _IVisualElement2: __ABI_Microsoft_UI_Composition.IVisualElement2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.getvisualinternal)
    public func getVisualInternal() throws -> WinAppSDK.Visual! {
        try _IVisualElement2.GetVisualInternal()
    }

    deinit {
        _default = nil
        _IUIElementProtected = nil
        _IUIElementOverrides = nil
        _IAnimationObject = nil
        _IVisualElement = nil
        _IVisualElement2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection)
open class UIElementWeakCollection : WinRTClass, IVector, IIterable {
    public typealias T = UIElement?
    private typealias SwiftABI = WinUI.IVectorUIElement
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUIElementWeakCollectionFactory : __ABI_Microsoft_UI_Xaml.IUIElementWeakCollectionFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.UIElementWeakCollection")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.UIElementWeakCollectionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IUIElementWeakCollectionFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.getat)
    public func getAt(_ index: UInt32) -> UIElement? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<UIElement?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.indexof)
    public func indexOf(_ value: UIElement?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.setat)
    public func setAt(_ index: UInt32, _ value: UIElement?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: UIElement?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.append)
    public func append(_ value: UIElement?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [UIElement?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.replaceall)
    public func replaceAll(_ items: [UIElement?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableUIElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<UIElement?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs)
public final class UnhandledExceptionEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IUnhandledExceptionEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs.exception)
    public var exception : HRESULT {
        get { try! _default.get_Exception() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs.message)
    public var message : String {
        get { try! _default.get_Message() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transition)
open class Vector3Transition : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IVector3Transition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVector3TransitionFactory : __ABI_Microsoft_UI_Xaml.IVector3TransitionFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Vector3Transition")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.Vector3TransitionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IVector3TransitionFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transition.components)
    public var components : Vector3TransitionComponents {
        get { try! _default.get_Components() }
        set { try! _default.put_Components(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transition.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_Duration() }
        set { try! _default.put_Duration(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window)
open class Window : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IWindow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IWindowFactory : __ABI_Microsoft_UI_Xaml.IWindowFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Window")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml.WindowBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IWindowFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IWindowStatics: __ABI_Microsoft_UI_Xaml.IWindowStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Window")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.current)
    public class var current : Window! {
        get { try! _IWindowStatics.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.activate)
    public func activate() throws {
        try _default.Activate()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.close)
    public func close() throws {
        try _default.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.settitlebar)
    public func setTitleBar(_ titleBar: UIElement!) throws {
        try _default.SetTitleBar(titleBar)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.compositor)
    public var compositor : WinAppSDK.Compositor! {
        get { try! _default.get_Compositor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.content)
    public var content : UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.corewindow)
    public var coreWindow : UWP.CoreWindow! {
        get { try! _default.get_CoreWindow() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.dispatcher)
    public var dispatcher : UWP.CoreDispatcher! {
        get { try! _default.get_Dispatcher() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.extendscontentintotitlebar)
    public var extendsContentIntoTitleBar : Bool {
        get { try! _default.get_ExtendsContentIntoTitleBar() }
        set { try! _default.put_ExtendsContentIntoTitleBar(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.visible)
    public var visible : Bool {
        get { try! _default.get_Visible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.activated)
    public lazy var activated : Event<TypedEventHandler<Any?, WindowActivatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Activated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Activated($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.closed)
    public lazy var closed : Event<TypedEventHandler<Any?, WindowEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.sizechanged)
    public lazy var sizeChanged : Event<TypedEventHandler<Any?, WindowSizeChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SizeChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SizeChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.visibilitychanged)
    public lazy var visibilityChanged : Event<TypedEventHandler<Any?, WindowVisibilityChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VisibilityChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VisibilityChanged($0)
       }
      )
    }()

    private lazy var _IWindow2: __ABI_Microsoft_UI_Xaml.IWindow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.appwindow)
    public var appWindow : WinAppSDK.AppWindow! {
        get { try! _IWindow2.get_AppWindow() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.systembackdrop)
    public var systemBackdrop : WinUI.SystemBackdrop! {
        get { try! _IWindow2.get_SystemBackdrop() }
        set { try! _IWindow2.put_SystemBackdrop(newValue) }
    }

    deinit {
        _default = nil
        _IWindow2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivatedeventargs)
public final class WindowActivatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IWindowActivatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivatedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivatedeventargs.windowactivationstate)
    public var windowActivationState : WindowActivationState {
        get { try! _default.get_WindowActivationState() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windoweventargs)
public final class WindowEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IWindowEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windoweventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowsizechangedeventargs)
public final class WindowSizeChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IWindowSizeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowsizechangedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowsizechangedeventargs.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowvisibilitychangedeventargs)
public final class WindowVisibilityChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IWindowVisibilityChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowvisibilitychangedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowvisibilitychangedeventargs.visible)
    public var visible : Bool {
        get { try! _default.get_Visible() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlresourcereferencefailedeventargs)
public final class XamlResourceReferenceFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IXamlResourceReferenceFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlResourceReferenceFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlresourcereferencefailedeventargs.message)
    public var message : String {
        get { try! _default.get_Message() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot)
public final class XamlRoot : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IXamlRoot
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlRoot
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.content)
    public var content : UIElement! {
        get { try! _default.get_Content() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.ishostvisible)
    public var isHostVisible : Bool {
        get { try! _default.get_IsHostVisible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.rasterizationscale)
    public var rasterizationScale : Double {
        get { try! _default.get_RasterizationScale() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.changed)
    public lazy var changed : Event<TypedEventHandler<XamlRoot?, XamlRootChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Changed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Changed($0)
       }
      )
    }()

    private lazy var _IXamlRoot2: __ABI_Microsoft_UI_Xaml.IXamlRoot2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.contentislandenvironment)
    public var contentIslandEnvironment : WinAppSDK.ContentIslandEnvironment! {
        get { try! _IXamlRoot2.get_ContentIslandEnvironment() }
    }

    private lazy var _IXamlRoot3: __ABI_Microsoft_UI_Xaml.IXamlRoot3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.coordinateconverter)
    public var coordinateConverter : WinAppSDK.ContentCoordinateConverter! {
        get { try! _IXamlRoot3.get_CoordinateConverter() }
    }

    private lazy var _IXamlRoot4: __ABI_Microsoft_UI_Xaml.IXamlRoot4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.contentisland)
    public var contentIsland : WinAppSDK.ContentIsland! {
        get { try! _IXamlRoot4.get_ContentIsland() }
    }

    deinit {
        _default = nil
        _IXamlRoot2 = nil
        _IXamlRoot3 = nil
        _IXamlRoot4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlrootchangedeventargs)
public final class XamlRootChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IXamlRootChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlRootChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

public typealias ApplicationInitializationCallback = (ApplicationInitializationCallbackParams?) throws -> ()
public typealias BindingFailedEventHandler = (Any?, BindingFailedEventArgs?) throws -> ()
public typealias CreateDefaultValueCallback = () throws -> Any?
public typealias DependencyPropertyChangedCallback = (DependencyObject?, DependencyProperty?) throws -> ()
public typealias DependencyPropertyChangedEventHandler = (Any?, DependencyPropertyChangedEventArgs?) throws -> ()
public typealias DragEventHandler = (Any?, DragEventArgs?) throws -> ()
public typealias ExceptionRoutedEventHandler = (Any?, ExceptionRoutedEventArgs?) throws -> ()
public typealias PropertyChangedCallback = (DependencyObject?, DependencyPropertyChangedEventArgs?) throws -> ()
public typealias RoutedEventHandler = (Any?, RoutedEventArgs?) throws -> ()
public typealias SizeChangedEventHandler = (Any?, SizeChangedEventArgs?) throws -> ()
public typealias UnhandledExceptionEventHandler = (Any?, UnhandledExceptionEventArgs?) throws -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius)
public struct CornerRadius: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.topleft)
    public var topLeft: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.topright)
    public var topRight: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.bottomright)
    public var bottomRight: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.bottomleft)
    public var bottomLeft: Double = 0.0
    public init() {}
    public init(topLeft: Double, topRight: Double, bottomRight: Double, bottomLeft: Double) {
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomRight = bottomRight
        self.bottomLeft = bottomLeft
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.duration)
public struct Duration: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.duration.timespan)
    public var timeSpan: WindowsFoundation.TimeSpan = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.duration.type)
    public var type: DurationType = .init(0)
    public init() {}
    public init(timeSpan: WindowsFoundation.TimeSpan, type: DurationType) {
        self.timeSpan = timeSpan
        self.type = type
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridlength)
public struct GridLength: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridlength.value)
    public var value: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridlength.gridunittype)
    public var gridUnitType: GridUnitType = .init(0)
    public init() {}
    public init(value: Double, gridUnitType: GridUnitType) {
        self.value = value
        self.gridUnitType = gridUnitType
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness)
public struct Thickness: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.left)
    public var left: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.top)
    public var top: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.right)
    public var right: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.bottom)
    public var bottom: Double = 0.0
    public init() {}
    public init(left: Double, top: Double, right: Double, bottom: Double) {
        self.left = left
        self.top = top
        self.right = right
        self.bottom = bottom
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension)
public protocol IDataTemplateExtension : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.resettemplate)
    func resetTemplate() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.processbinding)
    func processBinding(_ phase: UInt32) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.processbindings)
    func processBindings(_ arg: WinUI.ContainerContentChangingEventArgs!) throws -> Int32
}

extension IDataTemplateExtension {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IDataTemplateExtensionWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml.IDataTemplateExtensionWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIDataTemplateExtension = any IDataTemplateExtension

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory)
public protocol IElementFactory : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory.getelement)
    func getElement(_ args: WinUI.ElementFactoryGetArgs!) throws -> WinUI.UIElement!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory.recycleelement)
    func recycleElement(_ args: WinUI.ElementFactoryRecycleArgs!) throws
}

extension IElementFactory {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IElementFactoryWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml.IElementFactoryWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIElementFactory = any IElementFactory

extension WinUI.ApplicationHighContrastAdjustment {
    public static var none : WinUI.ApplicationHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None
    }
    public static var auto : WinUI.ApplicationHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_Auto
    }
}
extension WinUI.ApplicationHighContrastAdjustment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ApplicationTheme {
    public static var light : WinUI.ApplicationTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationTheme_Light
    }
    public static var dark : WinUI.ApplicationTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationTheme_Dark
    }
}
extension WinUI.ApplicationTheme: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.DispatcherShutdownMode {
    public static var onLastWindowClose : WinUI.DispatcherShutdownMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CDispatcherShutdownMode_OnLastWindowClose
    }
    public static var onExplicitShutdown : WinUI.DispatcherShutdownMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CDispatcherShutdownMode_OnExplicitShutdown
    }
}
extension WinUI.DispatcherShutdownMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.DurationType {
    public static var automatic : WinUI.DurationType {
        __x_ABI_CMicrosoft_CUI_CXaml_CDurationType_Automatic
    }
    public static var timeSpan : WinUI.DurationType {
        __x_ABI_CMicrosoft_CUI_CXaml_CDurationType_TimeSpan
    }
    public static var forever : WinUI.DurationType {
        __x_ABI_CMicrosoft_CUI_CXaml_CDurationType_Forever
    }
}
extension WinUI.DurationType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ElementHighContrastAdjustment {
    public static var none : WinUI.ElementHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_None
    }
    public static var application : WinUI.ElementHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Application
    }
    public static var auto : WinUI.ElementHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Auto
    }
}
extension WinUI.ElementHighContrastAdjustment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ElementSoundMode {
    public static var `default` : WinUI.ElementSoundMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode_Default
    }
    public static var focusOnly : WinUI.ElementSoundMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode_FocusOnly
    }
    public static var off : WinUI.ElementSoundMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode_Off
    }
}
extension WinUI.ElementSoundMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ElementTheme {
    public static var `default` : WinUI.ElementTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme_Default
    }
    public static var light : WinUI.ElementTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme_Light
    }
    public static var dark : WinUI.ElementTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme_Dark
    }
}
extension WinUI.ElementTheme: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FlowDirection {
    public static var leftToRight : WinUI.FlowDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection_LeftToRight
    }
    public static var rightToLeft : WinUI.FlowDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection_RightToLeft
    }
}
extension WinUI.FlowDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FocusState {
    public static var unfocused : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Unfocused
    }
    public static var pointer : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Pointer
    }
    public static var keyboard : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Keyboard
    }
    public static var programmatic : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Programmatic
    }
}
extension WinUI.FocusState: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FocusVisualKind {
    public static var dottedLine : WinUI.FocusVisualKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine
    }
    public static var highVisibility : WinUI.FocusVisualKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind_HighVisibility
    }
    public static var reveal : WinUI.FocusVisualKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind_Reveal
    }
}
extension WinUI.FocusVisualKind: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.GridUnitType {
    public static var auto : WinUI.GridUnitType {
        __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType_Auto
    }
    public static var pixel : WinUI.GridUnitType {
        __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType_Pixel
    }
    public static var star : WinUI.GridUnitType {
        __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType_Star
    }
}
extension WinUI.GridUnitType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.HorizontalAlignment {
    public static var left : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left
    }
    public static var center : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Center
    }
    public static var right : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Right
    }
    public static var stretch : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Stretch
    }
}
extension WinUI.HorizontalAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.LayoutCycleDebugBreakLevel {
    public static var none : WinUI.LayoutCycleDebugBreakLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel_None
    }
    public static var low : WinUI.LayoutCycleDebugBreakLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel_Low
    }
    public static var high : WinUI.LayoutCycleDebugBreakLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel_High
    }
}
extension WinUI.LayoutCycleDebugBreakLevel: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.LayoutCycleTracingLevel {
    public static var none : WinUI.LayoutCycleTracingLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel_None
    }
    public static var low : WinUI.LayoutCycleTracingLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel_Low
    }
    public static var high : WinUI.LayoutCycleTracingLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel_High
    }
}
extension WinUI.LayoutCycleTracingLevel: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.LineStackingStrategy {
    public static var maxHeight : WinUI.LineStackingStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight
    }
    public static var blockLineHeight : WinUI.LineStackingStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BlockLineHeight
    }
    public static var baselineToBaseline : WinUI.LineStackingStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BaselineToBaseline
    }
}
extension WinUI.LineStackingStrategy: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.OpticalMarginAlignment {
    public static var none : WinUI.OpticalMarginAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None
    }
    public static var trimSideBearings : WinUI.OpticalMarginAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_TrimSideBearings
    }
}
extension WinUI.OpticalMarginAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TextAlignment {
    public static var center : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Center
    }
    public static var left : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Left
    }
    public static var start : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Start
    }
    public static var right : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Right
    }
    public static var end : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_End
    }
    public static var justify : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Justify
    }
    public static var detectFromContent : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_DetectFromContent
    }
}
extension WinUI.TextAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TextLineBounds {
    public static var full : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_Full
    }
    public static var trimToCapHeight : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToCapHeight
    }
    public static var trimToBaseline : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToBaseline
    }
    public static var tight : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_Tight
    }
}
extension WinUI.TextLineBounds: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TextReadingOrder {
    public static var `default` : WinUI.TextReadingOrder {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default
    }
    public static var useFlowDirection : WinUI.TextReadingOrder {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder_UseFlowDirection
    }
    public static var detectFromContent : WinUI.TextReadingOrder {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder_DetectFromContent
    }
}
extension WinUI.TextReadingOrder: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TextTrimming {
    public static var none : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_None
    }
    public static var characterEllipsis : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_CharacterEllipsis
    }
    public static var wordEllipsis : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_WordEllipsis
    }
    public static var clip : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_Clip
    }
}
extension WinUI.TextTrimming: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TextWrapping {
    public static var noWrap : WinUI.TextWrapping {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap
    }
    public static var wrap : WinUI.TextWrapping {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping_Wrap
    }
    public static var wrapWholeWords : WinUI.TextWrapping {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping_WrapWholeWords
    }
}
extension WinUI.TextWrapping: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.Vector3TransitionComponents {
    public static var x : WinUI.Vector3TransitionComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents_X
    }
    public static var y : WinUI.Vector3TransitionComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents_Y
    }
    public static var z : WinUI.Vector3TransitionComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents_Z
    }
}
extension WinUI.Vector3TransitionComponents: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.VerticalAlignment {
    public static var top : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top
    }
    public static var center : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Center
    }
    public static var bottom : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Bottom
    }
    public static var stretch : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Stretch
    }
}
extension WinUI.VerticalAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.Visibility {
    public static var visible : WinUI.Visibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CVisibility_Visible
    }
    public static var collapsed : WinUI.Visibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CVisibility_Collapsed
    }
}
extension WinUI.Visibility: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.WindowActivationState {
    public static var codeActivated : WinUI.WindowActivationState {
        __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState_CodeActivated
    }
    public static var deactivated : WinUI.WindowActivationState {
        __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState_Deactivated
    }
    public static var pointerActivated : WinUI.WindowActivationState {
        __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState_PointerActivated
    }
}
extension WinUI.WindowActivationState: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

