// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml_Shapes {
    public enum EllipseBridge: AbiBridge {
        public typealias SwiftProjection = Ellipse
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIEllipse
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIEllipse>?) -> Ellipse? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PathBridge: ComposableBridge {
        public typealias SwiftProjection = Path
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIPath
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIPath>?) -> Path? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = Path
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIPath
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IPath
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum RectangleBridge: AbiBridge {
        public typealias SwiftProjection = Rectangle
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIRectangle
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIRectangle>?) -> Rectangle? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ShapeBridge: ComposableBridge {
        public typealias SwiftProjection = Shape
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIShape
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIShape>?) -> Shape? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = Shape
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIShape
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IShape
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

}
@_spi(WinRTInternal)
public class EllipseMaker: MakeFromAbi {
    public typealias SwiftType = Ellipse
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Ellipse(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PathMaker: MakeFromAbi {
    public typealias SwiftType = Path
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Path(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RectangleMaker: MakeFromAbi {
    public typealias SwiftType = Rectangle
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Rectangle(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ShapeMaker: MakeFromAbi {
    public typealias SwiftType = Shape
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Shape(fromAbi: abi)
    }
}
