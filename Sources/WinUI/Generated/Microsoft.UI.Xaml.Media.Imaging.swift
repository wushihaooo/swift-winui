// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapcreateoptions)
public typealias BitmapCreateOptions = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.decodepixeltype)
public typealias DecodePixelType = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesourceloadstatus)
public typealias SvgImageSourceLoadStatus = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CSvgImageSourceLoadStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage)
public final class BitmapImage : WinUI.BitmapSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IBitmapImage
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapImage")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IBitmapImageFactory: __ABI_Microsoft_UI_Xaml_Media_Imaging.IBitmapImageFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapImage")
    public init(_ uriSource: WindowsFoundation.Uri!) {
        super.init(fromAbi: try! Self._IBitmapImageFactory.CreateInstanceWithUriSource(uriSource))
    }

    private static let _IBitmapImageStatics: __ABI_Microsoft_UI_Xaml_Media_Imaging.IBitmapImageStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapImage")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.autoplayproperty)
    public static var autoPlayProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_AutoPlayProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.createoptionsproperty)
    public static var createOptionsProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_CreateOptionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.decodepixelheightproperty)
    public static var decodePixelHeightProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_DecodePixelHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.decodepixeltypeproperty)
    public static var decodePixelTypeProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_DecodePixelTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.decodepixelwidthproperty)
    public static var decodePixelWidthProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_DecodePixelWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.isanimatedbitmapproperty)
    public static var isAnimatedBitmapProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_IsAnimatedBitmapProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.isplayingproperty)
    public static var isPlayingProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_IsPlayingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.urisourceproperty)
    public static var uriSourceProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapImageStatics.get_UriSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.play)
    public func play() throws {
        try _default.Play()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.stop)
    public func stop() throws {
        try _default.Stop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.autoplay)
    public var autoPlay : Bool {
        get { try! _default.get_AutoPlay() }
        set { try! _default.put_AutoPlay(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.createoptions)
    public var createOptions : BitmapCreateOptions {
        get { try! _default.get_CreateOptions() }
        set { try! _default.put_CreateOptions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.decodepixelheight)
    public var decodePixelHeight : Int32 {
        get { try! _default.get_DecodePixelHeight() }
        set { try! _default.put_DecodePixelHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.decodepixeltype)
    public var decodePixelType : DecodePixelType {
        get { try! _default.get_DecodePixelType() }
        set { try! _default.put_DecodePixelType(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.decodepixelwidth)
    public var decodePixelWidth : Int32 {
        get { try! _default.get_DecodePixelWidth() }
        set { try! _default.put_DecodePixelWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.isanimatedbitmap)
    public var isAnimatedBitmap : Bool {
        get { try! _default.get_IsAnimatedBitmap() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.isplaying)
    public var isPlaying : Bool {
        get { try! _default.get_IsPlaying() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.urisource)
    public var uriSource : WindowsFoundation.Uri! {
        get { try! _default.get_UriSource() }
        set { try! _default.put_UriSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.downloadprogress)
    public lazy var downloadProgress : Event<DownloadProgressEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DownloadProgress($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DownloadProgress($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.imagefailed)
    public lazy var imageFailed : Event<WinUI.ExceptionRoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ImageFailed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ImageFailed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapimage.imageopened)
    public lazy var imageOpened : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ImageOpened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ImageOpened($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource)
open class BitmapSource : WinUI.ImageSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IBitmapSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBitmapSourceFactory : __ABI_Microsoft_UI_Xaml_Media_Imaging.IBitmapSourceFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapSource")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media_Imaging.BitmapSourceBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBitmapSourceFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBitmapSourceStatics: __ABI_Microsoft_UI_Xaml_Media_Imaging.IBitmapSourceStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapSource")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource.pixelheightproperty)
    public class var pixelHeightProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapSourceStatics.get_PixelHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource.pixelwidthproperty)
    public class var pixelWidthProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapSourceStatics.get_PixelWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource.setsource)
    public func setSource(_ streamSource: UWP.AnyIRandomAccessStream!) throws {
        try _default.SetSource(streamSource)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource.setsourceasync)
    public func setSourceAsync(_ streamSource: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SetSourceAsync(streamSource)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource.pixelheight)
    public var pixelHeight : Int32 {
        get { try! _default.get_PixelHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.bitmapsource.pixelwidth)
    public var pixelWidth : Int32 {
        get { try! _default.get_PixelWidth() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.downloadprogresseventargs)
public final class DownloadProgressEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IDownloadProgressEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.downloadprogresseventargs.progress)
    public var progress : Int32 {
        get { try! _default.get_Progress() }
        set { try! _default.put_Progress(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap)
public final class RenderTargetBitmap : WinUI.ImageSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IRenderTargetBitmap
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IRenderTargetBitmapStatics: __ABI_Microsoft_UI_Xaml_Media_Imaging.IRenderTargetBitmapStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.pixelheightproperty)
    public static var pixelHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRenderTargetBitmapStatics.get_PixelHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.pixelwidthproperty)
    public static var pixelWidthProperty : WinUI.DependencyProperty! {
        get { try! _IRenderTargetBitmapStatics.get_PixelWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.renderasync)
    public func renderAsync(_ element: WinUI.UIElement!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RenderAsync(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.renderasync)
    public func renderAsync(_ element: WinUI.UIElement!, _ scaledWidth: Int32, _ scaledHeight: Int32) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RenderToSizeAsync(element, scaledWidth, scaledHeight)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.getpixelsasync)
    public func getPixelsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIBuffer?>! {
        try _default.GetPixelsAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.pixelheight)
    public var pixelHeight : Int32 {
        get { try! _default.get_PixelHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.rendertargetbitmap.pixelwidth)
    public var pixelWidth : Int32 {
        get { try! _default.get_PixelWidth() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.softwarebitmapsource)
public final class SoftwareBitmapSource : WinUI.ImageSource, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.ISoftwareBitmapSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISoftwareBitmapSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.softwarebitmapsource.setbitmapasync)
    public func setBitmapAsync(_ softwareBitmap: UWP.SoftwareBitmap!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SetBitmapAsync(softwareBitmap)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.softwarebitmapsource.close)
    public func close() throws {
        try _IClosable.Close()
    }

    deinit {
        _default = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.surfaceimagesource)
open class SurfaceImageSource : WinUI.ImageSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.ISurfaceImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISurfaceImageSourceFactory : __ABI_Microsoft_UI_Xaml_Media_Imaging.ISurfaceImageSourceFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource")

    public init(_ pixelWidth: Int32, _ pixelHeight: Int32) {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media_Imaging.SurfaceImageSourceBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISurfaceImageSourceFactory.CreateInstanceWithDimensions(pixelWidth, pixelHeight, baseInterface, &innerInterface)
        }
    }

    public init(_ pixelWidth: Int32, _ pixelHeight: Int32, _ isOpaque: Bool) {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media_Imaging.SurfaceImageSourceBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISurfaceImageSourceFactory.CreateInstanceWithDimensionsAndOpacity(pixelWidth, pixelHeight, isOpaque, baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource)
open class SvgImageSource : WinUI.ImageSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.ISvgImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISvgImageSourceFactory : __ABI_Microsoft_UI_Xaml_Media_Imaging.ISvgImageSourceFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.SvgImageSource")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media_Imaging.SvgImageSourceBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISvgImageSourceFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    public init(_ uriSource: WindowsFoundation.Uri!) {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media_Imaging.SvgImageSourceBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISvgImageSourceFactory.CreateInstanceWithUriSource(uriSource, baseInterface, &innerInterface)
        }
    }

    private static let _ISvgImageSourceStatics: __ABI_Microsoft_UI_Xaml_Media_Imaging.ISvgImageSourceStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.SvgImageSource")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.rasterizepixelheightproperty)
    public class var rasterizePixelHeightProperty : WinUI.DependencyProperty! {
        get { try! _ISvgImageSourceStatics.get_RasterizePixelHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.rasterizepixelwidthproperty)
    public class var rasterizePixelWidthProperty : WinUI.DependencyProperty! {
        get { try! _ISvgImageSourceStatics.get_RasterizePixelWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.urisourceproperty)
    public class var uriSourceProperty : WinUI.DependencyProperty! {
        get { try! _ISvgImageSourceStatics.get_UriSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.setsourceasync)
    public func setSourceAsync(_ streamSource: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncOperation<SvgImageSourceLoadStatus>! {
        try _default.SetSourceAsync(streamSource)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.rasterizepixelheight)
    public var rasterizePixelHeight : Double {
        get { try! _default.get_RasterizePixelHeight() }
        set { try! _default.put_RasterizePixelHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.rasterizepixelwidth)
    public var rasterizePixelWidth : Double {
        get { try! _default.get_RasterizePixelWidth() }
        set { try! _default.put_RasterizePixelWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.urisource)
    public var uriSource : WindowsFoundation.Uri! {
        get { try! _default.get_UriSource() }
        set { try! _default.put_UriSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.openfailed)
    public lazy var openFailed : Event<TypedEventHandler<SvgImageSource?, SvgImageSourceFailedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OpenFailed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OpenFailed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesource.opened)
    public lazy var opened : Event<TypedEventHandler<SvgImageSource?, SvgImageSourceOpenedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opened($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesourcefailedeventargs)
public final class SvgImageSourceFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.ISvgImageSourceFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesourcefailedeventargs.status)
    public var status : SvgImageSourceLoadStatus {
        get { try! _default.get_Status() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.svgimagesourceopenedeventargs)
public final class SvgImageSourceOpenedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.ISvgImageSourceOpenedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceOpenedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.virtualsurfaceimagesource)
public final class VirtualSurfaceImageSource : WinUI.SurfaceImageSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IVirtualSurfaceImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IVirtualSurfaceImageSourceFactory: __ABI_Microsoft_UI_Xaml_Media_Imaging.IVirtualSurfaceImageSourceFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource")
    override public init(_ pixelWidth: Int32, _ pixelHeight: Int32) {
        super.init(fromAbi: try! Self._IVirtualSurfaceImageSourceFactory.CreateInstanceWithDimensions(pixelWidth, pixelHeight))
    }

    override public init(_ pixelWidth: Int32, _ pixelHeight: Int32, _ isOpaque: Bool) {
        super.init(fromAbi: try! Self._IVirtualSurfaceImageSourceFactory.CreateInstanceWithDimensionsAndOpacity(pixelWidth, pixelHeight, isOpaque))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.writeablebitmap)
public final class WriteableBitmap : WinUI.BitmapSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IWriteableBitmap
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmap
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IWriteableBitmapFactory: __ABI_Microsoft_UI_Xaml_Media_Imaging.IWriteableBitmapFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap")
    public init(_ pixelWidth: Int32, _ pixelHeight: Int32) {
        super.init(fromAbi: try! Self._IWriteableBitmapFactory.CreateInstanceWithDimensions(pixelWidth, pixelHeight))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.writeablebitmap.invalidate)
    public func invalidate() throws {
        try _default.Invalidate()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.writeablebitmap.pixelbuffer)
    public var pixelBuffer : UWP.AnyIBuffer! {
        get { try! _default.get_PixelBuffer() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.xamlrenderingbackgroundtask)
open class XamlRenderingBackgroundTask : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTask
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTask
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTaskOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTaskOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IXamlRenderingBackgroundTaskFactory : __ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTaskFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Media_Imaging.XamlRenderingBackgroundTaskBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IXamlRenderingBackgroundTaskFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private lazy var _IXamlRenderingBackgroundTaskOverrides: __ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTaskOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imaging.xamlrenderingbackgroundtask.onrun)
    open func onRun(_ taskInstance: UWP.AnyIBackgroundTaskInstance!) throws {
        try _IXamlRenderingBackgroundTaskOverrides.OnRun(taskInstance)
    }

    deinit {
        _default = nil
        _IXamlRenderingBackgroundTaskOverrides = nil
    }
}

public typealias DownloadProgressEventHandler = (Any?, DownloadProgressEventArgs?) throws -> ()
extension WinUI.BitmapCreateOptions {
    public static var none : WinUI.BitmapCreateOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_None
    }
    public static var ignoreImageCache : WinUI.BitmapCreateOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_IgnoreImageCache
    }
}
extension WinUI.BitmapCreateOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.DecodePixelType {
    public static var physical : WinUI.DecodePixelType {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Physical
    }
    public static var logical : WinUI.DecodePixelType {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Logical
    }
}
extension WinUI.DecodePixelType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SvgImageSourceLoadStatus {
    public static var success : WinUI.SvgImageSourceLoadStatus {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CSvgImageSourceLoadStatus_Success
    }
    public static var networkError : WinUI.SvgImageSourceLoadStatus {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CSvgImageSourceLoadStatus_NetworkError
    }
    public static var invalidFormat : WinUI.SvgImageSourceLoadStatus {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CSvgImageSourceLoadStatus_InvalidFormat
    }
    public static var other : WinUI.SvgImageSourceLoadStatus {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CSvgImageSourceLoadStatus_Other
    }
}
extension WinUI.SvgImageSourceLoadStatus: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

