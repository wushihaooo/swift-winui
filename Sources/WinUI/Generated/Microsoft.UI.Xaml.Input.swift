// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusinputdevicekind)
public typealias FocusInputDeviceKind = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusnavigationdirection)
public typealias FocusNavigationDirection = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inputscopenamevalue)
public typealias InputScopeNameValue = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keytipplacementmode)
public typealias KeyTipPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardacceleratorplacementmode)
public typealias KeyboardAcceleratorPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardnavigationmode)
public typealias KeyboardNavigationMode = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationmodes)
public typealias ManipulationModes = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.xyfocuskeyboardnavigationmode)
public typealias XYFocusKeyboardNavigationMode = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.xyfocusnavigationstrategy)
public typealias XYFocusNavigationStrategy = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.xyfocusnavigationstrategyoverride)
public typealias XYFocusNavigationStrategyOverride = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.accesskeydisplaydismissedeventargs)
public final class AccessKeyDisplayDismissedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IAccessKeyDisplayDismissedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.accesskeydisplayrequestedeventargs)
public final class AccessKeyDisplayRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IAccessKeyDisplayRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.accesskeydisplayrequestedeventargs.pressedkeys)
    public var pressedKeys : String {
        get { try! _default.get_PressedKeys() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.accesskeyinvokedeventargs)
public final class AccessKeyInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IAccessKeyInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.accesskeyinvokedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.characterreceivedroutedeventargs)
public final class CharacterReceivedRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.ICharacterReceivedRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.characterreceivedroutedeventargs.character)
    public var character : Character {
        get { try! _default.get_Character() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.characterreceivedroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.characterreceivedroutedeventargs.keystatus)
    public var keyStatus : UWP.CorePhysicalKeyStatus {
        get { try! _default.get_KeyStatus() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.contextrequestedeventargs)
public final class ContextRequestedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IContextRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ContextRequestedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.contextrequestedeventargs.trygetposition)
    public func tryGetPosition(_ relativeTo: WinUI.UIElement!, _ point: inout WindowsFoundation.Point) throws -> Bool {
        try _default.TryGetPosition(relativeTo, &point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.contextrequestedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.doubletappedroutedeventargs)
public final class DoubleTappedRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IDoubleTappedRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.doubletappedroutedeventargs.getposition)
    public func getPosition(_ relativeTo: WinUI.UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPosition(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.doubletappedroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.doubletappedroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.findnextelementoptions)
public final class FindNextElementOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IFindNextElementOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.FindNextElementOptions")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.findnextelementoptions.exclusionrect)
    public var exclusionRect : WindowsFoundation.Rect {
        get { try! _default.get_ExclusionRect() }
        set { try! _default.put_ExclusionRect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.findnextelementoptions.hintrect)
    public var hintRect : WindowsFoundation.Rect {
        get { try! _default.get_HintRect() }
        set { try! _default.put_HintRect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.findnextelementoptions.searchroot)
    public var searchRoot : WinUI.DependencyObject! {
        get { try! _default.get_SearchRoot() }
        set { try! _default.put_SearchRoot(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.findnextelementoptions.xyfocusnavigationstrategyoverride)
    public var xyFocusNavigationStrategyOverride : XYFocusNavigationStrategyOverride {
        get { try! _default.get_XYFocusNavigationStrategyOverride() }
        set { try! _default.put_XYFocusNavigationStrategyOverride(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager)
public final class FocusManager : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IFocusManager
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IFocusManagerStatics: __ABI_Microsoft_UI_Xaml_Input.IFocusManagerStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.FocusManager")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.tryfocusasync)
    public static func tryFocusAsync(_ element: WinUI.DependencyObject!, _ value: WinUI.FocusState) throws -> WindowsFoundation.AnyIAsyncOperation<FocusMovementResult?>! {
        return try _IFocusManagerStatics.TryFocusAsync(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.trymovefocusasync)
    public static func tryMoveFocusAsync(_ focusNavigationDirection: FocusNavigationDirection) throws -> WindowsFoundation.AnyIAsyncOperation<FocusMovementResult?>! {
        return try _IFocusManagerStatics.TryMoveFocusAsync(focusNavigationDirection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.trymovefocusasync)
    public static func tryMoveFocusAsync(_ focusNavigationDirection: FocusNavigationDirection, _ focusNavigationOptions: FindNextElementOptions!) throws -> WindowsFoundation.AnyIAsyncOperation<FocusMovementResult?>! {
        return try _IFocusManagerStatics.TryMoveFocusWithOptionsAsync(focusNavigationDirection, focusNavigationOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.trymovefocus)
    public static func tryMoveFocus(_ focusNavigationDirection: FocusNavigationDirection, _ focusNavigationOptions: FindNextElementOptions!) throws -> Bool {
        return try _IFocusManagerStatics.TryMoveFocusWithOptions(focusNavigationDirection, focusNavigationOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.findnextelement)
    public static func findNextElement(_ focusNavigationDirection: FocusNavigationDirection) throws -> WinUI.DependencyObject! {
        return try _IFocusManagerStatics.FindNextElement(focusNavigationDirection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.findfirstfocusableelement)
    public static func findFirstFocusableElement(_ searchScope: WinUI.DependencyObject!) throws -> WinUI.DependencyObject! {
        return try _IFocusManagerStatics.FindFirstFocusableElement(searchScope)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.findlastfocusableelement)
    public static func findLastFocusableElement(_ searchScope: WinUI.DependencyObject!) throws -> WinUI.DependencyObject! {
        return try _IFocusManagerStatics.FindLastFocusableElement(searchScope)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.findnextelement)
    public static func findNextElement(_ focusNavigationDirection: FocusNavigationDirection, _ focusNavigationOptions: FindNextElementOptions!) throws -> WinUI.DependencyObject! {
        return try _IFocusManagerStatics.FindNextElementWithOptions(focusNavigationDirection, focusNavigationOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.findnextfocusableelement)
    public static func findNextFocusableElement(_ focusNavigationDirection: FocusNavigationDirection) throws -> WinUI.UIElement! {
        return try _IFocusManagerStatics.FindNextFocusableElement(focusNavigationDirection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.findnextfocusableelement)
    public static func findNextFocusableElement(_ focusNavigationDirection: FocusNavigationDirection, _ hintRect: WindowsFoundation.Rect) throws -> WinUI.UIElement! {
        return try _IFocusManagerStatics.FindNextFocusableElementWithHint(focusNavigationDirection, hintRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.trymovefocus)
    public static func tryMoveFocus(_ focusNavigationDirection: FocusNavigationDirection) throws -> Bool {
        return try _IFocusManagerStatics.TryMoveFocus(focusNavigationDirection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.getfocusedelement)
    public static func getFocusedElement() throws -> Any! {
        return try _IFocusManagerStatics.GetFocusedElement()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.getfocusedelement)
    public static func getFocusedElement(_ xamlRoot: WinUI.XamlRoot!) throws -> Any! {
        return try _IFocusManagerStatics.GetFocusedElementWithRoot(xamlRoot)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.gettingfocus)
    public static var gettingFocus : Event<EventHandler<GettingFocusEventArgs?>> = {
      .init(
        add: { try! _IFocusManagerStatics.add_GettingFocus($0) },
        remove: { try? _IFocusManagerStatics.remove_GettingFocus($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.gotfocus)
    public static var gotFocus : Event<EventHandler<FocusManagerGotFocusEventArgs?>> = {
      .init(
        add: { try! _IFocusManagerStatics.add_GotFocus($0) },
        remove: { try? _IFocusManagerStatics.remove_GotFocus($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.losingfocus)
    public static var losingFocus : Event<EventHandler<LosingFocusEventArgs?>> = {
      .init(
        add: { try! _IFocusManagerStatics.add_LosingFocus($0) },
        remove: { try? _IFocusManagerStatics.remove_LosingFocus($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanager.lostfocus)
    public static var lostFocus : Event<EventHandler<FocusManagerLostFocusEventArgs?>> = {
      .init(
        add: { try! _IFocusManagerStatics.add_LostFocus($0) },
        remove: { try? _IFocusManagerStatics.remove_LostFocus($0) }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanagergotfocuseventargs)
public final class FocusManagerGotFocusEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IFocusManagerGotFocusEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanagergotfocuseventargs.correlationid)
    public var correlationId : Foundation.UUID {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanagergotfocuseventargs.newfocusedelement)
    public var newFocusedElement : WinUI.DependencyObject! {
        get { try! _default.get_NewFocusedElement() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanagerlostfocuseventargs)
public final class FocusManagerLostFocusEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IFocusManagerLostFocusEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanagerlostfocuseventargs.correlationid)
    public var correlationId : Foundation.UUID {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmanagerlostfocuseventargs.oldfocusedelement)
    public var oldFocusedElement : WinUI.DependencyObject! {
        get { try! _default.get_OldFocusedElement() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmovementresult)
public final class FocusMovementResult : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IFocusMovementResult
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusMovementResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.focusmovementresult.succeeded)
    public var succeeded : Bool {
        get { try! _default.get_Succeeded() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs)
public final class GettingFocusEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IGettingFocusEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.trycancel)
    public func tryCancel() throws -> Bool {
        try _default.TryCancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.trysetnewfocusedelement)
    public func trySetNewFocusedElement(_ element: WinUI.DependencyObject!) throws -> Bool {
        try _default.TrySetNewFocusedElement(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.correlationid)
    public var correlationId : Foundation.UUID {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.direction)
    public var direction : FocusNavigationDirection {
        get { try! _default.get_Direction() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.focusstate)
    public var focusState : WinUI.FocusState {
        get { try! _default.get_FocusState() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.inputdevice)
    public var inputDevice : FocusInputDeviceKind {
        get { try! _default.get_InputDevice() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.newfocusedelement)
    public var newFocusedElement : WinUI.DependencyObject! {
        get { try! _default.get_NewFocusedElement() }
        set { try! _default.put_NewFocusedElement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.gettingfocuseventargs.oldfocusedelement)
    public var oldFocusedElement : WinUI.DependencyObject! {
        get { try! _default.get_OldFocusedElement() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.holdingroutedeventargs)
public final class HoldingRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IHoldingRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.holdingroutedeventargs.getposition)
    public func getPosition(_ relativeTo: WinUI.UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPosition(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.holdingroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.holdingroutedeventargs.holdingstate)
    public var holdingState : WinAppSDK.HoldingState {
        get { try! _default.get_HoldingState() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.holdingroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiaexpansionbehavior)
public final class InertiaExpansionBehavior : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IInertiaExpansionBehavior
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiaexpansionbehavior.desireddeceleration)
    public var desiredDeceleration : Double {
        get { try! _default.get_DesiredDeceleration() }
        set { try! _default.put_DesiredDeceleration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiaexpansionbehavior.desiredexpansion)
    public var desiredExpansion : Double {
        get { try! _default.get_DesiredExpansion() }
        set { try! _default.put_DesiredExpansion(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiarotationbehavior)
public final class InertiaRotationBehavior : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IInertiaRotationBehavior
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiarotationbehavior.desireddeceleration)
    public var desiredDeceleration : Double {
        get { try! _default.get_DesiredDeceleration() }
        set { try! _default.put_DesiredDeceleration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiarotationbehavior.desiredrotation)
    public var desiredRotation : Double {
        get { try! _default.get_DesiredRotation() }
        set { try! _default.put_DesiredRotation(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiatranslationbehavior)
public final class InertiaTranslationBehavior : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IInertiaTranslationBehavior
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiatranslationbehavior.desireddeceleration)
    public var desiredDeceleration : Double {
        get { try! _default.get_DesiredDeceleration() }
        set { try! _default.put_DesiredDeceleration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inertiatranslationbehavior.desireddisplacement)
    public var desiredDisplacement : Double {
        get { try! _default.get_DesiredDisplacement() }
        set { try! _default.put_DesiredDisplacement(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inputscope)
public final class InputScope : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IInputScope
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScope
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.InputScope")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inputscope.names)
    public var names : WindowsFoundation.AnyIVector<InputScopeName?>! {
        get { try! _default.get_Names() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inputscopename)
public final class InputScopeName : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IInputScopeName
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeName
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.InputScopeName")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IInputScopeNameFactory: __ABI_Microsoft_UI_Xaml_Input.IInputScopeNameFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.InputScopeName")
    public init(_ nameValue: InputScopeNameValue) {
        super.init(fromAbi: try! Self._IInputScopeNameFactory.CreateInstance(nameValue))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.inputscopename.namevalue)
    public var nameValue : InputScopeNameValue {
        get { try! _default.get_NameValue() }
        set { try! _default.put_NameValue(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyroutedeventargs)
public final class KeyRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IKeyRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyroutedeventargs.deviceid)
    public var deviceId : String {
        get { try! _default.get_DeviceId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyroutedeventargs.key)
    public var key : UWP.VirtualKey {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyroutedeventargs.keystatus)
    public var keyStatus : UWP.CorePhysicalKeyStatus {
        get { try! _default.get_KeyStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyroutedeventargs.originalkey)
    public var originalKey : UWP.VirtualKey {
        get { try! _default.get_OriginalKey() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator)
open class KeyboardAccelerator : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IKeyboardAccelerator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IKeyboardAcceleratorFactory : __ABI_Microsoft_UI_Xaml_Input.IKeyboardAcceleratorFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.KeyboardAccelerator")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Input.KeyboardAcceleratorBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IKeyboardAcceleratorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IKeyboardAcceleratorStatics: __ABI_Microsoft_UI_Xaml_Input.IKeyboardAcceleratorStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.KeyboardAccelerator")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.isenabledproperty)
    public class var isEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IKeyboardAcceleratorStatics.get_IsEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.keyproperty)
    public class var keyProperty : WinUI.DependencyProperty! {
        get { try! _IKeyboardAcceleratorStatics.get_KeyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.modifiersproperty)
    public class var modifiersProperty : WinUI.DependencyProperty! {
        get { try! _IKeyboardAcceleratorStatics.get_ModifiersProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.scopeownerproperty)
    public class var scopeOwnerProperty : WinUI.DependencyProperty! {
        get { try! _IKeyboardAcceleratorStatics.get_ScopeOwnerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.isenabled)
    public var isEnabled : Bool {
        get { try! _default.get_IsEnabled() }
        set { try! _default.put_IsEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.key)
    public var key : UWP.VirtualKey {
        get { try! _default.get_Key() }
        set { try! _default.put_Key(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.modifiers)
    public var modifiers : UWP.VirtualKeyModifiers {
        get { try! _default.get_Modifiers() }
        set { try! _default.put_Modifiers(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.scopeowner)
    public var scopeOwner : WinUI.DependencyObject! {
        get { try! _default.get_ScopeOwner() }
        set { try! _default.put_ScopeOwner(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardaccelerator.invoked)
    public lazy var invoked : Event<TypedEventHandler<KeyboardAccelerator?, KeyboardAcceleratorInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Invoked($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Invoked($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardacceleratorinvokedeventargs)
public final class KeyboardAcceleratorInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IKeyboardAcceleratorInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardacceleratorinvokedeventargs.element)
    public var element : WinUI.DependencyObject! {
        get { try! _default.get_Element() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardacceleratorinvokedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.keyboardacceleratorinvokedeventargs.keyboardaccelerator)
    public var keyboardAccelerator : KeyboardAccelerator! {
        get { try! _default.get_KeyboardAccelerator() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs)
public final class LosingFocusEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.ILosingFocusEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.trycancel)
    public func tryCancel() throws -> Bool {
        try _default.TryCancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.trysetnewfocusedelement)
    public func trySetNewFocusedElement(_ element: WinUI.DependencyObject!) throws -> Bool {
        try _default.TrySetNewFocusedElement(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.correlationid)
    public var correlationId : Foundation.UUID {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.direction)
    public var direction : FocusNavigationDirection {
        get { try! _default.get_Direction() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.focusstate)
    public var focusState : WinUI.FocusState {
        get { try! _default.get_FocusState() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.inputdevice)
    public var inputDevice : FocusInputDeviceKind {
        get { try! _default.get_InputDevice() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.newfocusedelement)
    public var newFocusedElement : WinUI.DependencyObject! {
        get { try! _default.get_NewFocusedElement() }
        set { try! _default.put_NewFocusedElement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.losingfocuseventargs.oldfocusedelement)
    public var oldFocusedElement : WinUI.DependencyObject! {
        get { try! _default.get_OldFocusedElement() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs)
public final class ManipulationCompletedRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IManipulationCompletedRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.container)
    public var container : WinUI.UIElement! {
        get { try! _default.get_Container() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.cumulative)
    public var cumulative : WinAppSDK.ManipulationDelta {
        get { try! _default.get_Cumulative() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.isinertial)
    public var isInertial : Bool {
        get { try! _default.get_IsInertial() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_Position() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationcompletedroutedeventargs.velocities)
    public var velocities : WinAppSDK.ManipulationVelocities {
        get { try! _default.get_Velocities() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs)
public final class ManipulationDeltaRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IManipulationDeltaRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.complete)
    public func complete() throws {
        try _default.Complete()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.container)
    public var container : WinUI.UIElement! {
        get { try! _default.get_Container() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.cumulative)
    public var cumulative : WinAppSDK.ManipulationDelta {
        get { try! _default.get_Cumulative() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.delta)
    public var delta : WinAppSDK.ManipulationDelta {
        get { try! _default.get_Delta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.isinertial)
    public var isInertial : Bool {
        get { try! _default.get_IsInertial() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_Position() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationdeltaroutedeventargs.velocities)
    public var velocities : WinAppSDK.ManipulationVelocities {
        get { try! _default.get_Velocities() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs)
public final class ManipulationInertiaStartingRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IManipulationInertiaStartingRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.container)
    public var container : WinUI.UIElement! {
        get { try! _default.get_Container() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.cumulative)
    public var cumulative : WinAppSDK.ManipulationDelta {
        get { try! _default.get_Cumulative() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.delta)
    public var delta : WinAppSDK.ManipulationDelta {
        get { try! _default.get_Delta() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.expansionbehavior)
    public var expansionBehavior : InertiaExpansionBehavior! {
        get { try! _default.get_ExpansionBehavior() }
        set { try! _default.put_ExpansionBehavior(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.rotationbehavior)
    public var rotationBehavior : InertiaRotationBehavior! {
        get { try! _default.get_RotationBehavior() }
        set { try! _default.put_RotationBehavior(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.translationbehavior)
    public var translationBehavior : InertiaTranslationBehavior! {
        get { try! _default.get_TranslationBehavior() }
        set { try! _default.put_TranslationBehavior(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationinertiastartingroutedeventargs.velocities)
    public var velocities : WinAppSDK.ManipulationVelocities {
        get { try! _default.get_Velocities() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationpivot)
public final class ManipulationPivot : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IManipulationPivot
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationPivot")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IManipulationPivotFactory: __ABI_Microsoft_UI_Xaml_Input.IManipulationPivotFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationPivot")
    public init(_ center: WindowsFoundation.Point, _ radius: Double) {
        super.init(try! Self._IManipulationPivotFactory.CreateInstanceWithCenterAndRadius(center, radius))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationpivot.center)
    public var center : WindowsFoundation.Point {
        get { try! _default.get_Center() }
        set { try! _default.put_Center(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationpivot.radius)
    public var radius : Double {
        get { try! _default.get_Radius() }
        set { try! _default.put_Radius(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs)
open class ManipulationStartedRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IManipulationStartedRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IManipulationStartedRoutedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Input.IManipulationStartedRoutedEventArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Input.ManipulationStartedRoutedEventArgsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IManipulationStartedRoutedEventArgsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs.complete)
    public func complete() throws {
        try _default.Complete()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs.container)
    public var container : WinUI.UIElement! {
        get { try! _default.get_Container() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs.cumulative)
    public var cumulative : WinAppSDK.ManipulationDelta {
        get { try! _default.get_Cumulative() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartedroutedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_Position() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartingroutedeventargs)
public final class ManipulationStartingRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IManipulationStartingRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartingroutedeventargs.container)
    public var container : WinUI.UIElement! {
        get { try! _default.get_Container() }
        set { try! _default.put_Container(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartingroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartingroutedeventargs.mode)
    public var mode : ManipulationModes {
        get { try! _default.get_Mode() }
        set { try! _default.put_Mode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.manipulationstartingroutedeventargs.pivot)
    public var pivot : ManipulationPivot! {
        get { try! _default.get_Pivot() }
        set { try! _default.put_Pivot(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.nofocuscandidatefoundeventargs)
public final class NoFocusCandidateFoundEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.INoFocusCandidateFoundEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.nofocuscandidatefoundeventargs.direction)
    public var direction : FocusNavigationDirection {
        get { try! _default.get_Direction() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.nofocuscandidatefoundeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.nofocuscandidatefoundeventargs.inputdevice)
    public var inputDevice : FocusInputDeviceKind {
        get { try! _default.get_InputDevice() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointer)
public final class Pointer : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IPointer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointer.isincontact)
    public var isInContact : Bool {
        get { try! _default.get_IsInContact() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointer.isinrange)
    public var isInRange : Bool {
        get { try! _default.get_IsInRange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointer.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointer.pointerid)
    public var pointerId : UInt32 {
        get { try! _default.get_PointerId() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs)
public final class PointerRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IPointerRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs.getcurrentpoint)
    public func getCurrentPoint(_ relativeTo: WinUI.UIElement!) throws -> WinAppSDK.PointerPoint! {
        try _default.GetCurrentPoint(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs.getintermediatepoints)
    public func getIntermediatePoints(_ relativeTo: WinUI.UIElement!) throws -> WindowsFoundation.AnyIVector<WinAppSDK.PointerPoint?>! {
        try _default.GetIntermediatePoints(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs.isgenerated)
    public var isGenerated : Bool {
        get { try! _default.get_IsGenerated() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs.keymodifiers)
    public var keyModifiers : UWP.VirtualKeyModifiers {
        get { try! _default.get_KeyModifiers() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.pointerroutedeventargs.pointer)
    public var pointer : Pointer! {
        get { try! _default.get_Pointer() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.processkeyboardacceleratoreventargs)
public final class ProcessKeyboardAcceleratorEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IProcessKeyboardAcceleratorEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.processkeyboardacceleratoreventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.processkeyboardacceleratoreventargs.key)
    public var key : UWP.VirtualKey {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.processkeyboardacceleratoreventargs.modifiers)
    public var modifiers : UWP.VirtualKeyModifiers {
        get { try! _default.get_Modifiers() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.righttappedroutedeventargs)
public final class RightTappedRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.IRightTappedRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.righttappedroutedeventargs.getposition)
    public func getPosition(_ relativeTo: WinUI.UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPosition(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.righttappedroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.righttappedroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.tappedroutedeventargs)
public final class TappedRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Input.ITappedRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Input.TappedRoutedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.tappedroutedeventargs.getposition)
    public func getPosition(_ relativeTo: WinUI.UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPosition(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.tappedroutedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.tappedroutedeventargs.pointerdevicetype)
    public var pointerDeviceType : WinAppSDK.PointerDeviceType {
        get { try! _default.get_PointerDeviceType() }
    }

    deinit {
        _default = nil
    }
}

public typealias DoubleTappedEventHandler = (Any?, DoubleTappedRoutedEventArgs?) throws -> ()
public typealias HoldingEventHandler = (Any?, HoldingRoutedEventArgs?) throws -> ()
public typealias KeyEventHandler = (Any?, KeyRoutedEventArgs?) throws -> ()
public typealias ManipulationCompletedEventHandler = (Any?, ManipulationCompletedRoutedEventArgs?) throws -> ()
public typealias ManipulationDeltaEventHandler = (Any?, ManipulationDeltaRoutedEventArgs?) throws -> ()
public typealias ManipulationInertiaStartingEventHandler = (Any?, ManipulationInertiaStartingRoutedEventArgs?) throws -> ()
public typealias ManipulationStartedEventHandler = (Any?, ManipulationStartedRoutedEventArgs?) throws -> ()
public typealias ManipulationStartingEventHandler = (Any?, ManipulationStartingRoutedEventArgs?) throws -> ()
public typealias PointerEventHandler = (Any?, PointerRoutedEventArgs?) throws -> ()
public typealias RightTappedEventHandler = (Any?, RightTappedRoutedEventArgs?) throws -> ()
public typealias TappedEventHandler = (Any?, TappedRoutedEventArgs?) throws -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand)
public protocol ICommand : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand.canexecute)
    func canExecute(_ parameter: Any!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand.execute)
    func execute(_ parameter: Any!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand.canexecutechanged)
    var canExecuteChanged: Event<EventHandler<Any?>> { get }
}

extension ICommand {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICommand = any ICommand

extension WinUI.FocusInputDeviceKind {
    public static var none : WinUI.FocusInputDeviceKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind_None
    }
    public static var mouse : WinUI.FocusInputDeviceKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind_Mouse
    }
    public static var touch : WinUI.FocusInputDeviceKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind_Touch
    }
    public static var pen : WinUI.FocusInputDeviceKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind_Pen
    }
    public static var keyboard : WinUI.FocusInputDeviceKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind_Keyboard
    }
    public static var gameController : WinUI.FocusInputDeviceKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind_GameController
    }
}
extension WinUI.FocusInputDeviceKind: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FocusNavigationDirection {
    public static var next : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_Next
    }
    public static var previous : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_Previous
    }
    public static var up : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_Up
    }
    public static var down : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_Down
    }
    public static var left : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_Left
    }
    public static var right : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_Right
    }
    public static var none : WinUI.FocusNavigationDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection_None
    }
}
extension WinUI.FocusNavigationDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.InputScopeNameValue {
    public static var `default` : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Default
    }
    public static var url : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Url
    }
    public static var emailSmtpAddress : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_EmailSmtpAddress
    }
    public static var personalFullName : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_PersonalFullName
    }
    public static var currencyAmountAndSymbol : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_CurrencyAmountAndSymbol
    }
    public static var currencyAmount : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_CurrencyAmount
    }
    public static var dateMonthNumber : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_DateMonthNumber
    }
    public static var dateDayNumber : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_DateDayNumber
    }
    public static var dateYear : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_DateYear
    }
    public static var digits : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Digits
    }
    public static var number : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Number
    }
    public static var password : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Password
    }
    public static var telephoneNumber : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneNumber
    }
    public static var telephoneCountryCode : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneCountryCode
    }
    public static var telephoneAreaCode : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneAreaCode
    }
    public static var telephoneLocalNumber : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneLocalNumber
    }
    public static var timeHour : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_TimeHour
    }
    public static var timeMinutesOrSeconds : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_TimeMinutesOrSeconds
    }
    public static var numberFullWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_NumberFullWidth
    }
    public static var alphanumericHalfWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_AlphanumericHalfWidth
    }
    public static var alphanumericFullWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_AlphanumericFullWidth
    }
    public static var hiragana : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Hiragana
    }
    public static var katakanaHalfWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_KatakanaHalfWidth
    }
    public static var katakanaFullWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_KatakanaFullWidth
    }
    public static var hanja : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Hanja
    }
    public static var hangulHalfWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_HangulHalfWidth
    }
    public static var hangulFullWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_HangulFullWidth
    }
    public static var search : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Search
    }
    public static var formula : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Formula
    }
    public static var searchIncremental : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_SearchIncremental
    }
    public static var chineseHalfWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_ChineseHalfWidth
    }
    public static var chineseFullWidth : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_ChineseFullWidth
    }
    public static var nativeScript : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_NativeScript
    }
    public static var text : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Text
    }
    public static var chat : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Chat
    }
    public static var nameOrPhoneNumber : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_NameOrPhoneNumber
    }
    public static var emailNameOrAddress : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_EmailNameOrAddress
    }
    public static var maps : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_Maps
    }
    public static var numericPassword : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_NumericPassword
    }
    public static var numericPin : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_NumericPin
    }
    public static var alphanumericPin : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_AlphanumericPin
    }
    public static var formulaNumber : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_FormulaNumber
    }
    public static var chatWithoutEmoji : WinUI.InputScopeNameValue {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue_ChatWithoutEmoji
    }
}
extension WinUI.InputScopeNameValue: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.KeyTipPlacementMode {
    public static var auto : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Auto
    }
    public static var bottom : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Bottom
    }
    public static var top : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Top
    }
    public static var left : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Left
    }
    public static var right : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Right
    }
    public static var center : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Center
    }
    public static var hidden : WinUI.KeyTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Hidden
    }
}
extension WinUI.KeyTipPlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.KeyboardAcceleratorPlacementMode {
    public static var auto : WinUI.KeyboardAcceleratorPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Auto
    }
    public static var hidden : WinUI.KeyboardAcceleratorPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Hidden
    }
}
extension WinUI.KeyboardAcceleratorPlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.KeyboardNavigationMode {
    public static var local : WinUI.KeyboardNavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Local
    }
    public static var cycle : WinUI.KeyboardNavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Cycle
    }
    public static var once : WinUI.KeyboardNavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Once
    }
}
extension WinUI.KeyboardNavigationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ManipulationModes {
    public static var none : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_None
    }
    public static var translateX : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateX
    }
    public static var translateY : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateY
    }
    public static var translateRailsX : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateRailsX
    }
    public static var translateRailsY : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateRailsY
    }
    public static var rotate : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_Rotate
    }
    public static var scale : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_Scale
    }
    public static var translateInertia : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateInertia
    }
    public static var rotateInertia : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_RotateInertia
    }
    public static var scaleInertia : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_ScaleInertia
    }
    public static var all : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_All
    }
    public static var system : WinUI.ManipulationModes {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_System
    }
}
extension WinUI.ManipulationModes: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.XYFocusKeyboardNavigationMode {
    public static var auto : WinUI.XYFocusKeyboardNavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Auto
    }
    public static var enabled : WinUI.XYFocusKeyboardNavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Enabled
    }
    public static var disabled : WinUI.XYFocusKeyboardNavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Disabled
    }
}
extension WinUI.XYFocusKeyboardNavigationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.XYFocusNavigationStrategy {
    public static var auto : WinUI.XYFocusNavigationStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto
    }
    public static var projection : WinUI.XYFocusNavigationStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Projection
    }
    public static var navigationDirectionDistance : WinUI.XYFocusNavigationStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_NavigationDirectionDistance
    }
    public static var rectilinearDistance : WinUI.XYFocusNavigationStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_RectilinearDistance
    }
}
extension WinUI.XYFocusNavigationStrategy: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.XYFocusNavigationStrategyOverride {
    public static var none : WinUI.XYFocusNavigationStrategyOverride {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_None
    }
    public static var auto : WinUI.XYFocusNavigationStrategyOverride {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_Auto
    }
    public static var projection : WinUI.XYFocusNavigationStrategyOverride {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_Projection
    }
    public static var navigationDirectionDistance : WinUI.XYFocusNavigationStrategyOverride {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_NavigationDirectionDistance
    }
    public static var rectilinearDistance : WinUI.XYFocusNavigationStrategyOverride {
        __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_RectilinearDistance
    }
}
extension WinUI.XYFocusNavigationStrategyOverride: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

