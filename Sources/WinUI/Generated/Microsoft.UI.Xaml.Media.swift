// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brushmappingmode)
public typealias BrushMappingMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.colorinterpolationmode)
public typealias ColorInterpolationMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.elementcompositemode)
public typealias ElementCompositeMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fastplayfallbackbehaviour)
public typealias FastPlayFallbackBehaviour = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fillrule)
public typealias FillRule = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFillRule
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientspreadmethod)
public typealias GradientSpreadMethod = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.penlinecap)
public typealias PenLineCap = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.penlinejoin)
public typealias PenLineJoin = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.stretch)
public typealias Stretch = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush)
open class AcrylicBrush : WinUI.XamlCompositionBrushBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIAcrylicBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAcrylicBrushFactory : __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrushFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.AcrylicBrush")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.AcrylicBrushBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAcrylicBrushFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IAcrylicBrushStatics: __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrushStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.AcrylicBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.alwaysusefallbackproperty)
    public class var alwaysUseFallbackProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_AlwaysUseFallbackProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintcolorproperty)
    public class var tintColorProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_TintColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintopacityproperty)
    public class var tintOpacityProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_TintOpacityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tinttransitiondurationproperty)
    public class var tintTransitionDurationProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_TintTransitionDurationProperty() }
    }

    private static let _IAcrylicBrushStatics2: __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrushStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.AcrylicBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintluminosityopacityproperty)
    public class var tintLuminosityOpacityProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics2.get_TintLuminosityOpacityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.alwaysusefallback)
    public var alwaysUseFallback : Bool {
        get { try! _default.get_AlwaysUseFallback() }
        set { try! _default.put_AlwaysUseFallback(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintcolor)
    public var tintColor : UWP.Color {
        get { try! _default.get_TintColor() }
        set { try! _default.put_TintColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintopacity)
    public var tintOpacity : Double {
        get { try! _default.get_TintOpacity() }
        set { try! _default.put_TintOpacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tinttransitionduration)
    public var tintTransitionDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_TintTransitionDuration() }
        set { try! _default.put_TintTransitionDuration(newValue) }
    }

    private lazy var _IAcrylicBrush2: __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrush2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintluminosityopacity)
    public var tintLuminosityOpacity : Double? {
        get { try! _IAcrylicBrush2.get_TintLuminosityOpacity() }
        set { try! _IAcrylicBrush2.put_TintLuminosityOpacity(newValue) }
    }

    deinit {
        _default = nil
        _IAcrylicBrush2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush)
open class Brush : WinUI.DependencyObject, WinAppSDK.IAnimationObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IBrushOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IBrushOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IBrushFactory : __ABI_Microsoft_UI_Xaml_Media.IBrushFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Brush")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.BrushBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBrushFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBrushStatics: __ABI_Microsoft_UI_Xaml_Media.IBrushStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Brush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.opacityproperty)
    public class var opacityProperty : WinUI.DependencyProperty! {
        get { try! _IBrushStatics.get_OpacityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.relativetransformproperty)
    public class var relativeTransformProperty : WinUI.DependencyProperty! {
        get { try! _IBrushStatics.get_RelativeTransformProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.transformproperty)
    public class var transformProperty : WinUI.DependencyProperty! {
        get { try! _IBrushStatics.get_TransformProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.opacity)
    public var opacity : Double {
        get { try! _default.get_Opacity() }
        set { try! _default.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.relativetransform)
    public var relativeTransform : Transform! {
        get { try! _default.get_RelativeTransform() }
        set { try! _default.put_RelativeTransform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.transform)
    public var transform : Transform! {
        get { try! _default.get_Transform() }
        set { try! _default.put_Transform(newValue) }
    }

    private lazy var _IBrushOverrides: __ABI_Microsoft_UI_Xaml_Media.IBrushOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.populatepropertyinfooverride)
    open func populatePropertyInfoOverride(_ propertyName: String, _ animationPropertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IBrushOverrides.PopulatePropertyInfoOverride(propertyName, animationPropertyInfo)
    }

    private lazy var _IAnimationObject: __ABI_Microsoft_UI_Composition.IAnimationObject! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.populatepropertyinfo)
    public func populatePropertyInfo(_ propertyName: String, _ propertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IAnimationObject.PopulatePropertyInfo(propertyName, propertyInfo)
    }

    deinit {
        _default = nil
        _IBrushOverrides = nil
        _IAnimationObject = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.cachemode)
open class CacheMode : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICacheMode
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICacheMode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICacheModeFactory : __ABI_Microsoft_UI_Xaml_Media.ICacheModeFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.CacheMode")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.CacheModeBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICacheModeFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform)
public final class CompositeTransform : WinUI.Transform {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICompositeTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositeTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.CompositeTransform")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICompositeTransformStatics: __ABI_Microsoft_UI_Xaml_Media.ICompositeTransformStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.CompositeTransform")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centerxproperty)
    public static var centerXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_CenterXProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centeryproperty)
    public static var centerYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_CenterYProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.rotationproperty)
    public static var rotationProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_RotationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scalexproperty)
    public static var scaleXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_ScaleXProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scaleyproperty)
    public static var scaleYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_ScaleYProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewxproperty)
    public static var skewXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_SkewXProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewyproperty)
    public static var skewYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_SkewYProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translatexproperty)
    public static var translateXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_TranslateXProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translateyproperty)
    public static var translateYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_TranslateYProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centerx)
    public var centerX : Double {
        get { try! _default.get_CenterX() }
        set { try! _default.put_CenterX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centery)
    public var centerY : Double {
        get { try! _default.get_CenterY() }
        set { try! _default.put_CenterY(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.rotation)
    public var rotation : Double {
        get { try! _default.get_Rotation() }
        set { try! _default.put_Rotation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scalex)
    public var scaleX : Double {
        get { try! _default.get_ScaleX() }
        set { try! _default.put_ScaleX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scaley)
    public var scaleY : Double {
        get { try! _default.get_ScaleY() }
        set { try! _default.put_ScaleY(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewx)
    public var skewX : Double {
        get { try! _default.get_SkewX() }
        set { try! _default.put_SkewX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewy)
    public var skewY : Double {
        get { try! _default.get_SkewY() }
        set { try! _default.put_SkewY(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translatex)
    public var translateX : Double {
        get { try! _default.get_TranslateX() }
        set { try! _default.put_TranslateX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translatey)
    public var translateY : Double {
        get { try! _default.get_TranslateY() }
        set { try! _default.put_TranslateY(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget)
public final class CompositionTarget : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICompositionTarget
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositionTarget
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICompositionTargetStatics: __ABI_Microsoft_UI_Xaml_Media.ICompositionTargetStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.CompositionTarget")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.getcompositorforcurrentthread)
    public static func getCompositorForCurrentThread() throws -> WinAppSDK.Compositor! {
        return try _ICompositionTargetStatics.GetCompositorForCurrentThread()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.rendered)
    public static var rendered : Event<EventHandler<RenderedEventArgs?>> = {
      .init(
        add: { try! _ICompositionTargetStatics.add_Rendered($0) },
        remove: { try? _ICompositionTargetStatics.remove_Rendered($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.rendering)
    public static var rendering : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ICompositionTargetStatics.add_Rendering($0) },
        remove: { try? _ICompositionTargetStatics.remove_Rendering($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.surfacecontentslost)
    public static var surfaceContentsLost : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ICompositionTargetStatics.add_SurfaceContentsLost($0) },
        remove: { try? _ICompositionTargetStatics.remove_SurfaceContentsLost($0) }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection)
public final class DoubleCollection : WinRTClass, IVector, IIterable {
    public typealias T = Double
    private typealias SwiftABI = WinUI.IVectorDouble
    private typealias CABI = __x_ABI_C__FIVector_1_double
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.DoubleCollection")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.getat)
    public func getAt(_ index: UInt32) -> Double {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Double>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.indexof)
    public func indexOf(_ value: Double, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.setat)
    public func setAt(_ index: UInt32, _ value: Double) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Double) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.append)
    public func append(_ value: Double) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [Double]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.replaceall)
    public func replaceAll(_ items: [Double]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableDouble! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Double>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fontfamily)
open class FontFamily : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IFontFamily
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFontFamilyFactory : __ABI_Microsoft_UI_Xaml_Media.IFontFamilyFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.FontFamily")

    public init(_ familyName: String) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Media.FontFamilyBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IFontFamilyFactory.CreateInstanceWithName(familyName, baseInterface, &innerInterface)
        }
    }

    private static let _IFontFamilyStatics: __ABI_Microsoft_UI_Xaml_Media.IFontFamilyStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.FontFamily")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fontfamily.xamlautofontfamily)
    public class var xamlAutoFontFamily : FontFamily! {
        get { try! _IFontFamilyStatics.get_XamlAutoFontFamily() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fontfamily.source)
    public var source : String {
        get { try! _default.get_Source() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform)
open class GeneralTransform : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IGeneralTransformFactory : __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GeneralTransform")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.GeneralTransformBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGeneralTransformFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.transformpoint)
    public func transformPoint(_ point: WindowsFoundation.Point) throws -> WindowsFoundation.Point {
        try _default.TransformPoint(point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.trytransform)
    public func tryTransform(_ inPoint: WindowsFoundation.Point, _ outPoint: inout WindowsFoundation.Point) throws -> Bool {
        try _default.TryTransform(inPoint, &outPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.transformbounds)
    public func transformBounds(_ rect: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _default.TransformBounds(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.inverse)
    public var inverse : GeneralTransform! {
        get { try! _default.get_Inverse() }
    }

    private lazy var _IGeneralTransformOverrides: __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.trytransformcore)
    open func tryTransformCore(_ inPoint: WindowsFoundation.Point, _ outPoint: inout WindowsFoundation.Point) throws -> Bool {
        try _IGeneralTransformOverrides.TryTransformCore(inPoint, &outPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.transformboundscore)
    open func transformBoundsCore(_ rect: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _IGeneralTransformOverrides.TransformBoundsCore(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.inversecore)
    open var inverseCore : GeneralTransform! {
        get { try! _IGeneralTransformOverrides.get_InverseCore() }
    }

    deinit {
        _default = nil
        _IGeneralTransformOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry)
open class Geometry : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGeometryFactory : __ABI_Microsoft_UI_Xaml_Media.IGeometryFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Geometry")

    private static let _IGeometryStatics: __ABI_Microsoft_UI_Xaml_Media.IGeometryStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Geometry")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.empty)
    public class var empty : Geometry! {
        get { try! _IGeometryStatics.get_Empty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.standardflatteningtolerance)
    public class var standardFlatteningTolerance : Double {
        get { try! _IGeometryStatics.get_StandardFlatteningTolerance() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.transformproperty)
    public class var transformProperty : WinUI.DependencyProperty! {
        get { try! _IGeometryStatics.get_TransformProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.transform)
    public var transform : Transform! {
        get { try! _default.get_Transform() }
        set { try! _default.put_Transform(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush)
open class GradientBrush : WinUI.Brush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGradientBrushFactory : __ABI_Microsoft_UI_Xaml_Media.IGradientBrushFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientBrush")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.GradientBrushBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGradientBrushFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IGradientBrushStatics: __ABI_Microsoft_UI_Xaml_Media.IGradientBrushStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.colorinterpolationmodeproperty)
    public class var colorInterpolationModeProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_ColorInterpolationModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.gradientstopsproperty)
    public class var gradientStopsProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_GradientStopsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.mappingmodeproperty)
    public class var mappingModeProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_MappingModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.spreadmethodproperty)
    public class var spreadMethodProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_SpreadMethodProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.colorinterpolationmode)
    public var colorInterpolationMode : ColorInterpolationMode {
        get { try! _default.get_ColorInterpolationMode() }
        set { try! _default.put_ColorInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.gradientstops)
    public var gradientStops : GradientStopCollection! {
        get { try! _default.get_GradientStops() }
        set { try! _default.put_GradientStops(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.mappingmode)
    public var mappingMode : BrushMappingMode {
        get { try! _default.get_MappingMode() }
        set { try! _default.put_MappingMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.spreadmethod)
    public var spreadMethod : GradientSpreadMethod {
        get { try! _default.get_SpreadMethod() }
        set { try! _default.put_SpreadMethod(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop)
public final class GradientStop : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGradientStop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientStop")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IGradientStopStatics: __ABI_Microsoft_UI_Xaml_Media.IGradientStopStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientStop")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.colorproperty)
    public static var colorProperty : WinUI.DependencyProperty! {
        get { try! _IGradientStopStatics.get_ColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.offsetproperty)
    public static var offsetProperty : WinUI.DependencyProperty! {
        get { try! _IGradientStopStatics.get_OffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.offset)
    public var offset : Double {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection)
public final class GradientStopCollection : WinRTClass, IVector, IIterable {
    public typealias T = GradientStop?
    private typealias SwiftABI = WinUI.IVectorGradientStop
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CGradientStop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientStopCollection")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.getat)
    public func getAt(_ index: UInt32) -> GradientStop? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<GradientStop?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.indexof)
    public func indexOf(_ value: GradientStop?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.setat)
    public func setAt(_ index: UInt32, _ value: GradientStop?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: GradientStop?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.append)
    public func append(_ value: GradientStop?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [GradientStop?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.replaceall)
    public func replaceAll(_ items: [GradientStop?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<GradientStop?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imagesource)
open class ImageSource : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IImageSourceFactory : __ABI_Microsoft_UI_Xaml_Media.IImageSourceFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.ImageSource")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.linesegment)
public final class LineSegment : WinUI.PathSegment {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ILineSegment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILineSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.LineSegment")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ILineSegmentStatics: __ABI_Microsoft_UI_Xaml_Media.ILineSegmentStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.LineSegment")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.linesegment.pointproperty)
    public static var pointProperty : WinUI.DependencyProperty! {
        get { try! _ILineSegmentStatics.get_PointProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.linesegment.point)
    public var point : WindowsFoundation.Point {
        get { try! _default.get_Point() }
        set { try! _default.put_Point(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush)
public final class LinearGradientBrush : WinUI.GradientBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.LinearGradientBrush")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ILinearGradientBrushFactory: __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrushFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.LinearGradientBrush")
    public init(_ gradientStopCollection: GradientStopCollection!, _ angle: Double) {
        super.init(fromAbi: try! Self._ILinearGradientBrushFactory.CreateInstanceWithGradientStopCollectionAndAngle(gradientStopCollection, angle))
    }

    private static let _ILinearGradientBrushStatics: __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrushStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.LinearGradientBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.endpointproperty)
    public static var endPointProperty : WinUI.DependencyProperty! {
        get { try! _ILinearGradientBrushStatics.get_EndPointProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.startpointproperty)
    public static var startPointProperty : WinUI.DependencyProperty! {
        get { try! _ILinearGradientBrushStatics.get_StartPointProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.endpoint)
    public var endPoint : WindowsFoundation.Point {
        get { try! _default.get_EndPoint() }
        set { try! _default.put_EndPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.startpoint)
    public var startPoint : WindowsFoundation.Point {
        get { try! _default.get_StartPoint() }
        set { try! _default.put_StartPoint(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.mediatransportcontrolsthumbnailrequestedeventargs)
public final class MediaTransportControlsThumbnailRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IMediaTransportControlsThumbnailRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMediaTransportControlsThumbnailRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.mediatransportcontrolsthumbnailrequestedeventargs.setthumbnailimage)
    public func setThumbnailImage(_ source: UWP.AnyIInputStream!) throws {
        try _default.SetThumbnailImage(source)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.mediatransportcontrolsthumbnailrequestedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.micabackdrop)
open class MicaBackdrop : WinUI.SystemBackdrop {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IMicaBackdrop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMicaBackdrop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMicaBackdropFactory : __ABI_Microsoft_UI_Xaml_Media.IMicaBackdropFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.MicaBackdrop")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.MicaBackdropBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMicaBackdropFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMicaBackdropStatics: __ABI_Microsoft_UI_Xaml_Media.IMicaBackdropStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.MicaBackdrop")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.micabackdrop.kindproperty)
    public class var kindProperty : WinUI.DependencyProperty! {
        get { try! _IMicaBackdropStatics.get_KindProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.micabackdrop.kind)
    public var kind : WinAppSDK.MicaKind {
        get { try! _default.get_Kind() }
        set { try! _default.put_Kind(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure)
public final class PathFigure : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathFigure
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathFigure
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathFigure")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IPathFigureStatics: __ABI_Microsoft_UI_Xaml_Media.IPathFigureStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathFigure")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isclosedproperty)
    public static var isClosedProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_IsClosedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isfilledproperty)
    public static var isFilledProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_IsFilledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.segmentsproperty)
    public static var segmentsProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_SegmentsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.startpointproperty)
    public static var startPointProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_StartPointProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isclosed)
    public var isClosed : Bool {
        get { try! _default.get_IsClosed() }
        set { try! _default.put_IsClosed(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isfilled)
    public var isFilled : Bool {
        get { try! _default.get_IsFilled() }
        set { try! _default.put_IsFilled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.segments)
    public var segments : PathSegmentCollection! {
        get { try! _default.get_Segments() }
        set { try! _default.put_Segments(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.startpoint)
    public var startPoint : WindowsFoundation.Point {
        get { try! _default.get_StartPoint() }
        set { try! _default.put_StartPoint(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection)
public final class PathFigureCollection : WinRTClass, IVector, IIterable {
    public typealias T = PathFigure?
    private typealias SwiftABI = WinUI.IVectorPathFigure
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CPathFigure
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathFigureCollection")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.getat)
    public func getAt(_ index: UInt32) -> PathFigure? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<PathFigure?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.indexof)
    public func indexOf(_ value: PathFigure?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.setat)
    public func setAt(_ index: UInt32, _ value: PathFigure?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: PathFigure?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.append)
    public func append(_ value: PathFigure?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [PathFigure?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.replaceall)
    public func replaceAll(_ items: [PathFigure?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePathFigure! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<PathFigure?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry)
public final class PathGeometry : WinUI.Geometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathGeometry")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IPathGeometryStatics: __ABI_Microsoft_UI_Xaml_Media.IPathGeometryStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathGeometry")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.figuresproperty)
    public static var figuresProperty : WinUI.DependencyProperty! {
        get { try! _IPathGeometryStatics.get_FiguresProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.fillruleproperty)
    public static var fillRuleProperty : WinUI.DependencyProperty! {
        get { try! _IPathGeometryStatics.get_FillRuleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.figures)
    public var figures : PathFigureCollection! {
        get { try! _default.get_Figures() }
        set { try! _default.put_Figures(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.fillrule)
    public var fillRule : FillRule {
        get { try! _default.get_FillRule() }
        set { try! _default.put_FillRule(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegment)
open class PathSegment : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathSegment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPathSegmentFactory : __ABI_Microsoft_UI_Xaml_Media.IPathSegmentFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathSegment")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection)
public final class PathSegmentCollection : WinRTClass, IVector, IIterable {
    public typealias T = PathSegment?
    private typealias SwiftABI = WinUI.IVectorPathSegment
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CPathSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PathSegmentCollection")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.getat)
    public func getAt(_ index: UInt32) -> PathSegment? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<PathSegment?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.indexof)
    public func indexOf(_ value: PathSegment?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.setat)
    public func setAt(_ index: UInt32, _ value: PathSegment?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: PathSegment?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.append)
    public func append(_ value: PathSegment?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [PathSegment?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.replaceall)
    public func replaceAll(_ items: [PathSegment?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePathSegment! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<PathSegment?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection)
public final class PointCollection : WinRTClass, IVector, IIterable {
    public typealias T = WindowsFoundation.Point
    private typealias SwiftABI = WinUI.IVectorPoint
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PointCollection")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.getat)
    public func getAt(_ index: UInt32) -> WindowsFoundation.Point {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<WindowsFoundation.Point>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.indexof)
    public func indexOf(_ value: WindowsFoundation.Point, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.setat)
    public func setAt(_ index: UInt32, _ value: WindowsFoundation.Point) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: WindowsFoundation.Point) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.append)
    public func append(_ value: WindowsFoundation.Point) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.Point]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.replaceall)
    public func replaceAll(_ items: [WindowsFoundation.Point]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePoint! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.Point>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.polybeziersegment)
public final class PolyBezierSegment : WinUI.PathSegment {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPolyBezierSegment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPolyBezierSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PolyBezierSegment")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IPolyBezierSegmentStatics: __ABI_Microsoft_UI_Xaml_Media.IPolyBezierSegmentStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.PolyBezierSegment")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.polybeziersegment.pointsproperty)
    public static var pointsProperty : WinUI.DependencyProperty! {
        get { try! _IPolyBezierSegmentStatics.get_PointsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.polybeziersegment.points)
    public var points : PointCollection! {
        get { try! _default.get_Points() }
        set { try! _default.put_Points(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.projection)
open class Projection : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IProjection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIProjection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProjectionFactory : __ABI_Microsoft_UI_Xaml_Media.IProjectionFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Projection")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.ProjectionBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IProjectionFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.rectanglegeometry)
public final class RectangleGeometry : WinUI.Geometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IRectangleGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.RectangleGeometry")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IRectangleGeometryStatics: __ABI_Microsoft_UI_Xaml_Media.IRectangleGeometryStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.RectangleGeometry")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.rectanglegeometry.rectproperty)
    public static var rectProperty : WinUI.DependencyProperty! {
        get { try! _IRectangleGeometryStatics.get_RectProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.rectanglegeometry.rect)
    public var rect : WindowsFoundation.Rect {
        get { try! _default.get_Rect() }
        set { try! _default.put_Rect(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.renderedeventargs)
public final class RenderedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IRenderedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIRenderedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.renderedeventargs.frameduration)
    public var frameDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_FrameDuration() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.shadow)
open class Shadow : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IShadowFactory : __ABI_Microsoft_UI_Xaml_Media.IShadowFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Shadow")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.solidcolorbrush)
public final class SolidColorBrush : WinUI.Brush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ISolidColorBrushFactory: __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrushFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush")
    public init(_ color: UWP.Color) {
        super.init(fromAbi: try! Self._ISolidColorBrushFactory.CreateInstanceWithColor(color))
    }

    private static let _ISolidColorBrushStatics: __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrushStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.solidcolorbrush.colorproperty)
    public static var colorProperty : WinUI.DependencyProperty! {
        get { try! _ISolidColorBrushStatics.get_ColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.solidcolorbrush.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop)
open class SystemBackdrop : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdrop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISystemBackdrop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ISystemBackdropFactory : __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.SystemBackdrop")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.SystemBackdropBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISystemBackdropFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.getdefaultsystembackdropconfiguration)
    public func getDefaultSystemBackdropConfiguration(_ target: WinAppSDK.AnyICompositionSupportsSystemBackdrop!, _ xamlRoot: WinUI.XamlRoot!) throws -> WinAppSDK.SystemBackdropConfiguration! {
        try _default.GetDefaultSystemBackdropConfiguration(target, xamlRoot)
    }

    private lazy var _ISystemBackdropOverrides: __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.ontargetconnected)
    open func onTargetConnected(_ connectedTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!, _ xamlRoot: WinUI.XamlRoot!) throws {
        try _ISystemBackdropOverrides.OnTargetConnected(connectedTarget, xamlRoot)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.ontargetdisconnected)
    open func onTargetDisconnected(_ disconnectedTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws {
        try _ISystemBackdropOverrides.OnTargetDisconnected(disconnectedTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.ondefaultsystembackdropconfigurationchanged)
    open func onDefaultSystemBackdropConfigurationChanged(_ target: WinAppSDK.AnyICompositionSupportsSystemBackdrop!, _ xamlRoot: WinUI.XamlRoot!) throws {
        try _ISystemBackdropOverrides.OnDefaultSystemBackdropConfigurationChanged(target, xamlRoot)
    }

    deinit {
        _default = nil
        _ISystemBackdropOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.themeshadow)
open class ThemeShadow : WinUI.Shadow {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IThemeShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIThemeShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IThemeShadowFactory : __ABI_Microsoft_UI_Xaml_Media.IThemeShadowFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.ThemeShadow")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.ThemeShadowBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IThemeShadowFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.themeshadow.receivers)
    public var receivers : WinUI.UIElementWeakCollection! {
        get { try! _default.get_Receivers() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.transform)
open class Transform : WinUI.GeneralTransform {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ITransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITransformFactory : __ABI_Microsoft_UI_Xaml_Media.ITransformFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Transform")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform)
public final class TranslateTransform : WinUI.Transform {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ITranslateTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITranslateTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.TranslateTransform")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ITranslateTransformStatics: __ABI_Microsoft_UI_Xaml_Media.ITranslateTransformStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.TranslateTransform")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.xproperty)
    public static var xproperty : WinUI.DependencyProperty! {
        get { try! _ITranslateTransformStatics.get_XProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.yproperty)
    public static var yproperty : WinUI.DependencyProperty! {
        get { try! _ITranslateTransformStatics.get_YProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.x)
    public var x : Double {
        get { try! _default.get_X() }
        set { try! _default.put_X(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.y)
    public var y : Double {
        get { try! _default.get_Y() }
        set { try! _default.put_Y(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper)
public final class VisualTreeHelper : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IVisualTreeHelper
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIVisualTreeHelper
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IVisualTreeHelperStatics: __ABI_Microsoft_UI_Xaml_Media.IVisualTreeHelperStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.VisualTreeHelper")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingPoint: WindowsFoundation.Point, _ subtree: WinUI.UIElement!) throws -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try _IVisualTreeHelperStatics.FindElementsInHostCoordinatesPoint(intersectingPoint, subtree)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingRect: WindowsFoundation.Rect, _ subtree: WinUI.UIElement!) throws -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try _IVisualTreeHelperStatics.FindElementsInHostCoordinatesRect(intersectingRect, subtree)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingPoint: WindowsFoundation.Point, _ subtree: WinUI.UIElement!, _ includeAllElements: Bool) throws -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try _IVisualTreeHelperStatics.FindAllElementsInHostCoordinatesPoint(intersectingPoint, subtree, includeAllElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingRect: WindowsFoundation.Rect, _ subtree: WinUI.UIElement!, _ includeAllElements: Bool) throws -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try _IVisualTreeHelperStatics.FindAllElementsInHostCoordinatesRect(intersectingRect, subtree, includeAllElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getchild)
    public static func getChild(_ reference: WinUI.DependencyObject!, _ childIndex: Int32) throws -> WinUI.DependencyObject! {
        return try _IVisualTreeHelperStatics.GetChild(reference, childIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getchildrencount)
    public static func getChildrenCount(_ reference: WinUI.DependencyObject!) throws -> Int32 {
        return try _IVisualTreeHelperStatics.GetChildrenCount(reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getparent)
    public static func getParent(_ reference: WinUI.DependencyObject!) throws -> WinUI.DependencyObject! {
        return try _IVisualTreeHelperStatics.GetParent(reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.disconnectchildrenrecursive)
    public static func disconnectChildrenRecursive(_ element: WinUI.UIElement!) throws {
        try _IVisualTreeHelperStatics.DisconnectChildrenRecursive(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getopenpopups)
    public static func getOpenPopups(_ window: WinUI.Window!) throws -> WindowsFoundation.AnyIVectorView<WinUI.Popup?>! {
        return try _IVisualTreeHelperStatics.GetOpenPopups(window)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getopenpopupsforxamlroot)
    public static func getOpenPopupsForXamlRoot(_ xamlRoot: WinUI.XamlRoot!) throws -> WindowsFoundation.AnyIVectorView<WinUI.Popup?>! {
        return try _IVisualTreeHelperStatics.GetOpenPopupsForXamlRoot(xamlRoot)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase)
open class XamlCompositionBrushBase : WinUI.Brush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlCompositionBrushBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IXamlCompositionBrushBaseFactory : __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.XamlCompositionBrushBase")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.XamlCompositionBrushBaseBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IXamlCompositionBrushBaseFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IXamlCompositionBrushBaseStatics: __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.XamlCompositionBrushBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.fallbackcolorproperty)
    public class var fallbackColorProperty : WinUI.DependencyProperty! {
        get { try! _IXamlCompositionBrushBaseStatics.get_FallbackColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.fallbackcolor)
    public var fallbackColor : UWP.Color {
        get { try! _default.get_FallbackColor() }
        set { try! _default.put_FallbackColor(newValue) }
    }

    private lazy var _IXamlCompositionBrushBaseProtected: __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.compositionbrush)
    public var compositionBrush : WinAppSDK.CompositionBrush! {
        get { try! _IXamlCompositionBrushBaseProtected.get_CompositionBrush() }
        set { try! _IXamlCompositionBrushBaseProtected.put_CompositionBrush(newValue) }
    }

    private lazy var _IXamlCompositionBrushBaseOverrides: __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.onconnected)
    open func onConnected() throws {
        try _IXamlCompositionBrushBaseOverrides.OnConnected()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.ondisconnected)
    open func onDisconnected() throws {
        try _IXamlCompositionBrushBaseOverrides.OnDisconnected()
    }

    deinit {
        _default = nil
        _IXamlCompositionBrushBaseProtected = nil
        _IXamlCompositionBrushBaseOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight)
open class XamlLight : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IXamlLightFactory : __ABI_Microsoft_UI_Xaml_Media.IXamlLightFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.XamlLight")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Media.XamlLightBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IXamlLightFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IXamlLightStatics: __ABI_Microsoft_UI_Xaml_Media.IXamlLightStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.XamlLight")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.addtargetelement)
    public class func addTargetElement(_ lightId: String, _ element: WinUI.UIElement!) throws {
        try _IXamlLightStatics.AddTargetElement(lightId, element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.removetargetelement)
    public class func removeTargetElement(_ lightId: String, _ element: WinUI.UIElement!) throws {
        try _IXamlLightStatics.RemoveTargetElement(lightId, element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.addtargetbrush)
    public class func addTargetBrush(_ lightId: String, _ brush: Brush!) throws {
        try _IXamlLightStatics.AddTargetBrush(lightId, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.removetargetbrush)
    public class func removeTargetBrush(_ lightId: String, _ brush: Brush!) throws {
        try _IXamlLightStatics.RemoveTargetBrush(lightId, brush)
    }

    private lazy var _IXamlLightProtected: __ABI_Microsoft_UI_Xaml_Media.IXamlLightProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.compositionlight)
    public var compositionLight : WinAppSDK.CompositionLight! {
        get { try! _IXamlLightProtected.get_CompositionLight() }
        set { try! _IXamlLightProtected.put_CompositionLight(newValue) }
    }

    private lazy var _IXamlLightOverrides: __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.getid)
    open func getId() throws -> String {
        try _IXamlLightOverrides.GetId()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.onconnected)
    open func onConnected(_ newElement: WinUI.UIElement!) throws {
        try _IXamlLightOverrides.OnConnected(newElement)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.ondisconnected)
    open func onDisconnected(_ oldElement: WinUI.UIElement!) throws {
        try _IXamlLightOverrides.OnDisconnected(oldElement)
    }

    deinit {
        _default = nil
        _IXamlLightProtected = nil
        _IXamlLightOverrides = nil
    }
}

extension WinUI.BrushMappingMode {
    public static var absolute : WinUI.BrushMappingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_Absolute
    }
    public static var relativeToBoundingBox : WinUI.BrushMappingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_RelativeToBoundingBox
    }
}
extension WinUI.BrushMappingMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ColorInterpolationMode {
    public static var scRgbLinearInterpolation : WinUI.ColorInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_ScRgbLinearInterpolation
    }
    public static var srgbLinearInterpolation : WinUI.ColorInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_SRgbLinearInterpolation
    }
}
extension WinUI.ColorInterpolationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ElementCompositeMode {
    public static var inherit : WinUI.ElementCompositeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_Inherit
    }
    public static var sourceOver : WinUI.ElementCompositeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_SourceOver
    }
    public static var minBlend : WinUI.ElementCompositeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_MinBlend
    }
}
extension WinUI.ElementCompositeMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FastPlayFallbackBehaviour {
    public static var skip : WinUI.FastPlayFallbackBehaviour {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour_Skip
    }
    public static var hide : WinUI.FastPlayFallbackBehaviour {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour_Hide
    }
    public static var disable : WinUI.FastPlayFallbackBehaviour {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour_Disable
    }
}
extension WinUI.FastPlayFallbackBehaviour: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.FillRule {
    public static var evenOdd : WinUI.FillRule {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFillRule_EvenOdd
    }
    public static var nonzero : WinUI.FillRule {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFillRule_Nonzero
    }
}
extension WinUI.FillRule: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.GradientSpreadMethod {
    public static var pad : WinUI.GradientSpreadMethod {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Pad
    }
    public static var reflect : WinUI.GradientSpreadMethod {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Reflect
    }
    public static var `repeat` : WinUI.GradientSpreadMethod {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Repeat
    }
}
extension WinUI.GradientSpreadMethod: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PenLineCap {
    public static var flat : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Flat
    }
    public static var square : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Square
    }
    public static var round : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Round
    }
    public static var triangle : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Triangle
    }
}
extension WinUI.PenLineCap: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PenLineJoin {
    public static var miter : WinUI.PenLineJoin {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin_Miter
    }
    public static var bevel : WinUI.PenLineJoin {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin_Bevel
    }
    public static var round : WinUI.PenLineJoin {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin_Round
    }
}
extension WinUI.PenLineJoin: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.Stretch {
    public static var none : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_None
    }
    public static var fill : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_Fill
    }
    public static var uniform : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_Uniform
    }
    public static var uniformToFill : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_UniformToFill
    }
}
extension WinUI.Stretch: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

