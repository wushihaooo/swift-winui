// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarcloseddisplaymode)
public typealias AppBarClosedDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestionboxtextchangereason)
public typealias AutoSuggestionBoxTextChangeReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.backgroundsizing)
public typealias BackgroundSizing = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowalignment)
public typealias CandidateWindowAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.charactercasing)
public typealias CharacterCasing = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.clickmode)
public typealias ClickMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxselectionchangedtrigger)
public typealias ComboBoxSelectionChangedTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbutton)
public typealias ContentDialogButton = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogplacement)
public typealias ContentDialogPlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogresult)
public typealias ContentDialogResult = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.elementrealizationoptions)
public typealias ElementRealizationOptions = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.incrementalloadingtrigger)
public typealias IncrementalLoadingTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.indexbasedlayoutorientation)
public typealias IndexBasedLayoutOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosereason)
public typealias InfoBarCloseReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarseverity)
public typealias InfoBarSeverity = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionoperation)
public typealias ItemCollectionTransitionOperation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitiontriggers)
public typealias ItemCollectionTransitionTriggers = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.lightdismissoverlaymode)
public typealias LightDismissOverlayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewreordermode)
public typealias ListViewReorderMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewselectionmode)
public typealias ListViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewbackbuttonvisible)
public typealias NavigationViewBackButtonVisible = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymode)
public typealias NavigationViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewoverflowlabelmode)
public typealias NavigationViewOverflowLabelMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpanedisplaymode)
public typealias NavigationViewPaneDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionfollowsfocus)
public typealias NavigationViewSelectionFollowsFocus = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewshouldernavigationenabled)
public typealias NavigationViewShoulderNavigationEnabled = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.orientation)
public typealias Orientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panelscrollingdirection)
public typealias PanelScrollingDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordrevealmode)
public typealias PasswordRevealMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagerbuttonvisibility)
public typealias PipsPagerButtonVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagerwrapmode)
public typealias PipsPagerWrapMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerWrapMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshpulldirection)
public typealias RefreshPullDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizerorientation)
public typealias RefreshVisualizerOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizerstate)
public typealias RefreshVisualizerState = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.requirespointer)
public typealias RequiresPointer = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollbarvisibility)
public typealias ScrollBarVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollintoviewalignment)
public typealias ScrollIntoViewAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollmode)
public typealias ScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganimationmode)
public typealias ScrollingAnimationMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingchainmode)
public typealias ScrollingChainMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingcontentorientation)
public typealias ScrollingContentOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinginputkinds)
public typealias ScrollingInputKinds = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinginteractionstate)
public typealias ScrollingInteractionState = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingrailmode)
public typealias ScrollingRailMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollbarvisibility)
public typealias ScrollingScrollBarVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollmode)
public typealias ScrollingScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingsnappointsmode)
public typealias ScrollingSnapPointsMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoommode)
public typealias ScrollingZoomMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionmode)
public typealias SelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.snappointstype)
public typealias SnapPointsType = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewdisplaymode)
public typealias SplitViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneplacement)
public typealias SplitViewPanePlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosereason)
public typealias TeachingTipCloseReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipherocontentplacementmode)
public typealias TeachingTipHeroContentPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipplacementmode)
public typealias TeachingTipPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptailvisibility)
public typealias TeachingTipTailVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionmode)
public typealias TreeViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayoutitemsjustification)
public typealias UniformGridLayoutItemsJustification = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayoutitemsstretch)
public typealias UniformGridLayoutItemsStretch = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.zoommode)
public typealias ZoomMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs)
public final class AnchorRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnchorRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs.anchor)
    public var anchor : WinUI.UIElement! {
        get { try! _default.get_Anchor() }
        set { try! _default.put_Anchor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs.anchorcandidates)
    public var anchorCandidates : WindowsFoundation.AnyIVector<WinUI.UIElement?>! {
        get { try! _default.get_AnchorCandidates() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar)
open class AppBar : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IAppBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IAppBarFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AppBar")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.AppBarBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAppBarFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IAppBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IAppBarStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AppBar")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closeddisplaymodeproperty)
    public class var closedDisplayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_ClosedDisplayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_IsOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.isstickyproperty)
    public class var isStickyProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_IsStickyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_LightDismissOverlayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closeddisplaymode)
    public var closedDisplayMode : AppBarClosedDisplayMode {
        get { try! _default.get_ClosedDisplayMode() }
        set { try! _default.put_ClosedDisplayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpen() }
        set { try! _default.put_IsOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.issticky)
    public var isSticky : Bool {
        get { try! _default.get_IsSticky() }
        set { try! _default.put_IsSticky(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayMode() }
        set { try! _default.put_LightDismissOverlayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.templatesettings)
    public var templateSettings : WinUI.AppBarTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closed)
    public lazy var closed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closing)
    public lazy var closing : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.opened)
    public lazy var opened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opened($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.opening)
    public lazy var opening : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opening($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opening($0)
       }
      )
    }()

    private lazy var _IAppBarOverrides: __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onclosed)
    open func onClosed(_ e: Any!) throws {
        try _IAppBarOverrides.OnClosed(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onopened)
    open func onOpened(_ e: Any!) throws {
        try _IAppBarOverrides.OnOpened(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onclosing)
    open func onClosing(_ e: Any!) throws {
        try _IAppBarOverrides.OnClosing(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onopening)
    open func onOpening(_ e: Any!) throws {
        try _IAppBarOverrides.OnOpening(e)
    }

    deinit {
        _default = nil
        _IAppBarOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox)
public final class AutoSuggestBox : WinUI.ItemsControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AutoSuggestBox")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IAutoSuggestBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AutoSuggestBox")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.automaximizesuggestionareaproperty)
    public static var autoMaximizeSuggestionAreaProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_AutoMaximizeSuggestionAreaProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.descriptionproperty)
    public static var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_DescriptionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.issuggestionlistopenproperty)
    public static var isSuggestionListOpenProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_IsSuggestionListOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.lightdismissoverlaymodeproperty)
    public static var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_LightDismissOverlayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.maxsuggestionlistheightproperty)
    public static var maxSuggestionListHeightProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_MaxSuggestionListHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.placeholdertextproperty)
    public static var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_PlaceholderTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.queryiconproperty)
    public static var queryIconProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_QueryIconProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textboxstyleproperty)
    public static var textBoxStyleProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextBoxStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textmemberpathproperty)
    public static var textMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextMemberPathProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.updatetextonselectproperty)
    public static var updateTextOnSelectProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_UpdateTextOnSelectProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.automaximizesuggestionarea)
    public var autoMaximizeSuggestionArea : Bool {
        get { try! _default.get_AutoMaximizeSuggestionArea() }
        set { try! _default.put_AutoMaximizeSuggestionArea(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.description)
    public var description : Any! {
        get { try! _default.get_Description() }
        set { try! _default.put_Description(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.issuggestionlistopen)
    public var isSuggestionListOpen : Bool {
        get { try! _default.get_IsSuggestionListOpen() }
        set { try! _default.put_IsSuggestionListOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayMode() }
        set { try! _default.put_LightDismissOverlayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.maxsuggestionlistheight)
    public var maxSuggestionListHeight : Double {
        get { try! _default.get_MaxSuggestionListHeight() }
        set { try! _default.put_MaxSuggestionListHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderText() }
        set { try! _default.put_PlaceholderText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.queryicon)
    public var queryIcon : IconElement! {
        get { try! _default.get_QueryIcon() }
        set { try! _default.put_QueryIcon(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textboxstyle)
    public var textBoxStyle : WinUI.Style! {
        get { try! _default.get_TextBoxStyle() }
        set { try! _default.put_TextBoxStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textmemberpath)
    public var textMemberPath : String {
        get { try! _default.get_TextMemberPath() }
        set { try! _default.put_TextMemberPath(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.updatetextonselect)
    public var updateTextOnSelect : Bool {
        get { try! _default.get_UpdateTextOnSelect() }
        set { try! _default.put_UpdateTextOnSelect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.querysubmitted)
    public lazy var querySubmitted : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxQuerySubmittedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_QuerySubmitted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_QuerySubmitted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.suggestionchosen)
    public lazy var suggestionChosen : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxSuggestionChosenEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SuggestionChosen($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SuggestionChosen($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textchanged)
    public lazy var textChanged : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxTextChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs)
public final class AutoSuggestBoxQuerySubmittedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxQuerySubmittedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs.chosensuggestion)
    public var chosenSuggestion : Any! {
        get { try! _default.get_ChosenSuggestion() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs.querytext)
    public var queryText : String {
        get { try! _default.get_QueryText() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxsuggestionchoseneventargs)
public final class AutoSuggestBoxSuggestionChosenEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxSuggestionChosenEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxsuggestionchoseneventargs.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItem() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs)
public final class AutoSuggestBoxTextChangedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxTextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IAutoSuggestBoxTextChangedEventArgsStatics: __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxTextChangedEventArgsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.reasonproperty)
    public static var reasonProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxTextChangedEventArgsStatics.get_ReasonProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.checkcurrent)
    public func checkCurrent() throws -> Bool {
        try _default.CheckCurrent()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.reason)
    public var reason : AutoSuggestionBoxTextChangeReason {
        get { try! _default.get_Reason() }
        set { try! _default.put_Reason(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon)
open class BitmapIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBitmapIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBitmapIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.BitmapIcon")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.BitmapIconBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBitmapIconFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBitmapIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.BitmapIcon")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.showasmonochromeproperty)
    public class var showAsMonochromeProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapIconStatics.get_ShowAsMonochromeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.urisourceproperty)
    public class var uriSourceProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapIconStatics.get_UriSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.showasmonochrome)
    public var showAsMonochrome : Bool {
        get { try! _default.get_ShowAsMonochrome() }
        set { try! _default.put_ShowAsMonochrome(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.urisource)
    public var uriSource : WindowsFoundation.Uri! {
        get { try! _default.get_UriSource() }
        set { try! _default.put_UriSource(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border)
public final class Border : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBorder
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Border")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IBorderStatics: __ABI_Microsoft_UI_Xaml_Controls.IBorderStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Border")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundproperty)
    public static var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundsizingproperty)
    public static var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BackgroundSizingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderbrushproperty)
    public static var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BorderBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderthicknessproperty)
    public static var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BorderThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.childtransitionsproperty)
    public static var childTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_ChildTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.cornerradiusproperty)
    public static var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_CornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizing() }
        set { try! _default.put_BackgroundSizing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransition() }
        set { try! _default.put_BackgroundTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrush() }
        set { try! _default.put_BorderBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThickness() }
        set { try! _default.put_BorderThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_Child() }
        set { try! _default.put_Child(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.childtransitions)
    public var childTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildTransitions() }
        set { try! _default.put_ChildTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button)
open class Button : WinUI.ButtonBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IButtonFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Button")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ButtonBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IButtonFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IButtonStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Button")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button.flyoutproperty)
    public class var flyoutProperty : WinUI.DependencyProperty! {
        get { try! _IButtonStatics.get_FlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button.flyout)
    public var flyout : WinUI.FlyoutBase! {
        get { try! _default.get_Flyout() }
        set { try! _default.put_Flyout(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowboundschangedeventargs)
public final class CandidateWindowBoundsChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICandidateWindowBoundsChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowboundschangedeventargs.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas)
open class Canvas : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICanvas
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICanvasFactory : __ABI_Microsoft_UI_Xaml_Controls.ICanvasFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Canvas")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.CanvasBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICanvasFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ICanvasStatics: __ABI_Microsoft_UI_Xaml_Controls.ICanvasStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Canvas")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.getleft)
    public class func getLeft(_ element: WinUI.UIElement!) throws -> Double {
        return try _ICanvasStatics.GetLeft(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.setleft)
    public class func setLeft(_ element: WinUI.UIElement!, _ length: Double) throws {
        try _ICanvasStatics.SetLeft(element, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.gettop)
    public class func getTop(_ element: WinUI.UIElement!) throws -> Double {
        return try _ICanvasStatics.GetTop(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.settop)
    public class func setTop(_ element: WinUI.UIElement!, _ length: Double) throws {
        try _ICanvasStatics.SetTop(element, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.getzindex)
    public class func getZIndex(_ element: WinUI.UIElement!) throws -> Int32 {
        return try _ICanvasStatics.GetZIndex(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.setzindex)
    public class func setZIndex(_ element: WinUI.UIElement!, _ value: Int32) throws {
        try _ICanvasStatics.SetZIndex(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.leftproperty)
    public class var leftProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_LeftProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.topproperty)
    public class var topProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_TopProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.zindexproperty)
    public class var zindexProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_ZIndexProperty() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.checkbox)
open class CheckBox : WinUI.ToggleButton {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICheckBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICheckBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.ICheckBoxFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.CheckBox")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.CheckBoxBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICheckBoxFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs)
public final class ChoosingGroupHeaderContainerEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IChoosingGroupHeaderContainerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.group)
    public var group : Any! {
        get { try! _default.get_Group() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.groupheadercontainer)
    public var groupHeaderContainer : ListViewBaseHeaderItem! {
        get { try! _default.get_GroupHeaderContainer() }
        set { try! _default.put_GroupHeaderContainer(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.groupindex)
    public var groupIndex : Int32 {
        get { try! _default.get_GroupIndex() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs)
public final class ChoosingItemContainerEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IChoosingItemContainerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.iscontainerprepared)
    public var isContainerPrepared : Bool {
        get { try! _default.get_IsContainerPrepared() }
        set { try! _default.put_IsContainerPrepared(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.item)
    public var item : Any! {
        get { try! _default.get_Item() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.itemcontainer)
    public var itemContainer : WinUI.SelectorItem! {
        get { try! _default.get_ItemContainer() }
        set { try! _default.put_ItemContainer(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.itemindex)
    public var itemIndex : Int32 {
        get { try! _default.get_ItemIndex() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition)
public final class ColumnDefinition : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IColumnDefinition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ColumnDefinition")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IColumnDefinitionStatics: __ABI_Microsoft_UI_Xaml_Controls.IColumnDefinitionStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ColumnDefinition")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.maxwidthproperty)
    public static var maxWidthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_MaxWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.minwidthproperty)
    public static var minWidthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_MinWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.widthproperty)
    public static var widthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_WidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.actualwidth)
    public var actualWidth : Double {
        get { try! _default.get_ActualWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.maxwidth)
    public var maxWidth : Double {
        get { try! _default.get_MaxWidth() }
        set { try! _default.put_MaxWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.minwidth)
    public var minWidth : Double {
        get { try! _default.get_MinWidth() }
        set { try! _default.put_MinWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.width)
    public var width : WinUI.GridLength {
        get { try! _default.get_Width() }
        set { try! _default.put_Width(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection)
public final class ColumnDefinitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = ColumnDefinition?
    private typealias SwiftABI = WinUI.IVectorColumnDefinition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getat)
    public func getAt(_ index: UInt32) -> ColumnDefinition? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<ColumnDefinition?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.indexof)
    public func indexOf(_ value: ColumnDefinition?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.setat)
    public func setAt(_ index: UInt32, _ value: ColumnDefinition?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.insertat)
    public func insertAt(_ index: UInt32, _ value: ColumnDefinition?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.append)
    public func append(_ value: ColumnDefinition?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [ColumnDefinition?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.replaceall)
    public func replaceAll(_ items: [ColumnDefinition?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableColumnDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<ColumnDefinition?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox)
open class ComboBox : WinUI.Selector {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IComboBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.IComboBoxFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ComboBox")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ComboBoxBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IComboBoxFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IComboBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IComboBoxStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ComboBox")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_DescriptionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isdropdownopenproperty)
    public class var isDropDownOpenProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsDropDownOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.iseditableproperty)
    public class var isEditableProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsEditableProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.istextsearchenabledproperty)
    public class var isTextSearchEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsTextSearchEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_LightDismissOverlayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.maxdropdownheightproperty)
    public class var maxDropDownHeightProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_MaxDropDownHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholderforegroundproperty)
    public class var placeholderForegroundProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_PlaceholderForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_PlaceholderTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionchangedtriggerproperty)
    public class var selectionChangedTriggerProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_SelectionChangedTriggerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textboxstyleproperty)
    public class var textBoxStyleProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_TextBoxStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_TextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.description)
    public var description : Any! {
        get { try! _default.get_Description() }
        set { try! _default.put_Description(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isdropdownopen)
    public var isDropDownOpen : Bool {
        get { try! _default.get_IsDropDownOpen() }
        set { try! _default.put_IsDropDownOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.iseditable)
    public var isEditable : Bool {
        get { try! _default.get_IsEditable() }
        set { try! _default.put_IsEditable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isselectionboxhighlighted)
    public var isSelectionBoxHighlighted : Bool {
        get { try! _default.get_IsSelectionBoxHighlighted() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.istextsearchenabled)
    public var isTextSearchEnabled : Bool {
        get { try! _default.get_IsTextSearchEnabled() }
        set { try! _default.put_IsTextSearchEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayMode() }
        set { try! _default.put_LightDismissOverlayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.maxdropdownheight)
    public var maxDropDownHeight : Double {
        get { try! _default.get_MaxDropDownHeight() }
        set { try! _default.put_MaxDropDownHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholderforeground)
    public var placeholderForeground : WinUI.Brush! {
        get { try! _default.get_PlaceholderForeground() }
        set { try! _default.put_PlaceholderForeground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderText() }
        set { try! _default.put_PlaceholderText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionboxitem)
    public var selectionBoxItem : Any! {
        get { try! _default.get_SelectionBoxItem() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionboxitemtemplate)
    public var selectionBoxItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_SelectionBoxItemTemplate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionchangedtrigger)
    public var selectionChangedTrigger : ComboBoxSelectionChangedTrigger {
        get { try! _default.get_SelectionChangedTrigger() }
        set { try! _default.put_SelectionChangedTrigger(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.templatesettings)
    public var templateSettings : WinUI.ComboBoxTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textboxstyle)
    public var textBoxStyle : WinUI.Style! {
        get { try! _default.get_TextBoxStyle() }
        set { try! _default.put_TextBoxStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.dropdownclosed)
    public lazy var dropDownClosed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DropDownClosed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DropDownClosed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.dropdownopened)
    public lazy var dropDownOpened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DropDownOpened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DropDownOpened($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textsubmitted)
    public lazy var textSubmitted : Event<TypedEventHandler<ComboBox?, ComboBoxTextSubmittedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextSubmitted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextSubmitted($0)
       }
      )
    }()

    private lazy var _IComboBoxOverrides: __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.ondropdownclosed)
    open func onDropDownClosed(_ e: Any!) throws {
        try _IComboBoxOverrides.OnDropDownClosed(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.ondropdownopened)
    open func onDropDownOpened(_ e: Any!) throws {
        try _IComboBoxOverrides.OnDropDownOpened(e)
    }

    deinit {
        _default = nil
        _IComboBoxOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs)
public final class ComboBoxTextSubmittedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxTextSubmittedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs.text)
    public var text : String {
        get { try! _default.get_Text() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs)
public final class ContainerContentChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContainerContentChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.registerupdatecallback)
    public func registerUpdateCallback(_ callback: TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallback(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.registerupdatecallback)
    public func registerUpdateCallback(_ callbackPhase: UInt32, _ callback: TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackWithPhase(callbackPhase, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.inrecyclequeue)
    public var inRecycleQueue : Bool {
        get { try! _default.get_InRecycleQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.item)
    public var item : Any! {
        get { try! _default.get_Item() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.itemcontainer)
    public var itemContainer : WinUI.SelectorItem! {
        get { try! _default.get_ItemContainer() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.itemindex)
    public var itemIndex : Int32 {
        get { try! _default.get_ItemIndex() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.phase)
    public var phase : UInt32 {
        get { try! _default.get_Phase() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol)
open class ContentControl : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IContentControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentControlFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentControl")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ContentControlBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IContentControlFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IContentControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentControlStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentControl")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateselectorproperty)
    public class var contentTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTemplateSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttransitionsproperty)
    public class var contentTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.content)
    public var content : Any! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplate() }
        set { try! _default.put_ContentTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateroot)
    public var contentTemplateRoot : WinUI.UIElement! {
        get { try! _default.get_ContentTemplateRoot() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateselector)
    public var contentTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ContentTemplateSelector() }
        set { try! _default.put_ContentTemplateSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttransitions)
    public var contentTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ContentTransitions() }
        set { try! _default.put_ContentTransitions(newValue) }
    }

    private lazy var _IContentControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontentchanged)
    open func onContentChanged(_ oldContent: Any!, _ newContent: Any!) throws {
        try _IContentControlOverrides.OnContentChanged(oldContent, newContent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontenttemplatechanged)
    open func onContentTemplateChanged(_ oldContentTemplate: WinUI.DataTemplate!, _ newContentTemplate: WinUI.DataTemplate!) throws {
        try _IContentControlOverrides.OnContentTemplateChanged(oldContentTemplate, newContentTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontenttemplateselectorchanged)
    open func onContentTemplateSelectorChanged(_ oldContentTemplateSelector: DataTemplateSelector!, _ newContentTemplateSelector: DataTemplateSelector!) throws {
        try _IContentControlOverrides.OnContentTemplateSelectorChanged(oldContentTemplateSelector, newContentTemplateSelector)
    }

    deinit {
        _default = nil
        _IContentControlOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog)
open class ContentDialog : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialog
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentDialogFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentDialogFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentDialog")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ContentDialogBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IContentDialogFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IContentDialogStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentDialogStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentDialog")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonCommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonCommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttontextproperty)
    public class var closeButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.defaultbuttonproperty)
    public class var defaultButtonProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_DefaultButtonProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.fullsizedesiredproperty)
    public class var fullSizeDesiredProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_FullSizeDesiredProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.isprimarybuttonenabledproperty)
    public class var isPrimaryButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_IsPrimaryButtonEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.issecondarybuttonenabledproperty)
    public class var isSecondaryButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_IsSecondaryButtonEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandparameterproperty)
    public class var primaryButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonCommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandproperty)
    public class var primaryButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonCommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonstyleproperty)
    public class var primaryButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttontextproperty)
    public class var primaryButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandparameterproperty)
    public class var secondaryButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonCommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandproperty)
    public class var secondaryButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonCommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonstyleproperty)
    public class var secondaryButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttontextproperty)
    public class var secondaryButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_TitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titletemplateproperty)
    public class var titleTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_TitleTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.hide)
    public func hide() throws {
        try _default.Hide()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.showasync)
    public func showAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ContentDialogResult>! {
        try _default.ShowAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.showasync)
    public func showAsync(_ placement: ContentDialogPlacement) throws -> WindowsFoundation.AnyIAsyncOperation<ContentDialogResult>! {
        try _default.ShowAsyncWithPlacement(placement)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommand() }
        set { try! _default.put_CloseButtonCommand(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameter() }
        set { try! _default.put_CloseButtonCommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyle() }
        set { try! _default.put_CloseButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttontext)
    public var closeButtonText : String {
        get { try! _default.get_CloseButtonText() }
        set { try! _default.put_CloseButtonText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.defaultbutton)
    public var defaultButton : ContentDialogButton {
        get { try! _default.get_DefaultButton() }
        set { try! _default.put_DefaultButton(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.fullsizedesired)
    public var fullSizeDesired : Bool {
        get { try! _default.get_FullSizeDesired() }
        set { try! _default.put_FullSizeDesired(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.isprimarybuttonenabled)
    public var isPrimaryButtonEnabled : Bool {
        get { try! _default.get_IsPrimaryButtonEnabled() }
        set { try! _default.put_IsPrimaryButtonEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.issecondarybuttonenabled)
    public var isSecondaryButtonEnabled : Bool {
        get { try! _default.get_IsSecondaryButtonEnabled() }
        set { try! _default.put_IsSecondaryButtonEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommand)
    public var primaryButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_PrimaryButtonCommand() }
        set { try! _default.put_PrimaryButtonCommand(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandparameter)
    public var primaryButtonCommandParameter : Any! {
        get { try! _default.get_PrimaryButtonCommandParameter() }
        set { try! _default.put_PrimaryButtonCommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonstyle)
    public var primaryButtonStyle : WinUI.Style! {
        get { try! _default.get_PrimaryButtonStyle() }
        set { try! _default.put_PrimaryButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttontext)
    public var primaryButtonText : String {
        get { try! _default.get_PrimaryButtonText() }
        set { try! _default.put_PrimaryButtonText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommand)
    public var secondaryButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_SecondaryButtonCommand() }
        set { try! _default.put_SecondaryButtonCommand(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandparameter)
    public var secondaryButtonCommandParameter : Any! {
        get { try! _default.get_SecondaryButtonCommandParameter() }
        set { try! _default.put_SecondaryButtonCommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonstyle)
    public var secondaryButtonStyle : WinUI.Style! {
        get { try! _default.get_SecondaryButtonStyle() }
        set { try! _default.put_SecondaryButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttontext)
    public var secondaryButtonText : String {
        get { try! _default.get_SecondaryButtonText() }
        set { try! _default.put_SecondaryButtonText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.title)
    public var title : Any! {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titletemplate)
    public var titleTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TitleTemplate() }
        set { try! _default.put_TitleTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseButtonClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseButtonClick($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closed)
    public lazy var closed : Event<TypedEventHandler<ContentDialog?, ContentDialogClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closing)
    public lazy var closing : Event<TypedEventHandler<ContentDialog?, ContentDialogClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.opened)
    public lazy var opened : Event<TypedEventHandler<ContentDialog?, ContentDialogOpenedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opened($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonclick)
    public lazy var primaryButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PrimaryButtonClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PrimaryButtonClick($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonclick)
    public lazy var secondaryButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SecondaryButtonClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SecondaryButtonClick($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickdeferral)
public final class ContentDialogButtonClickDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogButtonClickDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickdeferral.complete)
    public func complete() throws {
        try _default.Complete()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs)
public final class ContentDialogButtonClickEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogButtonClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs.getdeferral)
    public func getDeferral() throws -> ContentDialogButtonClickDeferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosedeventargs)
public final class ContentDialogClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosedeventargs.result)
    public var result : ContentDialogResult {
        get { try! _default.get_Result() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingdeferral)
public final class ContentDialogClosingDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosingDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingdeferral.complete)
    public func complete() throws {
        try _default.Complete()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs)
public final class ContentDialogClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.getdeferral)
    public func getDeferral() throws -> ContentDialogClosingDeferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.result)
    public var result : ContentDialogResult {
        get { try! _default.get_Result() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogopenedeventargs)
public final class ContentDialogOpenedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogOpenedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter)
open class ContentPresenter : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IContentPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentPresenter")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ContentPresenterBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IContentPresenterFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IContentPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentPresenter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BackgroundSizingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BorderBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BorderThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_CharacterSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateselectorproperty)
    public class var contentTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTemplateSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttransitionsproperty)
    public class var contentTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_CornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontFamilyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontStretchProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontWeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.horizontalcontentalignmentproperty)
    public class var horizontalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_HorizontalContentAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_IsTextScaleFactorEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.lineheightproperty)
    public class var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_LineHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.linestackingstrategyproperty)
    public class var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_LineStackingStrategyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.maxlinesproperty)
    public class var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_MaxLinesProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.opticalmarginalignmentproperty)
    public class var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_OpticalMarginAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textlineboundsproperty)
    public class var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_TextLineBoundsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_TextWrappingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.verticalcontentalignmentproperty)
    public class var verticalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_VerticalContentAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizing() }
        set { try! _default.put_BackgroundSizing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransition() }
        set { try! _default.put_BackgroundTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrush() }
        set { try! _default.put_BorderBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThickness() }
        set { try! _default.put_BorderThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacing() }
        set { try! _default.put_CharacterSpacing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.content)
    public var content : Any! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplate() }
        set { try! _default.put_ContentTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateselector)
    public var contentTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ContentTemplateSelector() }
        set { try! _default.put_ContentTemplateSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttransitions)
    public var contentTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ContentTransitions() }
        set { try! _default.put_ContentTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamily() }
        set { try! _default.put_FontFamily(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSize() }
        set { try! _default.put_FontSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretch() }
        set { try! _default.put_FontStretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyle() }
        set { try! _default.put_FontStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeight() }
        set { try! _default.put_FontWeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_Foreground() }
        set { try! _default.put_Foreground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.horizontalcontentalignment)
    public var horizontalContentAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalContentAlignment() }
        set { try! _default.put_HorizontalContentAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabled() }
        set { try! _default.put_IsTextScaleFactorEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeight() }
        set { try! _default.put_LineHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategy() }
        set { try! _default.put_LineStackingStrategy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLines() }
        set { try! _default.put_MaxLines(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignment() }
        set { try! _default.put_OpticalMarginAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBounds() }
        set { try! _default.put_TextLineBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrapping() }
        set { try! _default.put_TextWrapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.verticalcontentalignment)
    public var verticalContentAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalContentAlignment() }
        set { try! _default.put_VerticalContentAlignment(newValue) }
    }

    private lazy var _IContentPresenterOverrides: __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.oncontenttemplatechanged)
    open func onContentTemplateChanged(_ oldContentTemplate: WinUI.DataTemplate!, _ newContentTemplate: WinUI.DataTemplate!) throws {
        try _IContentPresenterOverrides.OnContentTemplateChanged(oldContentTemplate, newContentTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.oncontenttemplateselectorchanged)
    open func onContentTemplateSelectorChanged(_ oldContentTemplateSelector: DataTemplateSelector!, _ newContentTemplateSelector: DataTemplateSelector!) throws {
        try _IContentPresenterOverrides.OnContentTemplateSelectorChanged(oldContentTemplateSelector, newContentTemplateSelector)
    }

    deinit {
        _default = nil
        _IContentPresenterOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs)
public final class ContextMenuEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContextMenuEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.cursorleft)
    public var cursorLeft : Double {
        get { try! _default.get_CursorLeft() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.cursortop)
    public var cursorTop : Double {
        get { try! _default.get_CursorTop() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control)
open class Control : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IControlFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Control")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ControlBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IControlFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IControlStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Control")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.getistemplatefocustarget)
    public class func getIsTemplateFocusTarget(_ element: WinUI.FrameworkElement!) throws -> Bool {
        return try _IControlStatics.GetIsTemplateFocusTarget(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.setistemplatefocustarget)
    public class func setIsTemplateFocusTarget(_ element: WinUI.FrameworkElement!, _ value: Bool) throws {
        try _IControlStatics.SetIsTemplateFocusTarget(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.getistemplatekeytiptarget)
    public class func getIsTemplateKeyTipTarget(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IControlStatics.GetIsTemplateKeyTipTarget(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.setistemplatekeytiptarget)
    public class func setIsTemplateKeyTipTarget(_ element: WinUI.DependencyObject!, _ value: Bool) throws {
        try _IControlStatics.SetIsTemplateKeyTipTarget(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BackgroundSizingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BorderBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BorderThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_CharacterSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_CornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstylekeyproperty)
    public class var defaultStyleKeyProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_DefaultStyleKeyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstyleresourceuriproperty)
    public class var defaultStyleResourceUriProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_DefaultStyleResourceUriProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.elementsoundmodeproperty)
    public class var elementSoundModeProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_ElementSoundModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontFamilyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontStretchProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontWeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_ForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.horizontalcontentalignmentproperty)
    public class var horizontalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_HorizontalContentAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabledproperty)
    public class var isEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagedproperty)
    public class var isFocusEngagedProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsFocusEngagedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagementenabledproperty)
    public class var isFocusEngagementEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsFocusEngagementEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istemplatefocustargetproperty)
    public class var isTemplateFocusTargetProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTemplateFocusTargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istemplatekeytiptargetproperty)
    public class var isTemplateKeyTipTargetProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTemplateKeyTipTargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTextScaleFactorEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.requirespointerproperty)
    public class var requiresPointerProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_RequiresPointerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.tabnavigationproperty)
    public class var tabNavigationProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_TabNavigationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.templateproperty)
    public class var templateProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_TemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.verticalcontentalignmentproperty)
    public class var verticalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_VerticalContentAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.removefocusengagement)
    public func removeFocusEngagement() throws {
        try _default.RemoveFocusEngagement()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.applytemplate)
    public func applyTemplate() throws -> Bool {
        try _default.ApplyTemplate()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizing() }
        set { try! _default.put_BackgroundSizing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrush() }
        set { try! _default.put_BorderBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThickness() }
        set { try! _default.put_BorderThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacing() }
        set { try! _default.put_CharacterSpacing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstyleresourceuri)
    public var defaultStyleResourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_DefaultStyleResourceUri() }
        set { try! _default.put_DefaultStyleResourceUri(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.elementsoundmode)
    public var elementSoundMode : WinUI.ElementSoundMode {
        get { try! _default.get_ElementSoundMode() }
        set { try! _default.put_ElementSoundMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamily() }
        set { try! _default.put_FontFamily(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSize() }
        set { try! _default.put_FontSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretch() }
        set { try! _default.put_FontStretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyle() }
        set { try! _default.put_FontStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeight() }
        set { try! _default.put_FontWeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_Foreground() }
        set { try! _default.put_Foreground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.horizontalcontentalignment)
    public var horizontalContentAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalContentAlignment() }
        set { try! _default.put_HorizontalContentAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabled)
    public var isEnabled : Bool {
        get { try! _default.get_IsEnabled() }
        set { try! _default.put_IsEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengaged)
    public var isFocusEngaged : Bool {
        get { try! _default.get_IsFocusEngaged() }
        set { try! _default.put_IsFocusEngaged(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagementenabled)
    public var isFocusEngagementEnabled : Bool {
        get { try! _default.get_IsFocusEngagementEnabled() }
        set { try! _default.put_IsFocusEngagementEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabled() }
        set { try! _default.put_IsTextScaleFactorEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.requirespointer)
    public var requiresPointer : RequiresPointer {
        get { try! _default.get_RequiresPointer() }
        set { try! _default.put_RequiresPointer(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.tabnavigation)
    public var tabNavigation : WinUI.KeyboardNavigationMode {
        get { try! _default.get_TabNavigation() }
        set { try! _default.put_TabNavigation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.template)
    public var template : ControlTemplate! {
        get { try! _default.get_Template() }
        set { try! _default.put_Template(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.verticalcontentalignment)
    public var verticalContentAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalContentAlignment() }
        set { try! _default.put_VerticalContentAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.focusdisengaged)
    public lazy var focusDisengaged : Event<TypedEventHandler<Control?, FocusDisengagedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FocusDisengaged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FocusDisengaged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.focusengaged)
    public lazy var focusEngaged : Event<TypedEventHandler<Control?, FocusEngagedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FocusEngaged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FocusEngaged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabledchanged)
    public lazy var isEnabledChanged : Event<WinUI.DependencyPropertyChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsEnabledChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsEnabledChanged($0)
       }
      )
    }()

    private lazy var _IControlProtected: __ABI_Microsoft_UI_Xaml_Controls.IControlProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.gettemplatechild)
    public func getTemplateChild(_ childName: String) throws -> WinUI.DependencyObject! {
        try _IControlProtected.GetTemplateChild(childName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstylekey)
    public var defaultStyleKey : Any! {
        get { try! _IControlProtected.get_DefaultStyleKey() }
        set { try! _IControlProtected.put_DefaultStyleKey(newValue) }
    }

    private lazy var _IControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerentered)
    open func onPointerEntered(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerEntered(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerpressed)
    open func onPointerPressed(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerPressed(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointermoved)
    open func onPointerMoved(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerMoved(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerreleased)
    open func onPointerReleased(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerReleased(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerexited)
    open func onPointerExited(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerExited(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointercapturelost)
    open func onPointerCaptureLost(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerCaptureLost(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointercanceled)
    open func onPointerCanceled(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerCanceled(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerwheelchanged)
    open func onPointerWheelChanged(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerWheelChanged(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ontapped)
    open func onTapped(_ e: WinUI.TappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnTapped(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondoubletapped)
    open func onDoubleTapped(_ e: WinUI.DoubleTappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnDoubleTapped(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onholding)
    open func onHolding(_ e: WinUI.HoldingRoutedEventArgs!) throws {
        try _IControlOverrides.OnHolding(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onrighttapped)
    open func onRightTapped(_ e: WinUI.RightTappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnRightTapped(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationstarting)
    open func onManipulationStarting(_ e: WinUI.ManipulationStartingRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationStarting(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationinertiastarting)
    open func onManipulationInertiaStarting(_ e: WinUI.ManipulationInertiaStartingRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationInertiaStarting(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationstarted)
    open func onManipulationStarted(_ e: WinUI.ManipulationStartedRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationStarted(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationdelta)
    open func onManipulationDelta(_ e: WinUI.ManipulationDeltaRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationDelta(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationcompleted)
    open func onManipulationCompleted(_ e: WinUI.ManipulationCompletedRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationCompleted(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onkeyup)
    open func onKeyUp(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnKeyUp(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onkeydown)
    open func onKeyDown(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnKeyDown(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpreviewkeydown)
    open func onPreviewKeyDown(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnPreviewKeyDown(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpreviewkeyup)
    open func onPreviewKeyUp(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnPreviewKeyUp(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ongotfocus)
    open func onGotFocus(_ e: WinUI.RoutedEventArgs!) throws {
        try _IControlOverrides.OnGotFocus(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onlostfocus)
    open func onLostFocus(_ e: WinUI.RoutedEventArgs!) throws {
        try _IControlOverrides.OnLostFocus(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.oncharacterreceived)
    open func onCharacterReceived(_ e: WinUI.CharacterReceivedRoutedEventArgs!) throws {
        try _IControlOverrides.OnCharacterReceived(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragenter)
    open func onDragEnter(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragEnter(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragleave)
    open func onDragLeave(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragLeave(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragover)
    open func onDragOver(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragOver(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondrop)
    open func onDrop(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDrop(e)
    }

    deinit {
        _default = nil
        _IControlProtected = nil
        _IControlOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.controltemplate)
public final class ControlTemplate : WinUI.FrameworkTemplate {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ControlTemplate")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.controltemplate.targettype)
    public var targetType : WinUI.TypeName {
        get { try! _default.get_TargetType() }
        set { try! _default.put_TargetType(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector)
open class DataTemplateSelector : WinRTClass, WinUI.IElementFactory {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IDataTemplateSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.DataTemplateSelector")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.DataTemplateSelectorBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IDataTemplateSelectorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplate)
    public func selectTemplate(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.DataTemplate! {
        try _default.SelectTemplate(item, container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplate)
    public func selectTemplate(_ item: Any!) throws -> WinUI.DataTemplate! {
        try _default.SelectTemplateForItem(item)
    }

    private lazy var _IDataTemplateSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplatecore)
    open func selectTemplateCore(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.DataTemplate! {
        try _IDataTemplateSelectorOverrides.SelectTemplateCore(item, container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplatecore)
    open func selectTemplateCore(_ item: Any!) throws -> WinUI.DataTemplate! {
        try _IDataTemplateSelectorOverrides.SelectTemplateForItemCore(item)
    }

    private lazy var _IElementFactory: __ABI_Microsoft_UI_Xaml.IElementFactory! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.getelement)
    public func getElement(_ args: WinUI.ElementFactoryGetArgs!) throws -> WinUI.UIElement! {
        try _IElementFactory.GetElement(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.recycleelement)
    public func recycleElement(_ args: WinUI.ElementFactoryRecycleArgs!) throws {
        try _IElementFactory.RecycleElement(args)
    }

    deinit {
        _default = nil
        _IDataTemplateSelectorOverrides = nil
        _IElementFactory = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs)
public final class DragItemsCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDragItemsCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResult() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs.items)
    public var items : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _default.get_Items() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs)
public final class DragItemsStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDragItemsStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_Data() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_Items() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipview)
open class FlipView : WinUI.Selector {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlipViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlipViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FlipView")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FlipViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlipViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFlipViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlipViewStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FlipView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipview.usetouchanimationsforallnavigationproperty)
    public class var useTouchAnimationsForAllNavigationProperty : WinUI.DependencyProperty! {
        get { try! _IFlipViewStatics.get_UseTouchAnimationsForAllNavigationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipview.usetouchanimationsforallnavigation)
    public var useTouchAnimationsForAllNavigation : Bool {
        get { try! _default.get_UseTouchAnimationsForAllNavigation() }
        set { try! _default.put_UseTouchAnimationsForAllNavigation(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipviewitem)
open class FlipViewItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlipViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlipViewItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FlipViewItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FlipViewItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlipViewItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout)
open class Flyout : WinUI.FlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlyoutFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Flyout")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FlyoutBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlyoutFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlyoutStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Flyout")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.flyoutpresenterstyleproperty)
    public class var flyoutPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutStatics.get_FlyoutPresenterStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.flyoutpresenterstyle)
    public var flyoutPresenterStyle : WinUI.Style! {
        get { try! _default.get_FlyoutPresenterStyle() }
        set { try! _default.put_FlyoutPresenterStyle(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter)
open class FlyoutPresenter : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenterFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FlyoutPresenter")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FlyoutPresenterBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlyoutPresenterFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFlyoutPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenterStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FlyoutPresenter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter.isdefaultshadowenabledproperty)
    public class var isDefaultShadowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutPresenterStatics.get_IsDefaultShadowEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter.isdefaultshadowenabled)
    public var isDefaultShadowEnabled : Bool {
        get { try! _default.get_IsDefaultShadowEnabled() }
        set { try! _default.put_IsDefaultShadowEnabled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusdisengagedeventargs)
public final class FocusDisengagedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFocusDisengagedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusengagedeventargs)
public final class FocusEngagedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFocusEngagedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusengagedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon)
open class FontIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFontIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IFontIconFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FontIcon")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FontIconBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFontIconFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFontIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IFontIconStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FontIcon")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontFamilyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontWeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.glyphproperty)
    public class var glyphProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_GlyphProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_IsTextScaleFactorEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.mirroredwhenrighttoleftproperty)
    public class var mirroredWhenRightToLeftProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_MirroredWhenRightToLeftProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamily() }
        set { try! _default.put_FontFamily(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSize() }
        set { try! _default.put_FontSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyle() }
        set { try! _default.put_FontStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeight() }
        set { try! _default.put_FontWeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.glyph)
    public var glyph : String {
        get { try! _default.get_Glyph() }
        set { try! _default.put_Glyph(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabled() }
        set { try! _default.put_IsTextScaleFactorEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.mirroredwhenrighttoleft)
    public var mirroredWhenRightToLeft : Bool {
        get { try! _default.get_MirroredWhenRightToLeft() }
        set { try! _default.put_MirroredWhenRightToLeft(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource)
open class FontIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFontIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IFontIconSourceFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FontIconSource")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FontIconSourceBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFontIconSourceFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFontIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IFontIconSourceStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.FontIconSource")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontFamilyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontWeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.glyphproperty)
    public class var glyphProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_GlyphProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_IsTextScaleFactorEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.mirroredwhenrighttoleftproperty)
    public class var mirroredWhenRightToLeftProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_MirroredWhenRightToLeftProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamily() }
        set { try! _default.put_FontFamily(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSize() }
        set { try! _default.put_FontSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyle() }
        set { try! _default.put_FontStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeight() }
        set { try! _default.put_FontWeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.glyph)
    public var glyph : String {
        get { try! _default.get_Glyph() }
        set { try! _default.put_Glyph(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabled() }
        set { try! _default.put_IsTextScaleFactorEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.mirroredwhenrighttoleft)
    public var mirroredWhenRightToLeft : Bool {
        get { try! _default.get_MirroredWhenRightToLeft() }
        set { try! _default.put_MirroredWhenRightToLeft(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame)
open class Frame : WinUI.ContentControl, INavigate {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFrameFactory : __ABI_Microsoft_UI_Xaml_Controls.IFrameFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Frame")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.FrameBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFrameFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IFrameStatics: __ABI_Microsoft_UI_Xaml_Controls.IFrameStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Frame")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstackdepthproperty)
    public class var backStackDepthProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_BackStackDepthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstackproperty)
    public class var backStackProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_BackStackProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cachesizeproperty)
    public class var cacheSizeProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CacheSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangobackproperty)
    public class var canGoBackProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CanGoBackProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangoforwardproperty)
    public class var canGoForwardProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CanGoForwardProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.currentsourcepagetypeproperty)
    public class var currentSourcePageTypeProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CurrentSourcePageTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.forwardstackproperty)
    public class var forwardStackProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_ForwardStackProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.isnavigationstackenabledproperty)
    public class var isNavigationStackEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_IsNavigationStackEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.sourcepagetypeproperty)
    public class var sourcePageTypeProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_SourcePageTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.goback)
    public func goBack() throws {
        try _default.GoBack()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.goback)
    public func goBack(_ transitionInfoOverride: WinUI.NavigationTransitionInfo!) throws {
        try _default.GoBackWithTransitionInfo(transitionInfoOverride)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.goforward)
    public func goForward() throws {
        try _default.GoForward()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigate)
    public func navigate(_ sourcePageType: WinUI.TypeName, _ parameter: Any!) throws -> Bool {
        try _default.Navigate(sourcePageType, parameter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigate)
    public func navigate(_ sourcePageType: WinUI.TypeName, _ parameter: Any!, _ infoOverride: WinUI.NavigationTransitionInfo!) throws -> Bool {
        try _default.NavigateWithTransitionInfo(sourcePageType, parameter, infoOverride)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigatetotype)
    public func navigateToType(_ sourcePageType: WinUI.TypeName, _ parameter: Any!, _ navigationOptions: WinUI.FrameNavigationOptions!) throws -> Bool {
        try _default.NavigateToType(sourcePageType, parameter, navigationOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.getnavigationstate)
    public func getNavigationState() throws -> String {
        try _default.GetNavigationState()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.setnavigationstate)
    public func setNavigationState(_ navigationState: String) throws {
        try _default.SetNavigationState(navigationState)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.setnavigationstate)
    public func setNavigationState(_ navigationState: String, _ suppressNavigate: Bool) throws {
        try _default.SetNavigationStateWithNavigationControl(navigationState, suppressNavigate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstack)
    public var backStack : WindowsFoundation.AnyIVector<WinUI.PageStackEntry?>! {
        get { try! _default.get_BackStack() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstackdepth)
    public var backStackDepth : Int32 {
        get { try! _default.get_BackStackDepth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cachesize)
    public var cacheSize : Int32 {
        get { try! _default.get_CacheSize() }
        set { try! _default.put_CacheSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangoback)
    public var canGoBack : Bool {
        get { try! _default.get_CanGoBack() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangoforward)
    public var canGoForward : Bool {
        get { try! _default.get_CanGoForward() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.currentsourcepagetype)
    public var currentSourcePageType : WinUI.TypeName {
        get { try! _default.get_CurrentSourcePageType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.forwardstack)
    public var forwardStack : WindowsFoundation.AnyIVector<WinUI.PageStackEntry?>! {
        get { try! _default.get_ForwardStack() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.isnavigationstackenabled)
    public var isNavigationStackEnabled : Bool {
        get { try! _default.get_IsNavigationStackEnabled() }
        set { try! _default.put_IsNavigationStackEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.sourcepagetype)
    public var sourcePageType : WinUI.TypeName {
        get { try! _default.get_SourcePageType() }
        set { try! _default.put_SourcePageType(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigated)
    public lazy var navigated : Event<WinUI.NavigatedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Navigated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Navigated($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigating)
    public lazy var navigating : Event<WinUI.NavigatingCancelEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Navigating($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Navigating($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigationfailed)
    public lazy var navigationFailed : Event<WinUI.NavigationFailedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationFailed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationFailed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigationstopped)
    public lazy var navigationStopped : Event<WinUI.NavigationStoppedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationStopped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationStopped($0)
       }
      )
    }()

    private lazy var _INavigate: __ABI_Microsoft_UI_Xaml_Controls.INavigate! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigate)
    public func navigate(_ sourcePageType: WinUI.TypeName) throws -> Bool {
        try _INavigate.Navigate(sourcePageType)
    }

    deinit {
        _default = nil
        _INavigate = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid)
open class Grid : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Grid")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.GridBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IGridStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Grid")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getrow)
    public class func getRow(_ element: WinUI.FrameworkElement!) throws -> Int32 {
        return try _IGridStatics.GetRow(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setrow)
    public class func setRow(_ element: WinUI.FrameworkElement!, _ value: Int32) throws {
        try _IGridStatics.SetRow(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getcolumn)
    public class func getColumn(_ element: WinUI.FrameworkElement!) throws -> Int32 {
        return try _IGridStatics.GetColumn(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setcolumn)
    public class func setColumn(_ element: WinUI.FrameworkElement!, _ value: Int32) throws {
        try _IGridStatics.SetColumn(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getrowspan)
    public class func getRowSpan(_ element: WinUI.FrameworkElement!) throws -> Int32 {
        return try _IGridStatics.GetRowSpan(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setrowspan)
    public class func setRowSpan(_ element: WinUI.FrameworkElement!, _ value: Int32) throws {
        try _IGridStatics.SetRowSpan(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getcolumnspan)
    public class func getColumnSpan(_ element: WinUI.FrameworkElement!) throws -> Int32 {
        return try _IGridStatics.GetColumnSpan(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setcolumnspan)
    public class func setColumnSpan(_ element: WinUI.FrameworkElement!, _ value: Int32) throws {
        try _IGridStatics.SetColumnSpan(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BackgroundSizingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BorderBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BorderThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnproperty)
    public class var columnProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspacingproperty)
    public class var columnSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspanproperty)
    public class var columnSpanProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnSpanProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_CornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowproperty)
    public class var rowProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspacingproperty)
    public class var rowSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspanproperty)
    public class var rowSpanProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowSpanProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizing() }
        set { try! _default.put_BackgroundSizing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrush() }
        set { try! _default.put_BorderBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThickness() }
        set { try! _default.put_BorderThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columndefinitions)
    public var columnDefinitions : ColumnDefinitionCollection! {
        get { try! _default.get_ColumnDefinitions() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspacing)
    public var columnSpacing : Double {
        get { try! _default.get_ColumnSpacing() }
        set { try! _default.put_ColumnSpacing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowdefinitions)
    public var rowDefinitions : RowDefinitionCollection! {
        get { try! _default.get_RowDefinitions() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspacing)
    public var rowSpacing : Double {
        get { try! _default.get_RowSpacing() }
        set { try! _default.put_RowSpacing(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridview)
open class GridView : WinUI.ListViewBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.GridView")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.GridViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridviewitem)
open class GridViewItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridViewItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.GridViewItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.GridViewItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridViewItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridviewitem.templatesettings)
    public var templateSettings : WinUI.GridViewItemTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle)
open class GroupStyle : WinRTClass, WinUI.INotifyPropertyChanged {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyle
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGroupStyleFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.GroupStyle")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.GroupStyleBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IGroupStyleFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.containerstyle)
    public var containerStyle : WinUI.Style! {
        get { try! _default.get_ContainerStyle() }
        set { try! _default.put_ContainerStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.containerstyleselector)
    public var containerStyleSelector : StyleSelector! {
        get { try! _default.get_ContainerStyleSelector() }
        set { try! _default.put_ContainerStyleSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headercontainerstyle)
    public var headerContainerStyle : WinUI.Style! {
        get { try! _default.get_HeaderContainerStyle() }
        set { try! _default.put_HeaderContainerStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headertemplateselector)
    public var headerTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_HeaderTemplateSelector() }
        set { try! _default.put_HeaderTemplateSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.hidesifempty)
    public var hidesIfEmpty : Bool {
        get { try! _default.get_HidesIfEmpty() }
        set { try! _default.put_HidesIfEmpty(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.panel)
    public var panel : ItemsPanelTemplate! {
        get { try! _default.get_Panel() }
        set { try! _default.put_Panel(newValue) }
    }

    private lazy var _INotifyPropertyChanged: __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.propertychanged)
    public lazy var propertyChanged : Event<WinUI.PropertyChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INotifyPropertyChanged else { return .init() }
          return try! this.add_PropertyChanged($0)
        },
        remove: { [weak self] in
         try? self?._INotifyPropertyChanged.remove_PropertyChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
        _INotifyPropertyChanged = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector)
open class GroupStyleSelector : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IGroupStyleSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.GroupStyleSelector")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.GroupStyleSelectorBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IGroupStyleSelectorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector.selectgroupstyle)
    public func selectGroupStyle(_ group: Any!, _ level: UInt32) throws -> GroupStyle! {
        try _default.SelectGroupStyle(group, level)
    }

    private lazy var _IGroupStyleSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector.selectgroupstylecore)
    open func selectGroupStyleCore(_ group: Any!, _ level: UInt32) throws -> GroupStyle! {
        try _IGroupStyleSelectorOverrides.SelectGroupStyleCore(group, level)
    }

    deinit {
        _default = nil
        _IGroupStyleSelectorOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton)
open class HyperlinkButton : WinUI.ButtonBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IHyperlinkButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButtonFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.HyperlinkButton")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.HyperlinkButtonBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IHyperlinkButtonFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IHyperlinkButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButtonStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.HyperlinkButton")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton.navigateuriproperty)
    public class var navigateUriProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkButtonStatics.get_NavigateUriProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton.navigateuri)
    public var navigateUri : WindowsFoundation.Uri! {
        get { try! _default.get_NavigateUri() }
        set { try! _default.put_NavigateUri(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement)
open class IconElement : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IIconElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconElementFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.IconElement")

    private static let _IIconElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconElementStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.IconElement")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IIconElementStatics.get_ForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_Foreground() }
        set { try! _default.put_Foreground(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource)
open class IconSource : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconSourceFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.IconSource")

    private static let _IIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.IconSource")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IIconSourceStatics.get_ForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.createiconelement)
    public func createIconElement() throws -> IconElement! {
        try _default.CreateIconElement()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_Foreground() }
        set { try! _default.put_Foreground(newValue) }
    }

    private lazy var _IIconSourceOverrides: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.createiconelementcore)
    open func createIconElementCore() throws -> IconElement! {
        try _IIconSourceOverrides.CreateIconElementCore()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.geticonelementpropertycore)
    open func getIconElementPropertyCore(_ iconSourceProperty: WinUI.DependencyProperty!) throws -> WinUI.DependencyProperty! {
        try _IIconSourceOverrides.GetIconElementPropertyCore(iconSourceProperty)
    }

    deinit {
        _default = nil
        _IIconSourceOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsourceelement)
open class IconSourceElement : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IIconSourceElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElementFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.IconSourceElement")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.IconSourceElementBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IIconSourceElementFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IIconSourceElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElementStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.IconSourceElement")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsourceelement.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IIconSourceElementStatics.get_IconSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsourceelement.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSource() }
        set { try! _default.put_IconSource(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image)
public final class Image : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImage
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Image")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IImageStatics: __ABI_Microsoft_UI_Xaml_Controls.IImageStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Image")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.ninegridproperty)
    public static var nineGridProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_NineGridProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.sourceproperty)
    public static var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_SourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.stretchproperty)
    public static var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_StretchProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.getascastingsource)
    public func getAsCastingSource() throws -> UWP.CastingSource! {
        try _default.GetAsCastingSource()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.getalphamask)
    public func getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMask()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.ninegrid)
    public var nineGrid : WinUI.Thickness {
        get { try! _default.get_NineGrid() }
        set { try! _default.put_NineGrid(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.source)
    public var source : WinUI.ImageSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_Stretch() }
        set { try! _default.put_Stretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.imagefailed)
    public lazy var imageFailed : Event<WinUI.ExceptionRoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ImageFailed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ImageFailed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.imageopened)
    public lazy var imageOpened : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ImageOpened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ImageOpened($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageicon)
open class ImageIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImageIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IImageIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IImageIconFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ImageIcon")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ImageIconBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IImageIconFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IImageIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IImageIconStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ImageIcon")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageicon.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IImageIconStatics.get_SourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageicon.source)
    public var source : WinUI.ImageSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge)
open class InfoBadge : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadge
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBadgeFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBadge")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.InfoBadgeBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBadgeFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBadgeStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBadge")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_IconSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_TemplateSettingsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_ValueProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSource() }
        set { try! _default.put_IconSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.templatesettings)
    public var templateSettings : InfoBadgeTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.value)
    public var value : Int32 {
        get { try! _default.get_Value() }
        set { try! _default.put_Value(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings)
open class InfoBadgeTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBadgeTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettingsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.InfoBadgeTemplateSettingsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBadgeTemplateSettingsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBadgeTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettingsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeTemplateSettingsStatics.get_IconElementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.infobadgecornerradiusproperty)
    public class var infoBadgeCornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeTemplateSettingsStatics.get_InfoBadgeCornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElement() }
        set { try! _default.put_IconElement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.infobadgecornerradius)
    public var infoBadgeCornerRadius : WinUI.CornerRadius {
        get { try! _default.get_InfoBadgeCornerRadius() }
        set { try! _default.put_InfoBadgeCornerRadius(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar)
open class InfoBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBar")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.InfoBarBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBarFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBarStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBar")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.actionbuttonproperty)
    public class var actionButtonProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_ActionButtonProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_CloseButtonCommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_CloseButtonCommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_CloseButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_ContentTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IconSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isclosableproperty)
    public class var isClosableProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IsClosableProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isiconvisibleproperty)
    public class var isIconVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IsIconVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IsOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.messageproperty)
    public class var messageProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_MessageProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.severityproperty)
    public class var severityProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_SeverityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_TemplateSettingsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_TitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.actionbutton)
    public var actionButton : WinUI.ButtonBase! {
        get { try! _default.get_ActionButton() }
        set { try! _default.put_ActionButton(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommand() }
        set { try! _default.put_CloseButtonCommand(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameter() }
        set { try! _default.put_CloseButtonCommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyle() }
        set { try! _default.put_CloseButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.content)
    public var content : Any! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplate() }
        set { try! _default.put_ContentTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSource() }
        set { try! _default.put_IconSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isclosable)
    public var isClosable : Bool {
        get { try! _default.get_IsClosable() }
        set { try! _default.put_IsClosable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isiconvisible)
    public var isIconVisible : Bool {
        get { try! _default.get_IsIconVisible() }
        set { try! _default.put_IsIconVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpen() }
        set { try! _default.put_IsOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.message)
    public var message : String {
        get { try! _default.get_Message() }
        set { try! _default.put_Message(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.severity)
    public var severity : InfoBarSeverity {
        get { try! _default.get_Severity() }
        set { try! _default.put_Severity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.templatesettings)
    public var templateSettings : InfoBarTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<InfoBar?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseButtonClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseButtonClick($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closed)
    public lazy var closed : Event<TypedEventHandler<InfoBar?, InfoBarClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closing)
    public lazy var closing : Event<TypedEventHandler<InfoBar?, InfoBarClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closing($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosedeventargs)
open class InfoBarClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarClosedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosedEventArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosedeventargs.reason)
    public var reason : InfoBarCloseReason {
        get { try! _default.get_Reason() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosingeventargs)
open class InfoBarClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarClosingEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosingEventArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosingeventargs.reason)
    public var reason : InfoBarCloseReason {
        get { try! _default.get_Reason() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobartemplatesettings)
open class InfoBarTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettingsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.InfoBarTemplateSettingsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBarTemplateSettingsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBarTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettingsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobartemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarTemplateSettingsStatics.get_IconElementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobartemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElement() }
        set { try! _default.put_IconElement(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.istexttrimmedchangedeventargs)
public final class IsTextTrimmedChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIsTextTrimmedChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemclickeventargs)
public final class ItemClickEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemClickEventArgs")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemclickeventargs.clickeditem)
    public var clickedItem : Any! {
        get { try! _default.get_ClickedItem() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection)
public final class ItemCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Any?
    private typealias SwiftABI = WinUI.IObservableVectorAny
    private typealias CABI = __x_ABI_C__FIObservableVector_1_IInspectable
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.vectorchanged)
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VectorChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VectorChanged($0)
       }
      )
    }()

    private lazy var _IVector: IVectorAny! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getat)
    public func getAt(_ index: UInt32) -> Any? {
        try! _IVector.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Any?>? {
        try! _IVector.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.indexof)
    public func indexOf(_ value: Any?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.setat)
    public func setAt(_ index: UInt32, _ value: Any?) {
        try! _IVector.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Any?) {
        try! _IVector.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.append)
    public func append(_ value: Any?) {
        try! _IVector.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.clear)
    public func clear() {
        try! _IVector.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [Any?]) -> UInt32 {
        try! _IVector.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.replaceall)
    public func replaceAll(_ items: [Any?]) {
        try! _IVector.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_Size() }
    }

    private lazy var _IIterable: IIterableAny! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Any?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition)
public final class ItemCollectionTransition : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.start)
    public func start() throws -> ItemCollectionTransitionProgress! {
        try _default.Start()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.hasstarted)
    public var hasStarted : Bool {
        get { try! _default.get_HasStarted() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.newbounds)
    public var newBounds : WindowsFoundation.Rect {
        get { try! _default.get_NewBounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.oldbounds)
    public var oldBounds : WindowsFoundation.Rect {
        get { try! _default.get_OldBounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.operation)
    public var operation : ItemCollectionTransitionOperation {
        get { try! _default.get_Operation() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.triggers)
    public var triggers : ItemCollectionTransitionTriggers {
        get { try! _default.get_Triggers() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitioncompletedeventargs)
public final class ItemCollectionTransitionCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitioncompletedeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_Element() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitioncompletedeventargs.transition)
    public var transition : ItemCollectionTransition! {
        get { try! _default.get_Transition() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress)
public final class ItemCollectionTransitionProgress : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProgress
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress.complete)
    public func complete() throws {
        try _default.Complete()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_Element() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress.transition)
    public var transition : ItemCollectionTransition! {
        get { try! _default.get_Transition() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider)
open class ItemCollectionTransitionProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProvider
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IItemCollectionTransitionProviderFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.ItemCollectionTransitionProviderBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IItemCollectionTransitionProviderFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.shouldanimate)
    public func shouldAnimate(_ transition: ItemCollectionTransition!) throws -> Bool {
        try _default.ShouldAnimate(transition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.queuetransition)
    public func queueTransition(_ transition: ItemCollectionTransition!) throws {
        try _default.QueueTransition(transition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.transitioncompleted)
    public lazy var transitionCompleted : Event<TypedEventHandler<ItemCollectionTransitionProvider?, ItemCollectionTransitionCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TransitionCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TransitionCompleted($0)
       }
      )
    }()

    private lazy var _IItemCollectionTransitionProviderOverrides: __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.shouldanimatecore)
    open func shouldAnimateCore(_ transition: ItemCollectionTransition!) throws -> Bool {
        try _IItemCollectionTransitionProviderOverrides.ShouldAnimateCore(transition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.starttransitions)
    open func startTransitions(_ transitions: WindowsFoundation.AnyIVector<ItemCollectionTransition?>!) throws {
        try _IItemCollectionTransitionProviderOverrides.StartTransitions(transitions)
    }

    deinit {
        _default = nil
        _IItemCollectionTransitionProviderOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator)
public final class ItemContainerGenerator : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerGenerator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.itemfromcontainer)
    public func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _default.ItemFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromItem(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.indexfromcontainer)
    public func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
        try _default.IndexFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromIndex(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.getitemcontainergeneratorforpanel)
    public func getItemContainerGeneratorForPanel(_ panel: Panel!) throws -> ItemContainerGenerator! {
        try _default.GetItemContainerGeneratorForPanel(panel)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.startat)
    public func startAt(_ position: WinUI.GeneratorPosition, _ direction: WinUI.GeneratorDirection, _ allowStartAtRealizedItem: Bool) throws {
        try _default.StartAt(position, direction, allowStartAtRealizedItem)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.stop)
    public func stop() throws {
        try _default.Stop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.generatenext)
    public func generateNext(_ isNewlyRealized: inout Bool) throws -> WinUI.DependencyObject! {
        try _default.GenerateNext(&isNewlyRealized)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.prepareitemcontainer)
    public func prepareItemContainer(_ container: WinUI.DependencyObject!) throws {
        try _default.PrepareItemContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.removeall)
    public func removeAll() throws {
        try _default.RemoveAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.remove)
    public func remove(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
        try _default.Remove(position, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.generatorpositionfromindex)
    public func generatorPositionFromIndex(_ itemIndex: Int32) throws -> WinUI.GeneratorPosition {
        try _default.GeneratorPositionFromIndex(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.indexfromgeneratorposition)
    public func indexFromGeneratorPosition(_ position: WinUI.GeneratorPosition) throws -> Int32 {
        try _default.IndexFromGeneratorPosition(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.recycle)
    public func recycle(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
        try _default.Recycle(position, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.itemschanged)
    public lazy var itemsChanged : Event<WinUI.ItemsChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemsChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemsChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol)
open class ItemsControl : WinUI.Control, IItemContainerMapping {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IItemsControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsControlFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsControl")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ItemsControlBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemsControlFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IItemsControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsControlStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsControl")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.getitemsowner)
    public class func getItemsOwner(_ element: WinUI.DependencyObject!) throws -> ItemsControl! {
        return try _IItemsControlStatics.GetItemsOwner(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemscontrolfromitemcontainer)
    public class func itemsControlFromItemContainer(_ container: WinUI.DependencyObject!) throws -> ItemsControl! {
        return try _IItemsControlStatics.ItemsControlFromItemContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.displaymemberpathproperty)
    public class var displayMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_DisplayMemberPathProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyleselectorproperty)
    public class var groupStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_GroupStyleSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isgroupingproperty)
    public class var isGroupingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_IsGroupingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleproperty)
    public class var itemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleselectorproperty)
    public class var itemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerStyleSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainertransitionsproperty)
    public class var itemContainerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateselectorproperty)
    public class var itemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemTemplateSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanelproperty)
    public class var itemsPanelProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemsPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupheadercontainerfromitemcontainer)
    public func groupHeaderContainerFromItemContainer(_ itemContainer: WinUI.DependencyObject!) throws -> WinUI.DependencyObject! {
        try _default.GroupHeaderContainerFromItemContainer(itemContainer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.displaymemberpath)
    public var displayMemberPath : String {
        get { try! _default.get_DisplayMemberPath() }
        set { try! _default.put_DisplayMemberPath(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyle)
    public var groupStyle : WindowsFoundation.AnyIObservableVector<GroupStyle?>! {
        get { try! _default.get_GroupStyle() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyleselector)
    public var groupStyleSelector : GroupStyleSelector! {
        get { try! _default.get_GroupStyleSelector() }
        set { try! _default.put_GroupStyleSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isgrouping)
    public var isGrouping : Bool {
        get { try! _default.get_IsGrouping() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainergenerator)
    public var itemContainerGenerator : ItemContainerGenerator! {
        get { try! _default.get_ItemContainerGenerator() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyle)
    public var itemContainerStyle : WinUI.Style! {
        get { try! _default.get_ItemContainerStyle() }
        set { try! _default.put_ItemContainerStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleselector)
    public var itemContainerStyleSelector : StyleSelector! {
        get { try! _default.get_ItemContainerStyleSelector() }
        set { try! _default.put_ItemContainerStyleSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainertransitions)
    public var itemContainerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ItemContainerTransitions() }
        set { try! _default.put_ItemContainerTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplate)
    public var itemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ItemTemplate() }
        set { try! _default.put_ItemTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateselector)
    public var itemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ItemTemplateSelector() }
        set { try! _default.put_ItemTemplateSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.items)
    public var items : ItemCollection! {
        get { try! _default.get_Items() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanel)
    public var itemsPanel : ItemsPanelTemplate! {
        get { try! _default.get_ItemsPanel() }
        set { try! _default.put_ItemsPanel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanelroot)
    public var itemsPanelRoot : Panel! {
        get { try! _default.get_ItemsPanelRoot() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSource() }
        set { try! _default.put_ItemsSource(newValue) }
    }

    private lazy var _IItemsControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isitemitsowncontaineroverride)
    open func isItemItsOwnContainerOverride(_ item: Any!) throws -> Bool {
        try _IItemsControlOverrides.IsItemItsOwnContainerOverride(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.getcontainerforitemoverride)
    open func getContainerForItemOverride() throws -> WinUI.DependencyObject! {
        try _IItemsControlOverrides.GetContainerForItemOverride()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.clearcontainerforitemoverride)
    open func clearContainerForItemOverride(_ element: WinUI.DependencyObject!, _ item: Any!) throws {
        try _IItemsControlOverrides.ClearContainerForItemOverride(element, item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.preparecontainerforitemoverride)
    open func prepareContainerForItemOverride(_ element: WinUI.DependencyObject!, _ item: Any!) throws {
        try _IItemsControlOverrides.PrepareContainerForItemOverride(element, item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemschanged)
    open func onItemsChanged(_ e: Any!) throws {
        try _IItemsControlOverrides.OnItemsChanged(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemcontainerstylechanged)
    open func onItemContainerStyleChanged(_ oldItemContainerStyle: WinUI.Style!, _ newItemContainerStyle: WinUI.Style!) throws {
        try _IItemsControlOverrides.OnItemContainerStyleChanged(oldItemContainerStyle, newItemContainerStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemcontainerstyleselectorchanged)
    open func onItemContainerStyleSelectorChanged(_ oldItemContainerStyleSelector: StyleSelector!, _ newItemContainerStyleSelector: StyleSelector!) throws {
        try _IItemsControlOverrides.OnItemContainerStyleSelectorChanged(oldItemContainerStyleSelector, newItemContainerStyleSelector)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemtemplatechanged)
    open func onItemTemplateChanged(_ oldItemTemplate: WinUI.DataTemplate!, _ newItemTemplate: WinUI.DataTemplate!) throws {
        try _IItemsControlOverrides.OnItemTemplateChanged(oldItemTemplate, newItemTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemtemplateselectorchanged)
    open func onItemTemplateSelectorChanged(_ oldItemTemplateSelector: DataTemplateSelector!, _ newItemTemplateSelector: DataTemplateSelector!) throws {
        try _IItemsControlOverrides.OnItemTemplateSelectorChanged(oldItemTemplateSelector, newItemTemplateSelector)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.ongroupstyleselectorchanged)
    open func onGroupStyleSelectorChanged(_ oldGroupStyleSelector: GroupStyleSelector!, _ newGroupStyleSelector: GroupStyleSelector!) throws {
        try _IItemsControlOverrides.OnGroupStyleSelectorChanged(oldGroupStyleSelector, newGroupStyleSelector)
    }

    private lazy var _IItemContainerMapping: __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemfromcontainer)
    public func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _IItemContainerMapping.ItemFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _IItemContainerMapping.ContainerFromItem(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.indexfromcontainer)
    public func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
        try _IItemContainerMapping.IndexFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _IItemContainerMapping.ContainerFromIndex(index)
    }

    deinit {
        _default = nil
        _IItemsControlOverrides = nil
        _IItemContainerMapping = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspaneltemplate)
public final class ItemsPanelTemplate : WinUI.FrameworkTemplate {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsPanelTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsPanelTemplate")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater)
open class ItemsRepeater : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeater
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemsRepeaterFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsRepeater")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ItemsRepeaterBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemsRepeaterFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IItemsRepeaterStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsRepeater")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_BackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.horizontalcachelengthproperty)
    public class var horizontalCacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_HorizontalCacheLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_ItemTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_ItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.layoutproperty)
    public class var layoutProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_LayoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.verticalcachelengthproperty)
    public class var verticalCacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_VerticalCacheLengthProperty() }
    }

    private static let _IItemsRepeaterStatics2: __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsRepeater")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtransitionproviderproperty)
    public class var itemTransitionProviderProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics2.get_ItemTransitionProviderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.getelementindex)
    public func getElementIndex(_ element: WinUI.UIElement!) throws -> Int32 {
        try _default.GetElementIndex(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.trygetelement)
    public func tryGetElement(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.TryGetElement(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.getorcreateelement)
    public func getOrCreateElement(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.GetOrCreateElement(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.horizontalcachelength)
    public var horizontalCacheLength : Double {
        get { try! _default.get_HorizontalCacheLength() }
        set { try! _default.put_HorizontalCacheLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtemplate)
    public var itemTemplate : Any! {
        get { try! _default.get_ItemTemplate() }
        set { try! _default.put_ItemTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSource() }
        set { try! _default.put_ItemsSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemssourceview)
    public var itemsSourceView : ItemsSourceView! {
        get { try! _default.get_ItemsSourceView() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.layout)
    public var layout : Layout! {
        get { try! _default.get_Layout() }
        set { try! _default.put_Layout(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.verticalcachelength)
    public var verticalCacheLength : Double {
        get { try! _default.get_VerticalCacheLength() }
        set { try! _default.put_VerticalCacheLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.elementclearing)
    public lazy var elementClearing : Event<TypedEventHandler<ItemsRepeater?, ItemsRepeaterElementClearingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ElementClearing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ElementClearing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.elementindexchanged)
    public lazy var elementIndexChanged : Event<TypedEventHandler<ItemsRepeater?, ItemsRepeaterElementIndexChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ElementIndexChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ElementIndexChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.elementprepared)
    public lazy var elementPrepared : Event<TypedEventHandler<ItemsRepeater?, ItemsRepeaterElementPreparedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ElementPrepared($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ElementPrepared($0)
       }
      )
    }()

    private lazy var _IItemsRepeater2: __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeater2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtransitionprovider)
    public var itemTransitionProvider : ItemCollectionTransitionProvider! {
        get { try! _IItemsRepeater2.get_ItemTransitionProvider() }
        set { try! _IItemsRepeater2.put_ItemTransitionProvider(newValue) }
    }

    deinit {
        _default = nil
        _IItemsRepeater2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementclearingeventargs)
public final class ItemsRepeaterElementClearingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterElementClearingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementclearingeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_Element() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs)
public final class ItemsRepeaterElementIndexChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterElementIndexChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_Element() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs.newindex)
    public var newIndex : Int32 {
        get { try! _default.get_NewIndex() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs.oldindex)
    public var oldIndex : Int32 {
        get { try! _default.get_OldIndex() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementpreparedeventargs)
public final class ItemsRepeaterElementPreparedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterElementPreparedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementpreparedeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_Element() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementpreparedeventargs.index)
    public var index : Int32 {
        get { try! _default.get_Index() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview)
open class ItemsSourceView : WinRTClass, WinUI.INotifyCollectionChanged {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsSourceView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemsSourceViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsSourceViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsSourceView")

    public init(_ source: Any!) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.ItemsSourceViewBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IItemsSourceViewFactory.CreateInstance(source, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.getat)
    public func getAt(_ index: Int32) throws -> Any! {
        try _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.keyfromindex)
    public func keyFromIndex(_ index: Int32) throws -> String {
        try _default.KeyFromIndex(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.indexfromkey)
    public func indexFromKey(_ key: String) throws -> Int32 {
        try _default.IndexFromKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.indexof)
    public func indexOf(_ item: Any!) throws -> Int32 {
        try _default.IndexOf(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.count)
    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.haskeyindexmapping)
    public var hasKeyIndexMapping : Bool {
        get { try! _default.get_HasKeyIndexMapping() }
    }

    private lazy var _INotifyCollectionChanged: __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChanged! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.collectionchanged)
    public lazy var collectionChanged : Event<WinUI.NotifyCollectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INotifyCollectionChanged else { return .init() }
          return try! this.add_CollectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._INotifyCollectionChanged.remove_CollectionChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
        _INotifyCollectionChanged = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid)
open class ItemsWrapGrid : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemsWrapGridFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGridFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsWrapGrid")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ItemsWrapGridBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemsWrapGridFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IItemsWrapGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGridStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ItemsWrapGrid")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.arestickygroupheadersenabledproperty)
    public class var areStickyGroupHeadersEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_AreStickyGroupHeadersEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.cachelengthproperty)
    public class var cacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_CacheLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.groupheaderplacementproperty)
    public class var groupHeaderPlacementProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_GroupHeaderPlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.grouppaddingproperty)
    public class var groupPaddingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_GroupPaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemheightproperty)
    public class var itemHeightProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_ItemHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemwidthproperty)
    public class var itemWidthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_ItemWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.maximumrowsorcolumnsproperty)
    public class var maximumRowsOrColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_MaximumRowsOrColumnsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.arestickygroupheadersenabled)
    public var areStickyGroupHeadersEnabled : Bool {
        get { try! _default.get_AreStickyGroupHeadersEnabled() }
        set { try! _default.put_AreStickyGroupHeadersEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.cachelength)
    public var cacheLength : Double {
        get { try! _default.get_CacheLength() }
        set { try! _default.put_CacheLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.firstcacheindex)
    public var firstCacheIndex : Int32 {
        get { try! _default.get_FirstCacheIndex() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.firstvisibleindex)
    public var firstVisibleIndex : Int32 {
        get { try! _default.get_FirstVisibleIndex() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.groupheaderplacement)
    public var groupHeaderPlacement : WinUI.GroupHeaderPlacement {
        get { try! _default.get_GroupHeaderPlacement() }
        set { try! _default.put_GroupHeaderPlacement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.grouppadding)
    public var groupPadding : WinUI.Thickness {
        get { try! _default.get_GroupPadding() }
        set { try! _default.put_GroupPadding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemheight)
    public var itemHeight : Double {
        get { try! _default.get_ItemHeight() }
        set { try! _default.put_ItemHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemwidth)
    public var itemWidth : Double {
        get { try! _default.get_ItemWidth() }
        set { try! _default.put_ItemWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.lastcacheindex)
    public var lastCacheIndex : Int32 {
        get { try! _default.get_LastCacheIndex() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.lastvisibleindex)
    public var lastVisibleIndex : Int32 {
        get { try! _default.get_LastVisibleIndex() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.maximumrowsorcolumns)
    public var maximumRowsOrColumns : Int32 {
        get { try! _default.get_MaximumRowsOrColumns() }
        set { try! _default.put_MaximumRowsOrColumns(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.orientation)
    public var orientation : Orientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.scrollingdirection)
    public var scrollingDirection : PanelScrollingDirection {
        get { try! _default.get_ScrollingDirection() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout)
open class Layout : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ILayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.ILayoutFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Layout")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.initializeforcontext)
    public func initializeForContext(_ context: LayoutContext!) throws {
        try _default.InitializeForContext(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.uninitializeforcontext)
    public func uninitializeForContext(_ context: LayoutContext!) throws {
        try _default.UninitializeForContext(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.measure)
    public func measure(_ context: LayoutContext!, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _default.Measure(context, availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.arrange)
    public func arrange(_ context: LayoutContext!, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _default.Arrange(context, finalSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.arrangeinvalidated)
    public lazy var arrangeInvalidated : Event<TypedEventHandler<Layout?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ArrangeInvalidated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ArrangeInvalidated($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.measureinvalidated)
    public lazy var measureInvalidated : Event<TypedEventHandler<Layout?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MeasureInvalidated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MeasureInvalidated($0)
       }
      )
    }()

    private lazy var _ILayout2: __ABI_Microsoft_UI_Xaml_Controls.ILayout2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.indexbasedlayoutorientation)
    public var indexBasedLayoutOrientation : IndexBasedLayoutOrientation {
        get { try! _ILayout2.get_IndexBasedLayoutOrientation() }
    }

    private lazy var _ILayoutProtected: __ABI_Microsoft_UI_Xaml_Controls.ILayoutProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.invalidatemeasure)
    public func invalidateMeasure() throws {
        try _ILayoutProtected.InvalidateMeasure()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.invalidatearrange)
    public func invalidateArrange() throws {
        try _ILayoutProtected.InvalidateArrange()
    }

    private lazy var _ILayoutProtected2: __ABI_Microsoft_UI_Xaml_Controls.ILayoutProtected2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.setindexbasedlayoutorientation)
    public func setIndexBasedLayoutOrientation(_ orientation: IndexBasedLayoutOrientation) throws {
        try _ILayoutProtected2.SetIndexBasedLayoutOrientation(orientation)
    }

    private lazy var _ILayoutOverrides: __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.createdefaultitemtransitionprovider)
    open func createDefaultItemTransitionProvider() throws -> ItemCollectionTransitionProvider! {
        try _ILayoutOverrides.CreateDefaultItemTransitionProvider()
    }

    deinit {
        _default = nil
        _ILayout2 = nil
        _ILayoutProtected = nil
        _ILayoutProtected2 = nil
        _ILayoutOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layoutcontext)
open class LayoutContext : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContext
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ILayoutContextFactory : __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.LayoutContext")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layoutcontext.layoutstate)
    public var layoutState : Any! {
        get { try! _default.get_LayoutState() }
        set { try! _default.put_LayoutState(newValue) }
    }

    private lazy var _ILayoutContextOverrides: __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layoutcontext.layoutstatecore)
    open var layoutStateCore : Any! {
        get { try! _ILayoutContextOverrides.get_LayoutStateCore() }
        set { try! _ILayoutContextOverrides.put_LayoutStateCore(newValue) }
    }

    deinit {
        _default = nil
        _ILayoutContextOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox)
open class ListBox : WinUI.Selector {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.IListBoxFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListBox")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ListBoxBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListBoxFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IListBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IListBoxStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListBox")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IListBoxStatics.get_SelectionModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _IListBoxStatics.get_SingleSelectionFollowsFocusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.scrollintoview)
    public func scrollIntoView(_ item: Any!) throws {
        try _default.ScrollIntoView(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selectall)
    public func selectAll() throws {
        try _default.SelectAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_SelectedItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selectionmode)
    public var selectionMode : SelectionMode {
        get { try! _default.get_SelectionMode() }
        set { try! _default.put_SelectionMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Bool {
        get { try! _default.get_SingleSelectionFollowsFocus() }
        set { try! _default.put_SingleSelectionFollowsFocus(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listboxitem)
open class ListBoxItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBoxItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListBoxItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListBoxItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListBoxItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ListBoxItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListBoxItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listview)
open class ListView : WinUI.ListViewBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListView")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ListViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase)
open class ListViewBase : WinUI.Selector, ISemanticZoomInformation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListViewBase")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ListViewBaseBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewBaseFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IListViewBaseStatics: __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListViewBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.candragitemsproperty)
    public class var canDragItemsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_CanDragItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.canreorderitemsproperty)
    public class var canReorderItemsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_CanReorderItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.datafetchsizeproperty)
    public class var dataFetchSizeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_DataFetchSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footerproperty)
    public class var footerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertemplateproperty)
    public class var footerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertransitionsproperty)
    public class var footerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertransitionsproperty)
    public class var headerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingthresholdproperty)
    public class var incrementalLoadingThresholdProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IncrementalLoadingThresholdProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingtriggerproperty)
    public class var incrementalLoadingTriggerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IncrementalLoadingTriggerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isactiveviewproperty)
    public class var isActiveViewProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsActiveViewProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isitemclickenabledproperty)
    public class var isItemClickEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsItemClickEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.ismultiselectcheckboxenabledproperty)
    public class var isMultiSelectCheckBoxEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsMultiSelectCheckBoxEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isswipeenabledproperty)
    public class var isSwipeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsSwipeEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.iszoomedinviewproperty)
    public class var isZoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsZoomedInViewProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.reordermodeproperty)
    public class var reorderModeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_ReorderModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SelectionModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.semanticzoomownerproperty)
    public class var semanticZoomOwnerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SemanticZoomOwnerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.showsscrollingplaceholdersproperty)
    public class var showsScrollingPlaceholdersProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_ShowsScrollingPlaceholdersProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SingleSelectionFollowsFocusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.scrollintoview)
    public func scrollIntoView(_ item: Any!) throws {
        try _default.ScrollIntoView(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectall)
    public func selectAll() throws {
        try _default.SelectAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.loadmoreitemsasync)
    public func loadMoreItemsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.LoadMoreItemsResult>! {
        try _default.LoadMoreItemsAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.scrollintoview)
    public func scrollIntoView(_ item: Any!, _ alignment: ScrollIntoViewAlignment) throws {
        try _default.ScrollIntoViewWithAlignment(item, alignment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.setdesiredcontainerupdateduration)
    public func setDesiredContainerUpdateDuration(_ duration: WindowsFoundation.TimeSpan) throws {
        try _default.SetDesiredContainerUpdateDuration(duration)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectrange)
    public func selectRange(_ itemIndexRange: WinUI.ItemIndexRange!) throws {
        try _default.SelectRange(itemIndexRange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.deselectrange)
    public func deselectRange(_ itemIndexRange: WinUI.ItemIndexRange!) throws {
        try _default.DeselectRange(itemIndexRange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isdragsource)
    public func isDragSource() throws -> Bool {
        try _default.IsDragSource()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.trystartconnectedanimationasync)
    public func tryStartConnectedAnimationAsync(_ animation: WinUI.ConnectedAnimation!, _ item: Any!, _ elementName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _default.TryStartConnectedAnimationAsync(animation, item, elementName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.prepareconnectedanimation)
    public func prepareConnectedAnimation(_ key: String, _ item: Any!, _ elementName: String) throws -> WinUI.ConnectedAnimation! {
        try _default.PrepareConnectedAnimation(key, item, elementName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.candragitems)
    public var canDragItems : Bool {
        get { try! _default.get_CanDragItems() }
        set { try! _default.put_CanDragItems(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.canreorderitems)
    public var canReorderItems : Bool {
        get { try! _default.get_CanReorderItems() }
        set { try! _default.put_CanReorderItems(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.datafetchsize)
    public var dataFetchSize : Double {
        get { try! _default.get_DataFetchSize() }
        set { try! _default.put_DataFetchSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footer)
    public var footer : Any! {
        get { try! _default.get_Footer() }
        set { try! _default.put_Footer(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertemplate)
    public var footerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_FooterTemplate() }
        set { try! _default.put_FooterTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertransitions)
    public var footerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_FooterTransitions() }
        set { try! _default.put_FooterTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertransitions)
    public var headerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_HeaderTransitions() }
        set { try! _default.put_HeaderTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingthreshold)
    public var incrementalLoadingThreshold : Double {
        get { try! _default.get_IncrementalLoadingThreshold() }
        set { try! _default.put_IncrementalLoadingThreshold(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingtrigger)
    public var incrementalLoadingTrigger : IncrementalLoadingTrigger {
        get { try! _default.get_IncrementalLoadingTrigger() }
        set { try! _default.put_IncrementalLoadingTrigger(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isitemclickenabled)
    public var isItemClickEnabled : Bool {
        get { try! _default.get_IsItemClickEnabled() }
        set { try! _default.put_IsItemClickEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.ismultiselectcheckboxenabled)
    public var isMultiSelectCheckBoxEnabled : Bool {
        get { try! _default.get_IsMultiSelectCheckBoxEnabled() }
        set { try! _default.put_IsMultiSelectCheckBoxEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isswipeenabled)
    public var isSwipeEnabled : Bool {
        get { try! _default.get_IsSwipeEnabled() }
        set { try! _default.put_IsSwipeEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.reordermode)
    public var reorderMode : ListViewReorderMode {
        get { try! _default.get_ReorderMode() }
        set { try! _default.put_ReorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_SelectedItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectedranges)
    public var selectedRanges : WindowsFoundation.AnyIVectorView<WinUI.ItemIndexRange?>! {
        get { try! _default.get_SelectedRanges() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectionmode)
    public var selectionMode : ListViewSelectionMode {
        get { try! _default.get_SelectionMode() }
        set { try! _default.put_SelectionMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.showsscrollingplaceholders)
    public var showsScrollingPlaceholders : Bool {
        get { try! _default.get_ShowsScrollingPlaceholders() }
        set { try! _default.put_ShowsScrollingPlaceholders(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Bool {
        get { try! _default.get_SingleSelectionFollowsFocus() }
        set { try! _default.put_SingleSelectionFollowsFocus(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.choosinggroupheadercontainer)
    public lazy var choosingGroupHeaderContainer : Event<TypedEventHandler<ListViewBase?, ChoosingGroupHeaderContainerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChoosingGroupHeaderContainer($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChoosingGroupHeaderContainer($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.choosingitemcontainer)
    public lazy var choosingItemContainer : Event<TypedEventHandler<ListViewBase?, ChoosingItemContainerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChoosingItemContainer($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChoosingItemContainer($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.containercontentchanging)
    public lazy var containerContentChanging : Event<TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContainerContentChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContainerContentChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.dragitemscompleted)
    public lazy var dragItemsCompleted : Event<TypedEventHandler<ListViewBase?, DragItemsCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragItemsCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragItemsCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.dragitemsstarting)
    public lazy var dragItemsStarting : Event<DragItemsStartingEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragItemsStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragItemsStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.itemclick)
    public lazy var itemClick : Event<ItemClickEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemClick($0)
       }
      )
    }()

    private lazy var _ISemanticZoomInformation: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.initializeviewchange)
    public func initializeViewChange() throws {
        try _ISemanticZoomInformation.InitializeViewChange()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchange)
    public func completeViewChange() throws {
        try _ISemanticZoomInformation.CompleteViewChange()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.makevisible)
    public func makeVisible(_ item: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.MakeVisible(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.startviewchangefrom)
    public func startViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeFrom(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.startviewchangeto)
    public func startViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeTo(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchangefrom)
    public func completeViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeFrom(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchangeto)
    public func completeViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeTo(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isactiveview)
    public var isActiveView : Bool {
        get { try! _ISemanticZoomInformation.get_IsActiveView() }
        set { try! _ISemanticZoomInformation.put_IsActiveView(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.iszoomedinview)
    public var isZoomedInView : Bool {
        get { try! _ISemanticZoomInformation.get_IsZoomedInView() }
        set { try! _ISemanticZoomInformation.put_IsZoomedInView(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.semanticzoomowner)
    public var semanticZoomOwner : SemanticZoom! {
        get { try! _ISemanticZoomInformation.get_SemanticZoomOwner() }
        set { try! _ISemanticZoomInformation.put_SemanticZoomOwner(newValue) }
    }

    deinit {
        _default = nil
        _ISemanticZoomInformation = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbaseheaderitem)
open class ListViewBaseHeaderItem : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewBaseHeaderItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewitem)
open class ListViewItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ListViewItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ListViewItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewitem.templatesettings)
    public var templateSettings : WinUI.ListViewItemTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement)
open class MediaPlayerElement : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMediaPlayerElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElementFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MediaPlayerElement")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MediaPlayerElementBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMediaPlayerElementFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMediaPlayerElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElementStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MediaPlayerElement")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.aretransportcontrolsenabledproperty)
    public class var areTransportControlsEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_AreTransportControlsEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.autoplayproperty)
    public class var autoPlayProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_AutoPlayProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.isfullwindowproperty)
    public class var isFullWindowProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_IsFullWindowProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.mediaplayerproperty)
    public class var mediaPlayerProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_MediaPlayerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.postersourceproperty)
    public class var posterSourceProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_PosterSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_SourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.stretchproperty)
    public class var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_StretchProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.setmediaplayer)
    public func setMediaPlayer(_ mediaPlayer: UWP.MediaPlayer!) throws {
        try _default.SetMediaPlayer(mediaPlayer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.aretransportcontrolsenabled)
    public var areTransportControlsEnabled : Bool {
        get { try! _default.get_AreTransportControlsEnabled() }
        set { try! _default.put_AreTransportControlsEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.autoplay)
    public var autoPlay : Bool {
        get { try! _default.get_AutoPlay() }
        set { try! _default.put_AutoPlay(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.isfullwindow)
    public var isFullWindow : Bool {
        get { try! _default.get_IsFullWindow() }
        set { try! _default.put_IsFullWindow(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.mediaplayer)
    public var mediaPlayer : UWP.MediaPlayer! {
        get { try! _default.get_MediaPlayer() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.postersource)
    public var posterSource : WinUI.ImageSource! {
        get { try! _default.get_PosterSource() }
        set { try! _default.put_PosterSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.source)
    public var source : UWP.AnyIMediaPlaybackSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_Stretch() }
        set { try! _default.put_Stretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.transportcontrols)
    public var transportControls : MediaTransportControls! {
        get { try! _default.get_TransportControls() }
        set { try! _default.put_TransportControls(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols)
open class MediaTransportControls : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControls
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMediaTransportControlsFactory : __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControlsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MediaTransportControls")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MediaTransportControlsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMediaTransportControlsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMediaTransportControlsStatics: __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControlsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MediaTransportControls")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.fastplayfallbackbehaviourproperty)
    public class var fastPlayFallbackBehaviourProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_FastPlayFallbackBehaviourProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iscompactproperty)
    public class var isCompactProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsCompactProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardbuttonvisibleproperty)
    public class var isFastForwardButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastForwardButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardenabledproperty)
    public class var isFastForwardEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastForwardEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindbuttonvisibleproperty)
    public class var isFastRewindButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastRewindButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindenabledproperty)
    public class var isFastRewindEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastRewindEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isnexttrackbuttonvisibleproperty)
    public class var isNextTrackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsNextTrackButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackratebuttonvisibleproperty)
    public class var isPlaybackRateButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsPlaybackRateButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackrateenabledproperty)
    public class var isPlaybackRateEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsPlaybackRateEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isprevioustrackbuttonvisibleproperty)
    public class var isPreviousTrackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsPreviousTrackButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatbuttonvisibleproperty)
    public class var isRepeatButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsRepeatButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatenabledproperty)
    public class var isRepeatEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsRepeatEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekbarvisibleproperty)
    public class var isSeekBarVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSeekBarVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekenabledproperty)
    public class var isSeekEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSeekEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardbuttonvisibleproperty)
    public class var isSkipBackwardButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipBackwardButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardenabledproperty)
    public class var isSkipBackwardEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipBackwardEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardbuttonvisibleproperty)
    public class var isSkipForwardButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipForwardButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardenabledproperty)
    public class var isSkipForwardEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipForwardEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopbuttonvisibleproperty)
    public class var isStopButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsStopButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopenabledproperty)
    public class var isStopEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsStopEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumebuttonvisibleproperty)
    public class var isVolumeButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsVolumeButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumeenabledproperty)
    public class var isVolumeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsVolumeEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoombuttonvisibleproperty)
    public class var isZoomButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsZoomButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoomenabledproperty)
    public class var isZoomEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsZoomEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.showandhideautomaticallyproperty)
    public class var showAndHideAutomaticallyProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_ShowAndHideAutomaticallyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.show)
    public func show() throws {
        try _default.Show()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.hide)
    public func hide() throws {
        try _default.Hide()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.fastplayfallbackbehaviour)
    public var fastPlayFallbackBehaviour : WinUI.FastPlayFallbackBehaviour {
        get { try! _default.get_FastPlayFallbackBehaviour() }
        set { try! _default.put_FastPlayFallbackBehaviour(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iscompact)
    public var isCompact : Bool {
        get { try! _default.get_IsCompact() }
        set { try! _default.put_IsCompact(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardbuttonvisible)
    public var isFastForwardButtonVisible : Bool {
        get { try! _default.get_IsFastForwardButtonVisible() }
        set { try! _default.put_IsFastForwardButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardenabled)
    public var isFastForwardEnabled : Bool {
        get { try! _default.get_IsFastForwardEnabled() }
        set { try! _default.put_IsFastForwardEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindbuttonvisible)
    public var isFastRewindButtonVisible : Bool {
        get { try! _default.get_IsFastRewindButtonVisible() }
        set { try! _default.put_IsFastRewindButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindenabled)
    public var isFastRewindEnabled : Bool {
        get { try! _default.get_IsFastRewindEnabled() }
        set { try! _default.put_IsFastRewindEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isnexttrackbuttonvisible)
    public var isNextTrackButtonVisible : Bool {
        get { try! _default.get_IsNextTrackButtonVisible() }
        set { try! _default.put_IsNextTrackButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackratebuttonvisible)
    public var isPlaybackRateButtonVisible : Bool {
        get { try! _default.get_IsPlaybackRateButtonVisible() }
        set { try! _default.put_IsPlaybackRateButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackrateenabled)
    public var isPlaybackRateEnabled : Bool {
        get { try! _default.get_IsPlaybackRateEnabled() }
        set { try! _default.put_IsPlaybackRateEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isprevioustrackbuttonvisible)
    public var isPreviousTrackButtonVisible : Bool {
        get { try! _default.get_IsPreviousTrackButtonVisible() }
        set { try! _default.put_IsPreviousTrackButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatbuttonvisible)
    public var isRepeatButtonVisible : Bool {
        get { try! _default.get_IsRepeatButtonVisible() }
        set { try! _default.put_IsRepeatButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatenabled)
    public var isRepeatEnabled : Bool {
        get { try! _default.get_IsRepeatEnabled() }
        set { try! _default.put_IsRepeatEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekbarvisible)
    public var isSeekBarVisible : Bool {
        get { try! _default.get_IsSeekBarVisible() }
        set { try! _default.put_IsSeekBarVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekenabled)
    public var isSeekEnabled : Bool {
        get { try! _default.get_IsSeekEnabled() }
        set { try! _default.put_IsSeekEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardbuttonvisible)
    public var isSkipBackwardButtonVisible : Bool {
        get { try! _default.get_IsSkipBackwardButtonVisible() }
        set { try! _default.put_IsSkipBackwardButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardenabled)
    public var isSkipBackwardEnabled : Bool {
        get { try! _default.get_IsSkipBackwardEnabled() }
        set { try! _default.put_IsSkipBackwardEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardbuttonvisible)
    public var isSkipForwardButtonVisible : Bool {
        get { try! _default.get_IsSkipForwardButtonVisible() }
        set { try! _default.put_IsSkipForwardButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardenabled)
    public var isSkipForwardEnabled : Bool {
        get { try! _default.get_IsSkipForwardEnabled() }
        set { try! _default.put_IsSkipForwardEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopbuttonvisible)
    public var isStopButtonVisible : Bool {
        get { try! _default.get_IsStopButtonVisible() }
        set { try! _default.put_IsStopButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopenabled)
    public var isStopEnabled : Bool {
        get { try! _default.get_IsStopEnabled() }
        set { try! _default.put_IsStopEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumebuttonvisible)
    public var isVolumeButtonVisible : Bool {
        get { try! _default.get_IsVolumeButtonVisible() }
        set { try! _default.put_IsVolumeButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumeenabled)
    public var isVolumeEnabled : Bool {
        get { try! _default.get_IsVolumeEnabled() }
        set { try! _default.put_IsVolumeEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoombuttonvisible)
    public var isZoomButtonVisible : Bool {
        get { try! _default.get_IsZoomButtonVisible() }
        set { try! _default.put_IsZoomButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoomenabled)
    public var isZoomEnabled : Bool {
        get { try! _default.get_IsZoomEnabled() }
        set { try! _default.put_IsZoomEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.showandhideautomatically)
    public var showAndHideAutomatically : Bool {
        get { try! _default.get_ShowAndHideAutomatically() }
        set { try! _default.put_ShowAndHideAutomatically(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.thumbnailrequested)
    public lazy var thumbnailRequested : Event<TypedEventHandler<MediaTransportControls?, MediaTransportControlsThumbnailRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ThumbnailRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ThumbnailRequested($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar)
open class MenuBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuBar")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MenuBarBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuBarFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuBarStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuBar")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarStatics.get_ItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar.items)
    public var items : WindowsFoundation.AnyIVector<MenuBarItem?>! {
        get { try! _default.get_Items() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem)
open class MenuBarItem : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuBarItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MenuBarItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuBarItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuBarItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuBarItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarItemStatics.get_ItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarItemStatics.get_TitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_Items() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout)
open class MenuFlyout : WinUI.FlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyout")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MenuFlyoutBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyout")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.menuflyoutpresenterstyleproperty)
    public class var menuFlyoutPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutStatics.get_MenuFlyoutPresenterStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.showat)
    public func showAt(_ targetElement: WinUI.UIElement!, _ point: WindowsFoundation.Point) throws {
        try _default.ShowAt(targetElement, point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_Items() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.menuflyoutpresenterstyle)
    public var menuFlyoutPresenterStyle : WinUI.Style! {
        get { try! _default.get_MenuFlyoutPresenterStyle() }
        set { try! _default.put_MenuFlyoutPresenterStyle(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem)
open class MenuFlyoutItem : WinUI.MenuFlyoutItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyoutItem")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MenuFlyoutItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyoutItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandparameterproperty)
    public class var commandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_CommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandproperty)
    public class var commandProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_CommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_IconProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.keyboardacceleratortextoverrideproperty)
    public class var keyboardAcceleratorTextOverrideProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_KeyboardAcceleratorTextOverrideProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_TextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.command)
    public var command : WinUI.AnyICommand! {
        get { try! _default.get_Command() }
        set { try! _default.put_Command(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandparameter)
    public var commandParameter : Any! {
        get { try! _default.get_CommandParameter() }
        set { try! _default.put_CommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_Icon() }
        set { try! _default.put_Icon(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.keyboardacceleratortextoverride)
    public var keyboardAcceleratorTextOverride : String {
        get { try! _default.get_KeyboardAcceleratorTextOverride() }
        set { try! _default.put_KeyboardAcceleratorTextOverride(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.templatesettings)
    public var templateSettings : WinUI.MenuFlyoutItemTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.click)
    public lazy var click : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Click($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Click($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitembase)
open class MenuFlyoutItemBase : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutItemBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutseparator)
open class MenuFlyoutSeparator : WinUI.MenuFlyoutItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutSeparatorFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparatorFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.MenuFlyoutSeparatorBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutSeparatorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem)
public final class MenuFlyoutSubItem : WinUI.MenuFlyoutItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem")
    public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IMenuFlyoutSubItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.iconproperty)
    public static var iconProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutSubItemStatics.get_IconProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutSubItemStatics.get_TextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_Icon() }
        set { try! _default.put_Icon(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_Items() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview)
open class NavigationView : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationView")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.NavigationViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _INavigationViewStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.alwaysshowheaderproperty)
    public class var alwaysShowHeaderProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_AlwaysShowHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.autosuggestboxproperty)
    public class var autoSuggestBoxProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_AutoSuggestBoxProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactmodethresholdwidthproperty)
    public class var compactModeThresholdWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_CompactModeThresholdWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_CompactPaneLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_DisplayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expandedmodethresholdwidthproperty)
    public class var expandedModeThresholdWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_ExpandedModeThresholdWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemsproperty)
    public class var footerMenuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_FooterMenuItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemssourceproperty)
    public class var footerMenuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_FooterMenuItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispaneopenproperty)
    public class var isPaneOpenProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsPaneOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanetogglebuttonvisibleproperty)
    public class var isPaneToggleButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsPaneToggleButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.issettingsvisibleproperty)
    public class var isSettingsVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsSettingsVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.istitlebarautopaddingenabledproperty)
    public class var isTitleBarAutoPaddingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsTitleBarAutoPaddingEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleproperty)
    public class var menuItemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemContainerStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleselectorproperty)
    public class var menuItemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemContainerStyleSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateproperty)
    public class var menuItemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateselectorproperty)
    public class var menuItemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemTemplateSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemsproperty)
    public class var menuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemssourceproperty)
    public class var menuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_OpenPaneLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panefooterproperty)
    public class var paneFooterProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_PaneFooterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetogglebuttonstyleproperty)
    public class var paneToggleButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_PaneToggleButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_SelectedItemProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.settingsitemproperty)
    public class var settingsItemProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_SettingsItemProperty() }
    }

    private static let _INavigationViewStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.contentoverlayproperty)
    public class var contentOverlayProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_ContentOverlayProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackbuttonvisibleproperty)
    public class var isBackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsBackButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackenabledproperty)
    public class var isBackEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsBackEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanevisibleproperty)
    public class var isPaneVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsPaneVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.overflowlabelmodeproperty)
    public class var overflowLabelModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_OverflowLabelModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panecustomcontentproperty)
    public class var paneCustomContentProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneCustomContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panedisplaymodeproperty)
    public class var paneDisplayModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneDisplayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneheaderproperty)
    public class var paneHeaderProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetitleproperty)
    public class var paneTitleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneTitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionfollowsfocusproperty)
    public class var selectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_SelectionFollowsFocusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.shouldernavigationenabledproperty)
    public class var shoulderNavigationEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_ShoulderNavigationEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_TemplateSettingsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemfromcontainer)
    public func menuItemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _default.MenuItemFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.containerfrommenuitem)
    public func containerFromMenuItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromMenuItem(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.alwaysshowheader)
    public var alwaysShowHeader : Bool {
        get { try! _default.get_AlwaysShowHeader() }
        set { try! _default.put_AlwaysShowHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.autosuggestbox)
    public var autoSuggestBox : AutoSuggestBox! {
        get { try! _default.get_AutoSuggestBox() }
        set { try! _default.put_AutoSuggestBox(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactmodethresholdwidth)
    public var compactModeThresholdWidth : Double {
        get { try! _default.get_CompactModeThresholdWidth() }
        set { try! _default.put_CompactModeThresholdWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLength() }
        set { try! _default.put_CompactPaneLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymode)
    public var displayMode : NavigationViewDisplayMode {
        get { try! _default.get_DisplayMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expandedmodethresholdwidth)
    public var expandedModeThresholdWidth : Double {
        get { try! _default.get_ExpandedModeThresholdWidth() }
        set { try! _default.put_ExpandedModeThresholdWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitems)
    public var footerMenuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_FooterMenuItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemssource)
    public var footerMenuItemsSource : Any! {
        get { try! _default.get_FooterMenuItemsSource() }
        set { try! _default.put_FooterMenuItemsSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispaneopen)
    public var isPaneOpen : Bool {
        get { try! _default.get_IsPaneOpen() }
        set { try! _default.put_IsPaneOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanetogglebuttonvisible)
    public var isPaneToggleButtonVisible : Bool {
        get { try! _default.get_IsPaneToggleButtonVisible() }
        set { try! _default.put_IsPaneToggleButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.issettingsvisible)
    public var isSettingsVisible : Bool {
        get { try! _default.get_IsSettingsVisible() }
        set { try! _default.put_IsSettingsVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.istitlebarautopaddingenabled)
    public var isTitleBarAutoPaddingEnabled : Bool {
        get { try! _default.get_IsTitleBarAutoPaddingEnabled() }
        set { try! _default.put_IsTitleBarAutoPaddingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyle)
    public var menuItemContainerStyle : WinUI.Style! {
        get { try! _default.get_MenuItemContainerStyle() }
        set { try! _default.put_MenuItemContainerStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleselector)
    public var menuItemContainerStyleSelector : StyleSelector! {
        get { try! _default.get_MenuItemContainerStyleSelector() }
        set { try! _default.put_MenuItemContainerStyleSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplate)
    public var menuItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_MenuItemTemplate() }
        set { try! _default.put_MenuItemTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateselector)
    public var menuItemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_MenuItemTemplateSelector() }
        set { try! _default.put_MenuItemTemplateSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitems)
    public var menuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_MenuItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemssource)
    public var menuItemsSource : Any! {
        get { try! _default.get_MenuItemsSource() }
        set { try! _default.put_MenuItemsSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLength() }
        set { try! _default.put_OpenPaneLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panefooter)
    public var paneFooter : WinUI.UIElement! {
        get { try! _default.get_PaneFooter() }
        set { try! _default.put_PaneFooter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetogglebuttonstyle)
    public var paneToggleButtonStyle : WinUI.Style! {
        get { try! _default.get_PaneToggleButtonStyle() }
        set { try! _default.put_PaneToggleButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItem() }
        set { try! _default.put_SelectedItem(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.settingsitem)
    public var settingsItem : Any! {
        get { try! _default.get_SettingsItem() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymodechanged)
    public lazy var displayModeChanged : Event<TypedEventHandler<NavigationView?, NavigationViewDisplayModeChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DisplayModeChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DisplayModeChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.iteminvoked)
    public lazy var itemInvoked : Event<TypedEventHandler<NavigationView?, NavigationViewItemInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemInvoked($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemInvoked($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<NavigationView?, NavigationViewSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChanged($0)
       }
      )
    }()

    private lazy var _INavigationView2: __ABI_Microsoft_UI_Xaml_Controls.INavigationView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expand)
    public func expand(_ item: NavigationViewItem!) throws {
        try _INavigationView2.Expand(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.collapse)
    public func collapse(_ item: NavigationViewItem!) throws {
        try _INavigationView2.Collapse(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.contentoverlay)
    public var contentOverlay : WinUI.UIElement! {
        get { try! _INavigationView2.get_ContentOverlay() }
        set { try! _INavigationView2.put_ContentOverlay(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackbuttonvisible)
    public var isBackButtonVisible : NavigationViewBackButtonVisible {
        get { try! _INavigationView2.get_IsBackButtonVisible() }
        set { try! _INavigationView2.put_IsBackButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackenabled)
    public var isBackEnabled : Bool {
        get { try! _INavigationView2.get_IsBackEnabled() }
        set { try! _INavigationView2.put_IsBackEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanevisible)
    public var isPaneVisible : Bool {
        get { try! _INavigationView2.get_IsPaneVisible() }
        set { try! _INavigationView2.put_IsPaneVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.overflowlabelmode)
    public var overflowLabelMode : NavigationViewOverflowLabelMode {
        get { try! _INavigationView2.get_OverflowLabelMode() }
        set { try! _INavigationView2.put_OverflowLabelMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panecustomcontent)
    public var paneCustomContent : WinUI.UIElement! {
        get { try! _INavigationView2.get_PaneCustomContent() }
        set { try! _INavigationView2.put_PaneCustomContent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panedisplaymode)
    public var paneDisplayMode : NavigationViewPaneDisplayMode {
        get { try! _INavigationView2.get_PaneDisplayMode() }
        set { try! _INavigationView2.put_PaneDisplayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneheader)
    public var paneHeader : WinUI.UIElement! {
        get { try! _INavigationView2.get_PaneHeader() }
        set { try! _INavigationView2.put_PaneHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetitle)
    public var paneTitle : String {
        get { try! _INavigationView2.get_PaneTitle() }
        set { try! _INavigationView2.put_PaneTitle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionfollowsfocus)
    public var selectionFollowsFocus : NavigationViewSelectionFollowsFocus {
        get { try! _INavigationView2.get_SelectionFollowsFocus() }
        set { try! _INavigationView2.put_SelectionFollowsFocus(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.shouldernavigationenabled)
    public var shoulderNavigationEnabled : NavigationViewShoulderNavigationEnabled {
        get { try! _INavigationView2.get_ShoulderNavigationEnabled() }
        set { try! _INavigationView2.put_ShoulderNavigationEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.templatesettings)
    public var templateSettings : NavigationViewTemplateSettings! {
        get { try! _INavigationView2.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.backrequested)
    public lazy var backRequested : Event<TypedEventHandler<NavigationView?, NavigationViewBackRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_BackRequested($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_BackRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.collapsed)
    public lazy var collapsed : Event<TypedEventHandler<NavigationView?, NavigationViewItemCollapsedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_Collapsed($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_Collapsed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expanding)
    public lazy var expanding : Event<TypedEventHandler<NavigationView?, NavigationViewItemExpandingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_Expanding($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_Expanding($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneclosed)
    public lazy var paneClosed : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneClosed($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneClosed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneclosing)
    public lazy var paneClosing : Event<TypedEventHandler<NavigationView?, NavigationViewPaneClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneClosing($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneClosing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneopened)
    public lazy var paneOpened : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneOpened($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneOpened($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneopening)
    public lazy var paneOpening : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneOpening($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneOpening($0)
       }
      )
    }()

    deinit {
        _default = nil
        _INavigationView2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewbackrequestedeventargs)
public final class NavigationViewBackRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewBackRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymodechangedeventargs)
public final class NavigationViewDisplayModeChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewDisplayModeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymodechangedeventargs.displaymode)
    public var displayMode : NavigationViewDisplayMode {
        get { try! _default.get_DisplayMode() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem)
open class NavigationViewItem : WinUI.NavigationViewItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItem")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.NavigationViewItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _INavigationViewItemStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics.get_CompactPaneLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics.get_IconProperty() }
    }

    private static let _INavigationViewItemStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.hasunrealizedchildrenproperty)
    public class var hasUnrealizedChildrenProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_HasUnrealizedChildrenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.ischildselectedproperty)
    public class var isChildSelectedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_IsChildSelectedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_IsExpandedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemsproperty)
    public class var menuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_MenuItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemssourceproperty)
    public class var menuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_MenuItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.selectsoninvokedproperty)
    public class var selectsOnInvokedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_SelectsOnInvokedProperty() }
    }

    private static let _INavigationViewItemStatics3: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics3 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.infobadgeproperty)
    public class var infoBadgeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics3.get_InfoBadgeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_Icon() }
        set { try! _default.put_Icon(newValue) }
    }

    private lazy var _INavigationViewItem2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.hasunrealizedchildren)
    public var hasUnrealizedChildren : Bool {
        get { try! _INavigationViewItem2.get_HasUnrealizedChildren() }
        set { try! _INavigationViewItem2.put_HasUnrealizedChildren(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.ischildselected)
    public var isChildSelected : Bool {
        get { try! _INavigationViewItem2.get_IsChildSelected() }
        set { try! _INavigationViewItem2.put_IsChildSelected(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.isexpanded)
    public var isExpanded : Bool {
        get { try! _INavigationViewItem2.get_IsExpanded() }
        set { try! _INavigationViewItem2.put_IsExpanded(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitems)
    public var menuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _INavigationViewItem2.get_MenuItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemssource)
    public var menuItemsSource : Any! {
        get { try! _INavigationViewItem2.get_MenuItemsSource() }
        set { try! _INavigationViewItem2.put_MenuItemsSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.selectsoninvoked)
    public var selectsOnInvoked : Bool {
        get { try! _INavigationViewItem2.get_SelectsOnInvoked() }
        set { try! _INavigationViewItem2.put_SelectsOnInvoked(newValue) }
    }

    private lazy var _INavigationViewItem3: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.infobadge)
    public var infoBadge : InfoBadge! {
        get { try! _INavigationViewItem3.get_InfoBadge() }
        set { try! _INavigationViewItem3.put_InfoBadge(newValue) }
    }

    deinit {
        _default = nil
        _INavigationViewItem2 = nil
        _INavigationViewItem3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase)
open class NavigationViewItemBase : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBaseFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItemBase")

    private static let _INavigationViewItemBaseStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBaseStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItemBase")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase.isselectedproperty)
    public class var isSelectedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemBaseStatics.get_IsSelectedProperty() }
    }

    private lazy var _INavigationViewItemBase2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase.isselected)
    public var isSelected : Bool {
        get { try! _INavigationViewItemBase2.get_IsSelected() }
        set { try! _INavigationViewItemBase2.put_IsSelected(newValue) }
    }

    deinit {
        _default = nil
        _INavigationViewItemBase2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs)
public final class NavigationViewItemCollapsedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemCollapsedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs.collapseditem)
    public var collapsedItem : Any! {
        get { try! _default.get_CollapsedItem() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs.collapseditemcontainer)
    public var collapsedItemContainer : NavigationViewItemBase! {
        get { try! _default.get_CollapsedItemContainer() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs)
public final class NavigationViewItemExpandingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemExpandingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs.expandingitem)
    public var expandingItem : Any! {
        get { try! _default.get_ExpandingItem() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs.expandingitemcontainer)
    public var expandingItemContainer : NavigationViewItemBase! {
        get { try! _default.get_ExpandingItemContainer() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs)
public final class NavigationViewItemInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.invokeditem)
    public var invokedItem : Any! {
        get { try! _default.get_InvokedItem() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.issettingsinvoked)
    public var isSettingsInvoked : Bool {
        get { try! _default.get_IsSettingsInvoked() }
    }

    private lazy var _INavigationViewItemInvokedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemInvokedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.invokeditemcontainer)
    public var invokedItemContainer : NavigationViewItemBase! {
        get { try! _INavigationViewItemInvokedEventArgs2.get_InvokedItemContainer() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.recommendednavigationtransitioninfo)
    public var recommendedNavigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _INavigationViewItemInvokedEventArgs2.get_RecommendedNavigationTransitionInfo() }
    }

    deinit {
        _default = nil
        _INavigationViewItemInvokedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpaneclosingeventargs)
public final class NavigationViewPaneClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewPaneClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpaneclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs)
public final class NavigationViewSelectionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.issettingsselected)
    public var isSettingsSelected : Bool {
        get { try! _default.get_IsSettingsSelected() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItem() }
    }

    private lazy var _INavigationViewSelectionChangedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewSelectionChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.recommendednavigationtransitioninfo)
    public var recommendedNavigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _INavigationViewSelectionChangedEventArgs2.get_RecommendedNavigationTransitionInfo() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.selecteditemcontainer)
    public var selectedItemContainer : NavigationViewItemBase! {
        get { try! _INavigationViewSelectionChangedEventArgs2.get_SelectedItemContainer() }
    }

    deinit {
        _default = nil
        _INavigationViewSelectionChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings)
open class NavigationViewTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.NavigationViewTemplateSettingsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewTemplateSettingsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _INavigationViewTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.backbuttonvisibilityproperty)
    public class var backButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_BackButtonVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.leftpanevisibilityproperty)
    public class var leftPaneVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_LeftPaneVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.overflowbuttonvisibilityproperty)
    public class var overflowButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_OverflowButtonVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonvisibilityproperty)
    public class var paneToggleButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_PaneToggleButtonVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonwidthproperty)
    public class var paneToggleButtonWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_PaneToggleButtonWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_SingleSelectionFollowsFocusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.smallerpanetogglebuttonwidthproperty)
    public class var smallerPaneToggleButtonWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_SmallerPaneToggleButtonWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppaddingproperty)
    public class var topPaddingProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_TopPaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppanevisibilityproperty)
    public class var topPaneVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_TopPaneVisibilityProperty() }
    }

    private static let _INavigationViewTemplateSettingsStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics2.get_OpenPaneLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.backbuttonvisibility)
    public var backButtonVisibility : WinUI.Visibility {
        get { try! _default.get_BackButtonVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.leftpanevisibility)
    public var leftPaneVisibility : WinUI.Visibility {
        get { try! _default.get_LeftPaneVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.overflowbuttonvisibility)
    public var overflowButtonVisibility : WinUI.Visibility {
        get { try! _default.get_OverflowButtonVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonvisibility)
    public var paneToggleButtonVisibility : WinUI.Visibility {
        get { try! _default.get_PaneToggleButtonVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonwidth)
    public var paneToggleButtonWidth : Double {
        get { try! _default.get_PaneToggleButtonWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Bool {
        get { try! _default.get_SingleSelectionFollowsFocus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.smallerpanetogglebuttonwidth)
    public var smallerPaneToggleButtonWidth : Double {
        get { try! _default.get_SmallerPaneToggleButtonWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppadding)
    public var topPadding : Double {
        get { try! _default.get_TopPadding() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppanevisibility)
    public var topPaneVisibility : WinUI.Visibility {
        get { try! _default.get_TopPaneVisibility() }
    }

    private lazy var _INavigationViewTemplateSettings2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.openpanelength)
    public var openPaneLength : Double {
        get { try! _INavigationViewTemplateSettings2.get_OpenPaneLength() }
    }

    deinit {
        _default = nil
        _INavigationViewTemplateSettings2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page)
open class Page : WinUI.UserControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPage
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IPageOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IPageOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IPageFactory : __ABI_Microsoft_UI_Xaml_Controls.IPageFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Page")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.PageBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPageFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IPageStatics: __ABI_Microsoft_UI_Xaml_Controls.IPageStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Page")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.bottomappbarproperty)
    public class var bottomAppBarProperty : WinUI.DependencyProperty! {
        get { try! _IPageStatics.get_BottomAppBarProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.frameproperty)
    public class var frameProperty : WinUI.DependencyProperty! {
        get { try! _IPageStatics.get_FrameProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.topappbarproperty)
    public class var topAppBarProperty : WinUI.DependencyProperty! {
        get { try! _IPageStatics.get_TopAppBarProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.bottomappbar)
    public var bottomAppBar : AppBar! {
        get { try! _default.get_BottomAppBar() }
        set { try! _default.put_BottomAppBar(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.frame)
    public var frame : Frame! {
        get { try! _default.get_Frame() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.navigationcachemode)
    public var navigationCacheMode : WinUI.NavigationCacheMode {
        get { try! _default.get_NavigationCacheMode() }
        set { try! _default.put_NavigationCacheMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.topappbar)
    public var topAppBar : AppBar! {
        get { try! _default.get_TopAppBar() }
        set { try! _default.put_TopAppBar(newValue) }
    }

    private lazy var _IPageOverrides: __ABI_Microsoft_UI_Xaml_Controls.IPageOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.onnavigatedfrom)
    open func onNavigatedFrom(_ e: WinUI.NavigationEventArgs!) throws {
        try _IPageOverrides.OnNavigatedFrom(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.onnavigatedto)
    open func onNavigatedTo(_ e: WinUI.NavigationEventArgs!) throws {
        try _IPageOverrides.OnNavigatedTo(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.onnavigatingfrom)
    open func onNavigatingFrom(_ e: WinUI.NavigatingCancelEventArgs!) throws {
        try _IPageOverrides.OnNavigatingFrom(e)
    }

    deinit {
        _default = nil
        _IPageOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel)
open class Panel : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IPanelFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Panel")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.PanelBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPanelFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IPanelStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Panel")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_BackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.childrentransitionsproperty)
    public class var childrenTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_ChildrenTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.isitemshostproperty)
    public class var isItemsHostProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_IsItemsHostProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransition() }
        set { try! _default.put_BackgroundTransition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.children)
    public var children : UIElementCollection! {
        get { try! _default.get_Children() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.childrentransitions)
    public var childrenTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildrenTransitions() }
        set { try! _default.put_ChildrenTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.isitemshost)
    public var isItemsHost : Bool {
        get { try! _default.get_IsItemsHost() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox)
public final class PasswordBox : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.PasswordBox")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IPasswordBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IPasswordBoxStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.PasswordBox")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.canpasteclipboardcontentproperty)
    public static var canPasteClipboardContentProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_CanPasteClipboardContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.descriptionproperty)
    public static var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_DescriptionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.inputscopeproperty)
    public static var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_InputScopeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.ispasswordrevealbuttonenabledproperty)
    public static var isPasswordRevealButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_IsPasswordRevealButtonEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.maxlengthproperty)
    public static var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_MaxLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordcharproperty)
    public static var passwordCharProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordCharProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordproperty)
    public static var passwordProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordrevealmodeproperty)
    public static var passwordRevealModeProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordRevealModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.placeholdertextproperty)
    public static var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PlaceholderTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public static var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_SelectionFlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_SelectionHighlightColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_TextReadingOrderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectall)
    public func selectAll() throws {
        try _default.SelectAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.pastefromclipboard)
    public func pasteFromClipboard() throws {
        try _default.PasteFromClipboard()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.canpasteclipboardcontent)
    public var canPasteClipboardContent : Bool {
        get { try! _default.get_CanPasteClipboardContent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.description)
    public var description : Any! {
        get { try! _default.get_Description() }
        set { try! _default.put_Description(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScope() }
        set { try! _default.put_InputScope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.ispasswordrevealbuttonenabled)
    public var isPasswordRevealButtonEnabled : Bool {
        get { try! _default.get_IsPasswordRevealButtonEnabled() }
        set { try! _default.put_IsPasswordRevealButtonEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLength() }
        set { try! _default.put_MaxLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.password)
    public var password : String {
        get { try! _default.get_Password() }
        set { try! _default.put_Password(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchar)
    public var passwordChar : String {
        get { try! _default.get_PasswordChar() }
        set { try! _default.put_PasswordChar(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordrevealmode)
    public var passwordRevealMode : PasswordRevealMode {
        get { try! _default.get_PasswordRevealMode() }
        set { try! _default.put_PasswordRevealMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderText() }
        set { try! _default.put_PlaceholderText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Bool {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocus() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocus(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyout() }
        set { try! _default.put_SelectionFlyout(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColor() }
        set { try! _default.put_SelectionHighlightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrder() }
        set { try! _default.put_TextReadingOrder(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpening($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpening($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchanged)
    public lazy var passwordChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasswordChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasswordChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchanging)
    public lazy var passwordChanging : Event<TypedEventHandler<PasswordBox?, PasswordBoxPasswordChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasswordChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasswordChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Paste($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Paste($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordboxpasswordchangingeventargs)
public final class PasswordBoxPasswordChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBoxPasswordChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordboxpasswordchangingeventargs.iscontentchanging)
    public var isContentChanging : Bool {
        get { try! _default.get_IsContentChanging() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager)
open class PipsPager : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPager
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPipsPagerFactory : __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.PipsPager")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.PipsPagerBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPipsPagerFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IPipsPagerStatics: __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.PipsPager")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.maxvisiblepipsproperty)
    public class var maxVisiblePipsProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_MaxVisiblePipsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonstyleproperty)
    public class var nextButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NextButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonvisibilityproperty)
    public class var nextButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NextButtonVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.normalpipstyleproperty)
    public class var normalPipStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NormalPipStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.numberofpagesproperty)
    public class var numberOfPagesProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NumberOfPagesProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonstyleproperty)
    public class var previousButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_PreviousButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonvisibilityproperty)
    public class var previousButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_PreviousButtonVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpageindexproperty)
    public class var selectedPageIndexProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_SelectedPageIndexProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpipstyleproperty)
    public class var selectedPipStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_SelectedPipStyleProperty() }
    }

    private static let _IPipsPagerStatics2: __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.PipsPager")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.wrapmodeproperty)
    public class var wrapModeProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics2.get_WrapModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.maxvisiblepips)
    public var maxVisiblePips : Int32 {
        get { try! _default.get_MaxVisiblePips() }
        set { try! _default.put_MaxVisiblePips(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonstyle)
    public var nextButtonStyle : WinUI.Style! {
        get { try! _default.get_NextButtonStyle() }
        set { try! _default.put_NextButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonvisibility)
    public var nextButtonVisibility : PipsPagerButtonVisibility {
        get { try! _default.get_NextButtonVisibility() }
        set { try! _default.put_NextButtonVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.normalpipstyle)
    public var normalPipStyle : WinUI.Style! {
        get { try! _default.get_NormalPipStyle() }
        set { try! _default.put_NormalPipStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.numberofpages)
    public var numberOfPages : Int32 {
        get { try! _default.get_NumberOfPages() }
        set { try! _default.put_NumberOfPages(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.orientation)
    public var orientation : Orientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonstyle)
    public var previousButtonStyle : WinUI.Style! {
        get { try! _default.get_PreviousButtonStyle() }
        set { try! _default.put_PreviousButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonvisibility)
    public var previousButtonVisibility : PipsPagerButtonVisibility {
        get { try! _default.get_PreviousButtonVisibility() }
        set { try! _default.put_PreviousButtonVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpageindex)
    public var selectedPageIndex : Int32 {
        get { try! _default.get_SelectedPageIndex() }
        set { try! _default.put_SelectedPageIndex(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpipstyle)
    public var selectedPipStyle : WinUI.Style! {
        get { try! _default.get_SelectedPipStyle() }
        set { try! _default.put_SelectedPipStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.templatesettings)
    public var templateSettings : PipsPagerTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedindexchanged)
    public lazy var selectedIndexChanged : Event<TypedEventHandler<PipsPager?, PipsPagerSelectedIndexChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectedIndexChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectedIndexChanged($0)
       }
      )
    }()

    private lazy var _IPipsPager2: __ABI_Microsoft_UI_Xaml_Controls.IPipsPager2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.wrapmode)
    public var wrapMode : PipsPagerWrapMode {
        get { try! _IPipsPager2.get_WrapMode() }
        set { try! _IPipsPager2.put_WrapMode(newValue) }
    }

    deinit {
        _default = nil
        _IPipsPager2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagerselectedindexchangedeventargs)
public final class PipsPagerSelectedIndexChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerSelectedIndexChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagertemplatesettings)
public final class PipsPagerTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagertemplatesettings.pipspageritems)
    public var pipsPagerItems : WindowsFoundation.AnyIVector<Int32>! {
        get { try! _default.get_PipsPagerItems() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar)
open class ProgressBar : WinUI.RangeBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProgressBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IProgressBarFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ProgressBar")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ProgressBarBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IProgressBarFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IProgressBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IProgressBarStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ProgressBar")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.isindeterminateproperty)
    public class var isIndeterminateProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_IsIndeterminateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showerrorproperty)
    public class var showErrorProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_ShowErrorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showpausedproperty)
    public class var showPausedProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_ShowPausedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.isindeterminate)
    public var isIndeterminate : Bool {
        get { try! _default.get_IsIndeterminate() }
        set { try! _default.put_IsIndeterminate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showerror)
    public var showError : Bool {
        get { try! _default.get_ShowError() }
        set { try! _default.put_ShowError(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showpaused)
    public var showPaused : Bool {
        get { try! _default.get_ShowPaused() }
        set { try! _default.put_ShowPaused(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.templatesettings)
    public var templateSettings : ProgressBarTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings)
public final class ProgressBarTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.cliprect)
    public var clipRect : WinUI.RectangleGeometry! {
        get { try! _default.get_ClipRect() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.container2animationendposition)
    public var container2AnimationEndPosition : Double {
        get { try! _default.get_Container2AnimationEndPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.container2animationstartposition)
    public var container2AnimationStartPosition : Double {
        get { try! _default.get_Container2AnimationStartPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationendposition)
    public var containerAnimationEndPosition : Double {
        get { try! _default.get_ContainerAnimationEndPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationmidposition)
    public var containerAnimationMidPosition : Double {
        get { try! _default.get_ContainerAnimationMidPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationstartposition)
    public var containerAnimationStartPosition : Double {
        get { try! _default.get_ContainerAnimationStartPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseanimationendposition)
    public var ellipseAnimationEndPosition : Double {
        get { try! _default.get_EllipseAnimationEndPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseanimationwellposition)
    public var ellipseAnimationWellPosition : Double {
        get { try! _default.get_EllipseAnimationWellPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipsediameter)
    public var ellipseDiameter : Double {
        get { try! _default.get_EllipseDiameter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseoffset)
    public var ellipseOffset : Double {
        get { try! _default.get_EllipseOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.indicatorlengthdelta)
    public var indicatorLengthDelta : Double {
        get { try! _default.get_IndicatorLengthDelta() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring)
open class ProgressRing : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRing
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProgressRingFactory : __ABI_Microsoft_UI_Xaml_Controls.IProgressRingFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ProgressRing")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ProgressRingBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IProgressRingFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IProgressRingStatics: __ABI_Microsoft_UI_Xaml_Controls.IProgressRingStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ProgressRing")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isactiveproperty)
    public class var isActiveProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_IsActiveProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isindeterminateproperty)
    public class var isIndeterminateProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_IsIndeterminateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.maximumproperty)
    public class var maximumProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_MaximumProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.minimumproperty)
    public class var minimumProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_MinimumProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_ValueProperty() }
    }

    private static let _IProgressRingStatics2: __ABI_Microsoft_UI_Xaml_Controls.IProgressRingStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ProgressRing")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.determinatesourceproperty)
    public class var determinateSourceProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics2.get_DeterminateSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.indeterminatesourceproperty)
    public class var indeterminateSourceProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics2.get_IndeterminateSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActive() }
        set { try! _default.put_IsActive(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isindeterminate)
    public var isIndeterminate : Bool {
        get { try! _default.get_IsIndeterminate() }
        set { try! _default.put_IsIndeterminate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.maximum)
    public var maximum : Double {
        get { try! _default.get_Maximum() }
        set { try! _default.put_Maximum(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.minimum)
    public var minimum : Double {
        get { try! _default.get_Minimum() }
        set { try! _default.put_Minimum(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.templatesettings)
    public var templateSettings : ProgressRingTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.value)
    public var value : Double {
        get { try! _default.get_Value() }
        set { try! _default.put_Value(newValue) }
    }

    private lazy var _IProgressRing2: __ABI_Microsoft_UI_Xaml_Controls.IProgressRing2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.determinatesource)
    public var determinateSource : AnyIAnimatedVisualSource! {
        get { try! _IProgressRing2.get_DeterminateSource() }
        set { try! _IProgressRing2.put_DeterminateSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.indeterminatesource)
    public var indeterminateSource : AnyIAnimatedVisualSource! {
        get { try! _IProgressRing2.get_IndeterminateSource() }
        set { try! _IProgressRing2.put_IndeterminateSource(newValue) }
    }

    deinit {
        _default = nil
        _IProgressRing2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings)
public final class ProgressRingTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRingTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.ellipsediameter)
    public var ellipseDiameter : Double {
        get { try! _default.get_EllipseDiameter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.ellipseoffset)
    public var ellipseOffset : WinUI.Thickness {
        get { try! _default.get_EllipseOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.maxsidelength)
    public var maxSideLength : Double {
        get { try! _default.get_MaxSideLength() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton)
open class RadioButton : WinUI.ToggleButton {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RadioButton")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.RadioButtonBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRadioButtonFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IRadioButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RadioButton")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton.groupnameproperty)
    public class var groupNameProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonStatics.get_GroupNameProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton.groupname)
    public var groupName : String {
        get { try! _default.get_GroupName() }
        set { try! _default.put_GroupName(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons)
open class RadioButtons : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButtons
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioButtonsFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RadioButtons")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.RadioButtonsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRadioButtonsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IRadioButtonsStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RadioButtons")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.maxcolumnsproperty)
    public class var maxColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_MaxColumnsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectedindexproperty)
    public class var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_SelectedIndexProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_SelectedItemProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.ContainerFromIndex(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemtemplate)
    public var itemTemplate : Any! {
        get { try! _default.get_ItemTemplate() }
        set { try! _default.put_ItemTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_Items() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSource() }
        set { try! _default.put_ItemsSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.maxcolumns)
    public var maxColumns : Int32 {
        get { try! _default.get_MaxColumns() }
        set { try! _default.put_MaxColumns(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndex() }
        set { try! _default.put_SelectedIndex(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItem() }
        set { try! _default.put_SelectedItem(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectionchanged)
    public lazy var selectionChanged : Event<SelectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer)
open class RefreshContainer : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRefreshContainerFactory : __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainerFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RefreshContainer")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.RefreshContainerBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRefreshContainerFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IRefreshContainerStatics: __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainerStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RefreshContainer")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.pulldirectionproperty)
    public class var pullDirectionProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshContainerStatics.get_PullDirectionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.visualizerproperty)
    public class var visualizerProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshContainerStatics.get_VisualizerProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.requestrefresh)
    public func requestRefresh() throws {
        try _default.RequestRefresh()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.pulldirection)
    public var pullDirection : RefreshPullDirection {
        get { try! _default.get_PullDirection() }
        set { try! _default.put_PullDirection(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.visualizer)
    public var visualizer : RefreshVisualizer! {
        get { try! _default.get_Visualizer() }
        set { try! _default.put_Visualizer(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.refreshrequested)
    public lazy var refreshRequested : Event<TypedEventHandler<RefreshContainer?, RefreshRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RefreshRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RefreshRequested($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshrequestedeventargs)
public final class RefreshRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshrequestedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshstatechangedeventargs)
public final class RefreshStateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshStateChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshStateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshstatechangedeventargs.newstate)
    public var newState : RefreshVisualizerState {
        get { try! _default.get_NewState() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshstatechangedeventargs.oldstate)
    public var oldState : RefreshVisualizerState {
        get { try! _default.get_OldState() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer)
open class RefreshVisualizer : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRefreshVisualizerFactory : __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizerFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RefreshVisualizer")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.RefreshVisualizerBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRefreshVisualizerFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IRefreshVisualizerStatics: __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizerStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RefreshVisualizer")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.infoproviderproperty)
    public class var infoProviderProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_InfoProviderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.stateproperty)
    public class var stateProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_StateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.requestrefresh)
    public func requestRefresh() throws {
        try _default.RequestRefresh()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.orientation)
    public var orientation : RefreshVisualizerOrientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.state)
    public var state : RefreshVisualizerState {
        get { try! _default.get_State() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.refreshrequested)
    public lazy var refreshRequested : Event<TypedEventHandler<RefreshVisualizer?, RefreshRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RefreshRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RefreshRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.refreshstatechanged)
    public lazy var refreshStateChanged : Event<TypedEventHandler<RefreshVisualizer?, RefreshStateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RefreshStateChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RefreshStateChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel)
open class RelativePanel : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRelativePanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRelativePanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IRelativePanelFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RelativePanel")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.RelativePanelBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRelativePanelFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IRelativePanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IRelativePanelStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RelativePanel")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getleftof)
    public class func getLeftOf(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetLeftOf(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setleftof)
    public class func setLeftOf(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetLeftOf(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getabove)
    public class func getAbove(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAbove(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setabove)
    public class func setAbove(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAbove(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getrightof)
    public class func getRightOf(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetRightOf(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setrightof)
    public class func setRightOf(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetRightOf(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getbelow)
    public class func getBelow(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetBelow(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setbelow)
    public class func setBelow(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetBelow(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignhorizontalcenterwith)
    public class func getAlignHorizontalCenterWith(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAlignHorizontalCenterWith(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignhorizontalcenterwith)
    public class func setAlignHorizontalCenterWith(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAlignHorizontalCenterWith(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignverticalcenterwith)
    public class func getAlignVerticalCenterWith(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAlignVerticalCenterWith(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignverticalcenterwith)
    public class func setAlignVerticalCenterWith(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAlignVerticalCenterWith(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignleftwith)
    public class func getAlignLeftWith(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAlignLeftWith(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignleftwith)
    public class func setAlignLeftWith(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAlignLeftWith(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getaligntopwith)
    public class func getAlignTopWith(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAlignTopWith(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setaligntopwith)
    public class func setAlignTopWith(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAlignTopWith(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignrightwith)
    public class func getAlignRightWith(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAlignRightWith(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignrightwith)
    public class func setAlignRightWith(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAlignRightWith(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignbottomwith)
    public class func getAlignBottomWith(_ element: WinUI.UIElement!) throws -> Any! {
        return try _IRelativePanelStatics.GetAlignBottomWith(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignbottomwith)
    public class func setAlignBottomWith(_ element: WinUI.UIElement!, _ value: Any!) throws {
        try _IRelativePanelStatics.SetAlignBottomWith(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignleftwithpanel)
    public class func getAlignLeftWithPanel(_ element: WinUI.UIElement!) throws -> Bool {
        return try _IRelativePanelStatics.GetAlignLeftWithPanel(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignleftwithpanel)
    public class func setAlignLeftWithPanel(_ element: WinUI.UIElement!, _ value: Bool) throws {
        try _IRelativePanelStatics.SetAlignLeftWithPanel(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getaligntopwithpanel)
    public class func getAlignTopWithPanel(_ element: WinUI.UIElement!) throws -> Bool {
        return try _IRelativePanelStatics.GetAlignTopWithPanel(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setaligntopwithpanel)
    public class func setAlignTopWithPanel(_ element: WinUI.UIElement!, _ value: Bool) throws {
        try _IRelativePanelStatics.SetAlignTopWithPanel(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignrightwithpanel)
    public class func getAlignRightWithPanel(_ element: WinUI.UIElement!) throws -> Bool {
        return try _IRelativePanelStatics.GetAlignRightWithPanel(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignrightwithpanel)
    public class func setAlignRightWithPanel(_ element: WinUI.UIElement!, _ value: Bool) throws {
        try _IRelativePanelStatics.SetAlignRightWithPanel(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignbottomwithpanel)
    public class func getAlignBottomWithPanel(_ element: WinUI.UIElement!) throws -> Bool {
        return try _IRelativePanelStatics.GetAlignBottomWithPanel(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignbottomwithpanel)
    public class func setAlignBottomWithPanel(_ element: WinUI.UIElement!, _ value: Bool) throws {
        try _IRelativePanelStatics.SetAlignBottomWithPanel(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignhorizontalcenterwithpanel)
    public class func getAlignHorizontalCenterWithPanel(_ element: WinUI.UIElement!) throws -> Bool {
        return try _IRelativePanelStatics.GetAlignHorizontalCenterWithPanel(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignhorizontalcenterwithpanel)
    public class func setAlignHorizontalCenterWithPanel(_ element: WinUI.UIElement!, _ value: Bool) throws {
        try _IRelativePanelStatics.SetAlignHorizontalCenterWithPanel(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignverticalcenterwithpanel)
    public class func getAlignVerticalCenterWithPanel(_ element: WinUI.UIElement!) throws -> Bool {
        return try _IRelativePanelStatics.GetAlignVerticalCenterWithPanel(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignverticalcenterwithpanel)
    public class func setAlignVerticalCenterWithPanel(_ element: WinUI.UIElement!, _ value: Bool) throws {
        try _IRelativePanelStatics.SetAlignVerticalCenterWithPanel(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.aboveproperty)
    public class var aboveProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AboveProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignbottomwithpanelproperty)
    public class var alignBottomWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignBottomWithPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignbottomwithproperty)
    public class var alignBottomWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignBottomWithProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignhorizontalcenterwithpanelproperty)
    public class var alignHorizontalCenterWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignHorizontalCenterWithPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignhorizontalcenterwithproperty)
    public class var alignHorizontalCenterWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignHorizontalCenterWithProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignleftwithpanelproperty)
    public class var alignLeftWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignLeftWithPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignleftwithproperty)
    public class var alignLeftWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignLeftWithProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignrightwithpanelproperty)
    public class var alignRightWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignRightWithPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignrightwithproperty)
    public class var alignRightWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignRightWithProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.aligntopwithpanelproperty)
    public class var alignTopWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignTopWithPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.aligntopwithproperty)
    public class var alignTopWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignTopWithProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignverticalcenterwithpanelproperty)
    public class var alignVerticalCenterWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignVerticalCenterWithPanelProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignverticalcenterwithproperty)
    public class var alignVerticalCenterWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignVerticalCenterWithProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BackgroundSizingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.belowproperty)
    public class var belowProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BelowProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BorderBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BorderThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_CornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.leftofproperty)
    public class var leftOfProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_LeftOfProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.rightofproperty)
    public class var rightOfProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_RightOfProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizing() }
        set { try! _default.put_BackgroundSizing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrush() }
        set { try! _default.put_BorderBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThickness() }
        set { try! _default.put_BorderThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition)
public final class RowDefinition : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRowDefinition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RowDefinition")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IRowDefinitionStatics: __ABI_Microsoft_UI_Xaml_Controls.IRowDefinitionStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.RowDefinition")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.heightproperty)
    public static var heightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_HeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.maxheightproperty)
    public static var maxHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_MaxHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.minheightproperty)
    public static var minHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_MinHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.actualheight)
    public var actualHeight : Double {
        get { try! _default.get_ActualHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.height)
    public var height : WinUI.GridLength {
        get { try! _default.get_Height() }
        set { try! _default.put_Height(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.maxheight)
    public var maxHeight : Double {
        get { try! _default.get_MaxHeight() }
        set { try! _default.put_MaxHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.minheight)
    public var minHeight : Double {
        get { try! _default.get_MinHeight() }
        set { try! _default.put_MinHeight(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection)
public final class RowDefinitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = RowDefinition?
    private typealias SwiftABI = WinUI.IVectorRowDefinition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getat)
    public func getAt(_ index: UInt32) -> RowDefinition? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<RowDefinition?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.indexof)
    public func indexOf(_ value: RowDefinition?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.setat)
    public func setAt(_ index: UInt32, _ value: RowDefinition?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.insertat)
    public func insertAt(_ index: UInt32, _ value: RowDefinition?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.append)
    public func append(_ value: RowDefinition?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [RowDefinition?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.replaceall)
    public func replaceAll(_ items: [RowDefinition?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableRowDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<RowDefinition?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview)
open class ScrollView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollView")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ScrollViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IScrollViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IScrollViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollViewStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollbarvisibilityproperty)
    public class var computedHorizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedHorizontalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollmodeproperty)
    public class var computedHorizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedHorizontalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollbarvisibilityproperty)
    public class var computedVerticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedVerticalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollmodeproperty)
    public class var computedVerticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedVerticalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentorientationproperty)
    public class var contentOrientationProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ContentOrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalanchorratioproperty)
    public class var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalAnchorRatioProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollbarvisibilityproperty)
    public class var horizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollchainmodeproperty)
    public class var horizontalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollChainModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollmodeproperty)
    public class var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollrailmodeproperty)
    public class var horizontalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollRailModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.ignoredinputkindsproperty)
    public class var ignoredInputKindsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_IgnoredInputKindsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.maxzoomfactorproperty)
    public class var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_MaxZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.minzoomfactorproperty)
    public class var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_MinZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollpresenterproperty)
    public class var scrollPresenterProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ScrollPresenterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalanchorratioproperty)
    public class var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalAnchorRatioProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollbarvisibilityproperty)
    public class var verticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollchainmodeproperty)
    public class var verticalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollChainModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollmodeproperty)
    public class var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollrailmodeproperty)
    public class var verticalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollRailModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomchainmodeproperty)
    public class var zoomChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ZoomChainModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoommodeproperty)
    public class var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ZoomModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.registeranchorcandidate)
    public func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _default.RegisterAnchorCandidate(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.unregisteranchorcandidate)
    public func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _default.UnregisterAnchorCandidate(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollto)
    public func scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
        try _default.ScrollTo(horizontalOffset, verticalOffset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollto)
    public func scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollToWithOptions(horizontalOffset, verticalOffset, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollby)
    public func scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
        try _default.ScrollBy(horizontalOffsetDelta, verticalOffsetDelta)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollby)
    public func scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollByWithOptions(horizontalOffsetDelta, verticalOffsetDelta, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.addscrollvelocity)
    public func addScrollVelocity(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.AddScrollVelocity(offsetsVelocity, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomto)
    public func zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomTo(zoomFactor, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomto)
    public func zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomToWithOptions(zoomFactor, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomby)
    public func zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomBy(zoomFactorDelta, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomby)
    public func zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomByWithOptions(zoomFactorDelta, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.addzoomvelocity)
    public func addZoomVelocity(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
        try _default.AddZoomVelocity(zoomFactorVelocity, centerPoint, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollbarvisibility)
    public var computedHorizontalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedHorizontalScrollBarVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollmode)
    public var computedHorizontalScrollMode : ScrollingScrollMode {
        get { try! _default.get_ComputedHorizontalScrollMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollbarvisibility)
    public var computedVerticalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedVerticalScrollBarVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollmode)
    public var computedVerticalScrollMode : ScrollingScrollMode {
        get { try! _default.get_ComputedVerticalScrollMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentorientation)
    public var contentOrientation : ScrollingContentOrientation {
        get { try! _default.get_ContentOrientation() }
        set { try! _default.put_ContentOrientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _default.get_CurrentAnchor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.expressionanimationsources)
    public var expressionAnimationSources : WinAppSDK.CompositionPropertySet! {
        get { try! _default.get_ExpressionAnimationSources() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatio() }
        set { try! _default.put_HorizontalAnchorRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollbarvisibility)
    public var horizontalScrollBarVisibility : ScrollingScrollBarVisibility {
        get { try! _default.get_HorizontalScrollBarVisibility() }
        set { try! _default.put_HorizontalScrollBarVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollchainmode)
    public var horizontalScrollChainMode : ScrollingChainMode {
        get { try! _default.get_HorizontalScrollChainMode() }
        set { try! _default.put_HorizontalScrollChainMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollmode)
    public var horizontalScrollMode : ScrollingScrollMode {
        get { try! _default.get_HorizontalScrollMode() }
        set { try! _default.put_HorizontalScrollMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollrailmode)
    public var horizontalScrollRailMode : ScrollingRailMode {
        get { try! _default.get_HorizontalScrollRailMode() }
        set { try! _default.put_HorizontalScrollRailMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.ignoredinputkinds)
    public var ignoredInputKinds : ScrollingInputKinds {
        get { try! _default.get_IgnoredInputKinds() }
        set { try! _default.put_IgnoredInputKinds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.maxzoomfactor)
    public var maxZoomFactor : Double {
        get { try! _default.get_MaxZoomFactor() }
        set { try! _default.put_MaxZoomFactor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.minzoomfactor)
    public var minZoomFactor : Double {
        get { try! _default.get_MinZoomFactor() }
        set { try! _default.put_MinZoomFactor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollpresenter)
    public var scrollPresenter : WinUI.ScrollPresenter! {
        get { try! _default.get_ScrollPresenter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.state)
    public var state : ScrollingInteractionState {
        get { try! _default.get_State() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatio() }
        set { try! _default.put_VerticalAnchorRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollbarvisibility)
    public var verticalScrollBarVisibility : ScrollingScrollBarVisibility {
        get { try! _default.get_VerticalScrollBarVisibility() }
        set { try! _default.put_VerticalScrollBarVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollchainmode)
    public var verticalScrollChainMode : ScrollingChainMode {
        get { try! _default.get_VerticalScrollChainMode() }
        set { try! _default.put_VerticalScrollChainMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollmode)
    public var verticalScrollMode : ScrollingScrollMode {
        get { try! _default.get_VerticalScrollMode() }
        set { try! _default.put_VerticalScrollMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollrailmode)
    public var verticalScrollRailMode : ScrollingRailMode {
        get { try! _default.get_VerticalScrollRailMode() }
        set { try! _default.put_VerticalScrollRailMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomchainmode)
    public var zoomChainMode : ScrollingChainMode {
        get { try! _default.get_ZoomChainMode() }
        set { try! _default.put_ZoomChainMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoommode)
    public var zoomMode : ScrollingZoomMode {
        get { try! _default.get_ZoomMode() }
        set { try! _default.put_ZoomMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollView?, ScrollingAnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AnchorRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AnchorRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.bringingintoview)
    public lazy var bringingIntoView : Event<TypedEventHandler<ScrollView?, ScrollingBringingIntoViewEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BringingIntoView($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BringingIntoView($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentchanged)
    public lazy var extentChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ExtentChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ExtentChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollanimationstarting)
    public lazy var scrollAnimationStarting : Event<TypedEventHandler<ScrollView?, ScrollingScrollAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollAnimationStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollAnimationStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollcompleted)
    public lazy var scrollCompleted : Event<TypedEventHandler<ScrollView?, ScrollingScrollCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StateChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StateChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewchanged)
    public lazy var viewChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomanimationstarting)
    public lazy var zoomAnimationStarting : Event<TypedEventHandler<ScrollView?, ScrollingZoomAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomAnimationStarting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomAnimationStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomcompleted)
    public lazy var zoomCompleted : Event<TypedEventHandler<ScrollView?, ScrollingZoomCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomCompleted($0)
       }
      )
    }()

    private lazy var _IScrollView2: __ABI_Microsoft_UI_Xaml_Controls.IScrollView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollstarting)
    public lazy var scrollStarting : Event<TypedEventHandler<ScrollView?, ScrollingScrollStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollView2 else { return .init() }
          return try! this.add_ScrollStarting($0)
        },
        remove: { [weak self] in
         try? self?._IScrollView2.remove_ScrollStarting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomstarting)
    public lazy var zoomStarting : Event<TypedEventHandler<ScrollView?, ScrollingZoomStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollView2 else { return .init() }
          return try! this.add_ZoomStarting($0)
        },
        remove: { [weak self] in
         try? self?._IScrollView2.remove_ZoomStarting($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IScrollView2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer)
public final class ScrollViewer : WinUI.ContentControl, IScrollAnchorProvider {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollViewer")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IScrollViewerStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollViewer")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.gethorizontalscrollbarvisibility)
    public static func getHorizontalScrollBarVisibility(_ element: WinUI.DependencyObject!) throws -> ScrollBarVisibility {
        return try _IScrollViewerStatics.GetHorizontalScrollBarVisibility(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.sethorizontalscrollbarvisibility)
    public static func setHorizontalScrollBarVisibility(_ element: WinUI.DependencyObject!, _ horizontalScrollBarVisibility: ScrollBarVisibility) throws {
        try _IScrollViewerStatics.SetHorizontalScrollBarVisibility(element, horizontalScrollBarVisibility)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getverticalscrollbarvisibility)
    public static func getVerticalScrollBarVisibility(_ element: WinUI.DependencyObject!) throws -> ScrollBarVisibility {
        return try _IScrollViewerStatics.GetVerticalScrollBarVisibility(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setverticalscrollbarvisibility)
    public static func setVerticalScrollBarVisibility(_ element: WinUI.DependencyObject!, _ verticalScrollBarVisibility: ScrollBarVisibility) throws {
        try _IScrollViewerStatics.SetVerticalScrollBarVisibility(element, verticalScrollBarVisibility)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getishorizontalrailenabled)
    public static func getIsHorizontalRailEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsHorizontalRailEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setishorizontalrailenabled)
    public static func setIsHorizontalRailEnabled(_ element: WinUI.DependencyObject!, _ isHorizontalRailEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsHorizontalRailEnabled(element, isHorizontalRailEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisverticalrailenabled)
    public static func getIsVerticalRailEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsVerticalRailEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisverticalrailenabled)
    public static func setIsVerticalRailEnabled(_ element: WinUI.DependencyObject!, _ isVerticalRailEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsVerticalRailEnabled(element, isVerticalRailEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getishorizontalscrollchainingenabled)
    public static func getIsHorizontalScrollChainingEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsHorizontalScrollChainingEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setishorizontalscrollchainingenabled)
    public static func setIsHorizontalScrollChainingEnabled(_ element: WinUI.DependencyObject!, _ isHorizontalScrollChainingEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsHorizontalScrollChainingEnabled(element, isHorizontalScrollChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisverticalscrollchainingenabled)
    public static func getIsVerticalScrollChainingEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsVerticalScrollChainingEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisverticalscrollchainingenabled)
    public static func setIsVerticalScrollChainingEnabled(_ element: WinUI.DependencyObject!, _ isVerticalScrollChainingEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsVerticalScrollChainingEnabled(element, isVerticalScrollChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getiszoomchainingenabled)
    public static func getIsZoomChainingEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsZoomChainingEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setiszoomchainingenabled)
    public static func setIsZoomChainingEnabled(_ element: WinUI.DependencyObject!, _ isZoomChainingEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsZoomChainingEnabled(element, isZoomChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisscrollinertiaenabled)
    public static func getIsScrollInertiaEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsScrollInertiaEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisscrollinertiaenabled)
    public static func setIsScrollInertiaEnabled(_ element: WinUI.DependencyObject!, _ isScrollInertiaEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsScrollInertiaEnabled(element, isScrollInertiaEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getiszoominertiaenabled)
    public static func getIsZoomInertiaEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsZoomInertiaEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setiszoominertiaenabled)
    public static func setIsZoomInertiaEnabled(_ element: WinUI.DependencyObject!, _ isZoomInertiaEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsZoomInertiaEnabled(element, isZoomInertiaEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.gethorizontalscrollmode)
    public static func getHorizontalScrollMode(_ element: WinUI.DependencyObject!) throws -> ScrollMode {
        return try _IScrollViewerStatics.GetHorizontalScrollMode(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.sethorizontalscrollmode)
    public static func setHorizontalScrollMode(_ element: WinUI.DependencyObject!, _ horizontalScrollMode: ScrollMode) throws {
        try _IScrollViewerStatics.SetHorizontalScrollMode(element, horizontalScrollMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getverticalscrollmode)
    public static func getVerticalScrollMode(_ element: WinUI.DependencyObject!) throws -> ScrollMode {
        return try _IScrollViewerStatics.GetVerticalScrollMode(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setverticalscrollmode)
    public static func setVerticalScrollMode(_ element: WinUI.DependencyObject!, _ verticalScrollMode: ScrollMode) throws {
        try _IScrollViewerStatics.SetVerticalScrollMode(element, verticalScrollMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getzoommode)
    public static func getZoomMode(_ element: WinUI.DependencyObject!) throws -> ZoomMode {
        return try _IScrollViewerStatics.GetZoomMode(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setzoommode)
    public static func setZoomMode(_ element: WinUI.DependencyObject!, _ zoomMode: ZoomMode) throws {
        try _IScrollViewerStatics.SetZoomMode(element, zoomMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getcancontentrenderoutsidebounds)
    public static func getCanContentRenderOutsideBounds(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetCanContentRenderOutsideBounds(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setcancontentrenderoutsidebounds)
    public static func setCanContentRenderOutsideBounds(_ element: WinUI.DependencyObject!, _ canContentRenderOutsideBounds: Bool) throws {
        try _IScrollViewerStatics.SetCanContentRenderOutsideBounds(element, canContentRenderOutsideBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisdeferredscrollingenabled)
    public static func getIsDeferredScrollingEnabled(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetIsDeferredScrollingEnabled(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisdeferredscrollingenabled)
    public static func setIsDeferredScrollingEnabled(_ element: WinUI.DependencyObject!, _ isDeferredScrollingEnabled: Bool) throws {
        try _IScrollViewerStatics.SetIsDeferredScrollingEnabled(element, isDeferredScrollingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getbringintoviewonfocuschange)
    public static func getBringIntoViewOnFocusChange(_ element: WinUI.DependencyObject!) throws -> Bool {
        return try _IScrollViewerStatics.GetBringIntoViewOnFocusChange(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setbringintoviewonfocuschange)
    public static func setBringIntoViewOnFocusChange(_ element: WinUI.DependencyObject!, _ bringIntoViewOnFocusChange: Bool) throws {
        try _IScrollViewerStatics.SetBringIntoViewOnFocusChange(element, bringIntoViewOnFocusChange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.bringintoviewonfocuschangeproperty)
    public static var bringIntoViewOnFocusChangeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_BringIntoViewOnFocusChangeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.cancontentrenderoutsideboundsproperty)
    public static var canContentRenderOutsideBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_CanContentRenderOutsideBoundsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedhorizontalscrollbarvisibilityproperty)
    public static var computedHorizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ComputedHorizontalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedverticalscrollbarvisibilityproperty)
    public static var computedVerticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ComputedVerticalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentheightproperty)
    public static var extentHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ExtentHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentwidthproperty)
    public static var extentWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ExtentWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalanchorratioproperty)
    public static var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalAnchorRatioProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontaloffsetproperty)
    public static var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibilityproperty)
    public static var horizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollmodeproperty)
    public static var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointsalignmentproperty)
    public static var horizontalSnapPointsAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalSnapPointsAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointstypeproperty)
    public static var horizontalSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalSnapPointsTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isdeferredscrollingenabledproperty)
    public static var isDeferredScrollingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsDeferredScrollingEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalrailenabledproperty)
    public static var isHorizontalRailEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsHorizontalRailEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabledproperty)
    public static var isHorizontalScrollChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsHorizontalScrollChainingEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isscrollinertiaenabledproperty)
    public static var isScrollInertiaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsScrollInertiaEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalrailenabledproperty)
    public static var isVerticalRailEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsVerticalRailEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabledproperty)
    public static var isVerticalScrollChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsVerticalScrollChainingEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoomchainingenabledproperty)
    public static var isZoomChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsZoomChainingEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoominertiaenabledproperty)
    public static var isZoomInertiaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsZoomInertiaEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.leftheaderproperty)
    public static var leftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_LeftHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.maxzoomfactorproperty)
    public static var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_MaxZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.minzoomfactorproperty)
    public static var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_MinZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.reduceviewportforcoreinputviewocclusionsproperty)
    public static var reduceViewportForCoreInputViewOcclusionsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ReduceViewportForCoreInputViewOcclusionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollableheightproperty)
    public static var scrollableHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ScrollableHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollablewidthproperty)
    public static var scrollableWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ScrollableWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topheaderproperty)
    public static var topHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_TopHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topleftheaderproperty)
    public static var topLeftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_TopLeftHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalanchorratioproperty)
    public static var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalAnchorRatioProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticaloffsetproperty)
    public static var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollbarvisibilityproperty)
    public static var verticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalScrollBarVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollmodeproperty)
    public static var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalScrollModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointsalignmentproperty)
    public static var verticalSnapPointsAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalSnapPointsAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointstypeproperty)
    public static var verticalSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalSnapPointsTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportheightproperty)
    public static var viewportHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ViewportHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportwidthproperty)
    public static var viewportWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ViewportWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomfactorproperty)
    public static var zoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomFactorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoommodeproperty)
    public static var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointsproperty)
    public static var zoomSnapPointsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomSnapPointsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointstypeproperty)
    public static var zoomSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomSnapPointsTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrolltohorizontaloffset)
    public func scrollToHorizontalOffset(_ offset: Double) throws {
        try _default.ScrollToHorizontalOffset(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrolltoverticaloffset)
    public func scrollToVerticalOffset(_ offset: Double) throws {
        try _default.ScrollToVerticalOffset(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomtofactor)
    public func zoomToFactor(_ factor: Float) throws {
        try _default.ZoomToFactor(factor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.changeview)
    public func changeView(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?) throws -> Bool {
        try _default.ChangeView(horizontalOffset, verticalOffset, zoomFactor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.changeview)
    public func changeView(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?, _ disableAnimation: Bool) throws -> Bool {
        try _default.ChangeViewWithOptionalAnimation(horizontalOffset, verticalOffset, zoomFactor, disableAnimation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.invalidatescrollinfo)
    public func invalidateScrollInfo() throws {
        try _default.InvalidateScrollInfo()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.bringintoviewonfocuschange)
    public var bringIntoViewOnFocusChange : Bool {
        get { try! _default.get_BringIntoViewOnFocusChange() }
        set { try! _default.put_BringIntoViewOnFocusChange(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.cancontentrenderoutsidebounds)
    public var canContentRenderOutsideBounds : Bool {
        get { try! _default.get_CanContentRenderOutsideBounds() }
        set { try! _default.put_CanContentRenderOutsideBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedhorizontalscrollbarvisibility)
    public var computedHorizontalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedHorizontalScrollBarVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedverticalscrollbarvisibility)
    public var computedVerticalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedVerticalScrollBarVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatio() }
        set { try! _default.put_HorizontalAnchorRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibility)
    public var horizontalScrollBarVisibility : ScrollBarVisibility {
        get { try! _default.get_HorizontalScrollBarVisibility() }
        set { try! _default.put_HorizontalScrollBarVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollmode)
    public var horizontalScrollMode : ScrollMode {
        get { try! _default.get_HorizontalScrollMode() }
        set { try! _default.put_HorizontalScrollMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointsalignment)
    public var horizontalSnapPointsAlignment : WinUI.SnapPointsAlignment {
        get { try! _default.get_HorizontalSnapPointsAlignment() }
        set { try! _default.put_HorizontalSnapPointsAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointstype)
    public var horizontalSnapPointsType : SnapPointsType {
        get { try! _default.get_HorizontalSnapPointsType() }
        set { try! _default.put_HorizontalSnapPointsType(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isdeferredscrollingenabled)
    public var isDeferredScrollingEnabled : Bool {
        get { try! _default.get_IsDeferredScrollingEnabled() }
        set { try! _default.put_IsDeferredScrollingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalrailenabled)
    public var isHorizontalRailEnabled : Bool {
        get { try! _default.get_IsHorizontalRailEnabled() }
        set { try! _default.put_IsHorizontalRailEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabled)
    public var isHorizontalScrollChainingEnabled : Bool {
        get { try! _default.get_IsHorizontalScrollChainingEnabled() }
        set { try! _default.put_IsHorizontalScrollChainingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isscrollinertiaenabled)
    public var isScrollInertiaEnabled : Bool {
        get { try! _default.get_IsScrollInertiaEnabled() }
        set { try! _default.put_IsScrollInertiaEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalrailenabled)
    public var isVerticalRailEnabled : Bool {
        get { try! _default.get_IsVerticalRailEnabled() }
        set { try! _default.put_IsVerticalRailEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabled)
    public var isVerticalScrollChainingEnabled : Bool {
        get { try! _default.get_IsVerticalScrollChainingEnabled() }
        set { try! _default.put_IsVerticalScrollChainingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoomchainingenabled)
    public var isZoomChainingEnabled : Bool {
        get { try! _default.get_IsZoomChainingEnabled() }
        set { try! _default.put_IsZoomChainingEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoominertiaenabled)
    public var isZoomInertiaEnabled : Bool {
        get { try! _default.get_IsZoomInertiaEnabled() }
        set { try! _default.put_IsZoomInertiaEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.leftheader)
    public var leftHeader : WinUI.UIElement! {
        get { try! _default.get_LeftHeader() }
        set { try! _default.put_LeftHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.maxzoomfactor)
    public var maxZoomFactor : Float {
        get { try! _default.get_MaxZoomFactor() }
        set { try! _default.put_MaxZoomFactor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.minzoomfactor)
    public var minZoomFactor : Float {
        get { try! _default.get_MinZoomFactor() }
        set { try! _default.put_MinZoomFactor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.reduceviewportforcoreinputviewocclusions)
    public var reduceViewportForCoreInputViewOcclusions : Bool {
        get { try! _default.get_ReduceViewportForCoreInputViewOcclusions() }
        set { try! _default.put_ReduceViewportForCoreInputViewOcclusions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topheader)
    public var topHeader : WinUI.UIElement! {
        get { try! _default.get_TopHeader() }
        set { try! _default.put_TopHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topleftheader)
    public var topLeftHeader : WinUI.UIElement! {
        get { try! _default.get_TopLeftHeader() }
        set { try! _default.put_TopLeftHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatio() }
        set { try! _default.put_VerticalAnchorRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollbarvisibility)
    public var verticalScrollBarVisibility : ScrollBarVisibility {
        get { try! _default.get_VerticalScrollBarVisibility() }
        set { try! _default.put_VerticalScrollBarVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollmode)
    public var verticalScrollMode : ScrollMode {
        get { try! _default.get_VerticalScrollMode() }
        set { try! _default.put_VerticalScrollMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointsalignment)
    public var verticalSnapPointsAlignment : WinUI.SnapPointsAlignment {
        get { try! _default.get_VerticalSnapPointsAlignment() }
        set { try! _default.put_VerticalSnapPointsAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointstype)
    public var verticalSnapPointsType : SnapPointsType {
        get { try! _default.get_VerticalSnapPointsType() }
        set { try! _default.put_VerticalSnapPointsType(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeight() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoommode)
    public var zoomMode : ZoomMode {
        get { try! _default.get_ZoomMode() }
        set { try! _default.put_ZoomMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappoints)
    public var zoomSnapPoints : WindowsFoundation.AnyIVector<Float>! {
        get { try! _default.get_ZoomSnapPoints() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointstype)
    public var zoomSnapPointsType : SnapPointsType {
        get { try! _default.get_ZoomSnapPointsType() }
        set { try! _default.put_ZoomSnapPointsType(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollViewer?, AnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AnchorRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AnchorRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.directmanipulationcompleted)
    public lazy var directManipulationCompleted : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DirectManipulationCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DirectManipulationCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.directmanipulationstarted)
    public lazy var directManipulationStarted : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DirectManipulationStarted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DirectManipulationStarted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewchanged)
    public lazy var viewChanged : Event<EventHandler<ScrollViewerViewChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewchanging)
    public lazy var viewChanging : Event<EventHandler<ScrollViewerViewChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChanging($0)
       }
      )
    }()

    private lazy var _IScrollAnchorProvider: __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.registeranchorcandidate)
    public func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.RegisterAnchorCandidate(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.unregisteranchorcandidate)
    public func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.UnregisterAnchorCandidate(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _IScrollAnchorProvider.get_CurrentAnchor() }
    }

    deinit {
        _default = nil
        _IScrollAnchorProvider = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview)
public final class ScrollViewerView : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactor() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangedeventargs)
public final class ScrollViewerViewChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangedeventargs.isintermediate)
    public var isIntermediate : Bool {
        get { try! _default.get_IsIntermediate() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs)
public final class ScrollViewerViewChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerViewChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.finalview)
    public var finalView : ScrollViewerView! {
        get { try! _default.get_FinalView() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.isinertial)
    public var isInertial : Bool {
        get { try! _default.get_IsInertial() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.nextview)
    public var nextView : ScrollViewerView! {
        get { try! _default.get_NextView() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs)
public final class ScrollingAnchorRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingAnchorRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs.anchorcandidates)
    public var anchorCandidates : WindowsFoundation.AnyIVector<WinUI.UIElement?>! {
        get { try! _default.get_AnchorCandidates() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs.anchorelement)
    public var anchorElement : WinUI.UIElement! {
        get { try! _default.get_AnchorElement() }
        set { try! _default.put_AnchorElement(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs)
public final class ScrollingBringingIntoViewEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingBringingIntoViewEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.requesteventargs)
    public var requestEventArgs : WinUI.BringIntoViewRequestedEventArgs! {
        get { try! _default.get_RequestEventArgs() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsMode() }
        set { try! _default.put_SnapPointsMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.targethorizontaloffset)
    public var targetHorizontalOffset : Double {
        get { try! _default.get_TargetHorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.targetverticaloffset)
    public var targetVerticalOffset : Double {
        get { try! _default.get_TargetVerticalOffset() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs)
public final class ScrollingScrollAnimationStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollAnimationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.animation)
    public var animation : WinAppSDK.CompositionAnimation! {
        get { try! _default.get_Animation() }
        set { try! _default.put_Animation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.endposition)
    public var endPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_EndPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.startposition)
    public var startPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_StartPosition() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollcompletedeventargs)
public final class ScrollingScrollCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollcompletedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions)
open class ScrollingScrollOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollingScrollOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptionsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollingScrollOptions")

    public init(_ animationMode: ScrollingAnimationMode) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.ScrollingScrollOptionsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingScrollOptionsFactory.CreateInstance(animationMode, baseInterface, &innerInterface)
        }
    }

    public init(_ animationMode: ScrollingAnimationMode, _ snapPointsMode: ScrollingSnapPointsMode) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.ScrollingScrollOptionsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingScrollOptionsFactory.CreateInstance2(animationMode, snapPointsMode, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions.animationmode)
    public var animationMode : ScrollingAnimationMode {
        get { try! _default.get_AnimationMode() }
        set { try! _default.put_AnimationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsMode() }
        set { try! _default.put_SnapPointsMode(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollstartingeventargs)
public final class ScrollingScrollStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollstartingeventargs.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollstartingeventargs.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollstartingeventargs.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactor() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs)
public final class ScrollingZoomAnimationStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomAnimationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.animation)
    public var animation : WinAppSDK.CompositionAnimation! {
        get { try! _default.get_Animation() }
        set { try! _default.put_Animation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPoint() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.endzoomfactor)
    public var endZoomFactor : Float {
        get { try! _default.get_EndZoomFactor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.startzoomfactor)
    public var startZoomFactor : Float {
        get { try! _default.get_StartZoomFactor() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomcompletedeventargs)
public final class ScrollingZoomCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomcompletedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions)
open class ScrollingZoomOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollingZoomOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptionsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ScrollingZoomOptions")

    public init(_ animationMode: ScrollingAnimationMode) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.ScrollingZoomOptionsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingZoomOptionsFactory.CreateInstance(animationMode, baseInterface, &innerInterface)
        }
    }

    public init(_ animationMode: ScrollingAnimationMode, _ snapPointsMode: ScrollingSnapPointsMode) {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.ScrollingZoomOptionsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingZoomOptionsFactory.CreateInstance2(animationMode, snapPointsMode, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions.animationmode)
    public var animationMode : ScrollingAnimationMode {
        get { try! _default.get_AnimationMode() }
        set { try! _default.put_AnimationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsMode() }
        set { try! _default.put_SnapPointsMode(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomstartingeventargs)
public final class ScrollingZoomStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomstartingeventargs.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomstartingeventargs.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomstartingeventargs.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactor() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs)
open class SelectionChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectionChangedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs")

    public init(_ removedItems: WindowsFoundation.AnyIVector<Any?>!, _ addedItems: WindowsFoundation.AnyIVector<Any?>!) {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.SelectionChangedEventArgsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISelectionChangedEventArgsFactory.CreateInstanceWithRemovedItemsAndAddedItems(removedItems, addedItems, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs.addeditems)
    public var addedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_AddedItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs.removeditems)
    public var removedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_RemovedItems() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom)
public final class SemanticZoom : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoom
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SemanticZoom")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ISemanticZoomStatics: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SemanticZoom")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.canchangeviewsproperty)
    public static var canChangeViewsProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_CanChangeViewsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomoutbuttonenabledproperty)
    public static var isZoomOutButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_IsZoomOutButtonEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomedinviewactiveproperty)
    public static var isZoomedInViewActiveProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_IsZoomedInViewActiveProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedinviewproperty)
    public static var zoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_ZoomedInViewProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedoutviewproperty)
    public static var zoomedOutViewProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_ZoomedOutViewProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.toggleactiveview)
    public func toggleActiveView() throws {
        try _default.ToggleActiveView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.canchangeviews)
    public var canChangeViews : Bool {
        get { try! _default.get_CanChangeViews() }
        set { try! _default.put_CanChangeViews(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomoutbuttonenabled)
    public var isZoomOutButtonEnabled : Bool {
        get { try! _default.get_IsZoomOutButtonEnabled() }
        set { try! _default.put_IsZoomOutButtonEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomedinviewactive)
    public var isZoomedInViewActive : Bool {
        get { try! _default.get_IsZoomedInViewActive() }
        set { try! _default.put_IsZoomedInViewActive(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedinview)
    public var zoomedInView : AnyISemanticZoomInformation! {
        get { try! _default.get_ZoomedInView() }
        set { try! _default.put_ZoomedInView(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedoutview)
    public var zoomedOutView : AnyISemanticZoomInformation! {
        get { try! _default.get_ZoomedOutView() }
        set { try! _default.put_ZoomedOutView(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.viewchangecompleted)
    public lazy var viewChangeCompleted : Event<SemanticZoomViewChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangeCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangeCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.viewchangestarted)
    public lazy var viewChangeStarted : Event<SemanticZoomViewChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangeStarted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangeStarted($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation)
public final class SemanticZoomLocation : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomLocation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SemanticZoomLocation")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
        set { try! _default.put_Bounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation.item)
    public var item : Any! {
        get { try! _default.get_Item() }
        set { try! _default.put_Item(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs)
public final class SemanticZoomViewChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.destinationitem)
    public var destinationItem : SemanticZoomLocation! {
        get { try! _default.get_DestinationItem() }
        set { try! _default.put_DestinationItem(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.issourcezoomedinview)
    public var isSourceZoomedInView : Bool {
        get { try! _default.get_IsSourceZoomedInView() }
        set { try! _default.put_IsSourceZoomedInView(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.sourceitem)
    public var sourceItem : SemanticZoomLocation! {
        get { try! _default.get_SourceItem() }
        set { try! _default.put_SourceItem(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider)
open class Slider : WinUI.RangeBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISlider
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISliderFactory : __ABI_Microsoft_UI_Xaml_Controls.ISliderFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Slider")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.SliderBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISliderFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ISliderStatics: __ABI_Microsoft_UI_Xaml_Controls.ISliderStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Slider")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.intermediatevalueproperty)
    public class var intermediateValueProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IntermediateValueProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isdirectionreversedproperty)
    public class var isDirectionReversedProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IsDirectionReversedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isthumbtooltipenabledproperty)
    public class var isThumbToolTipEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IsThumbToolTipEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.snapstoproperty)
    public class var snapsToProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_SnapsToProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.stepfrequencyproperty)
    public class var stepFrequencyProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_StepFrequencyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.thumbtooltipvalueconverterproperty)
    public class var thumbToolTipValueConverterProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_ThumbToolTipValueConverterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickfrequencyproperty)
    public class var tickFrequencyProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_TickFrequencyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickplacementproperty)
    public class var tickPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_TickPlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.intermediatevalue)
    public var intermediateValue : Double {
        get { try! _default.get_IntermediateValue() }
        set { try! _default.put_IntermediateValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isdirectionreversed)
    public var isDirectionReversed : Bool {
        get { try! _default.get_IsDirectionReversed() }
        set { try! _default.put_IsDirectionReversed(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isthumbtooltipenabled)
    public var isThumbToolTipEnabled : Bool {
        get { try! _default.get_IsThumbToolTipEnabled() }
        set { try! _default.put_IsThumbToolTipEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.orientation)
    public var orientation : Orientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.snapsto)
    public var snapsTo : WinUI.SliderSnapsTo {
        get { try! _default.get_SnapsTo() }
        set { try! _default.put_SnapsTo(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.stepfrequency)
    public var stepFrequency : Double {
        get { try! _default.get_StepFrequency() }
        set { try! _default.put_StepFrequency(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.thumbtooltipvalueconverter)
    public var thumbToolTipValueConverter : WinUI.AnyIValueConverter! {
        get { try! _default.get_ThumbToolTipValueConverter() }
        set { try! _default.put_ThumbToolTipValueConverter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickfrequency)
    public var tickFrequency : Double {
        get { try! _default.get_TickFrequency() }
        set { try! _default.put_TickFrequency(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickplacement)
    public var tickPlacement : WinUI.TickPlacement {
        get { try! _default.get_TickPlacement() }
        set { try! _default.put_TickPlacement(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview)
open class SplitView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISplitViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ISplitViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SplitView")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.SplitViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISplitViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ISplitViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ISplitViewStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SplitView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_CompactPaneLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_DisplayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.ispaneopenproperty)
    public class var isPaneOpenProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_IsPaneOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_LightDismissOverlayModeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_OpenPaneLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.panebackgroundproperty)
    public class var paneBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PaneBackgroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneplacementproperty)
    public class var panePlacementProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PanePlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneproperty)
    public class var paneProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PaneProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_TemplateSettingsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLength() }
        set { try! _default.put_CompactPaneLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.displaymode)
    public var displayMode : SplitViewDisplayMode {
        get { try! _default.get_DisplayMode() }
        set { try! _default.put_DisplayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.ispaneopen)
    public var isPaneOpen : Bool {
        get { try! _default.get_IsPaneOpen() }
        set { try! _default.put_IsPaneOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayMode() }
        set { try! _default.put_LightDismissOverlayMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLength() }
        set { try! _default.put_OpenPaneLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.pane)
    public var pane : WinUI.UIElement! {
        get { try! _default.get_Pane() }
        set { try! _default.put_Pane(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.panebackground)
    public var paneBackground : WinUI.Brush! {
        get { try! _default.get_PaneBackground() }
        set { try! _default.put_PaneBackground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneplacement)
    public var panePlacement : SplitViewPanePlacement {
        get { try! _default.get_PanePlacement() }
        set { try! _default.put_PanePlacement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.templatesettings)
    public var templateSettings : WinUI.SplitViewTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneclosed)
    public lazy var paneClosed : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneClosed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneClosed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneclosing)
    public lazy var paneClosing : Event<TypedEventHandler<SplitView?, SplitViewPaneClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneClosing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneClosing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneopened)
    public lazy var paneOpened : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneOpened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneOpened($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneopening)
    public lazy var paneOpening : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneOpening($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneOpening($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneclosingeventargs)
public final class SplitViewPaneClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitViewPaneClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout)
open class StackLayout : WinUI.VirtualizingLayout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IStackLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IStackLayoutFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackLayout")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.StackLayoutBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IStackLayoutFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IStackLayoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IStackLayoutStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackLayout")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IStackLayoutStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.spacingproperty)
    public class var spacingProperty : WinUI.DependencyProperty! {
        get { try! _IStackLayoutStatics.get_SpacingProperty() }
    }

    private static let _IStackLayoutStatics2: __ABI_Microsoft_UI_Xaml_Controls.IStackLayoutStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackLayout")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.isvirtualizationenabledproperty)
    public class var isVirtualizationEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IStackLayoutStatics2.get_IsVirtualizationEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.orientation)
    public var orientation : Orientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.spacing)
    public var spacing : Double {
        get { try! _default.get_Spacing() }
        set { try! _default.put_Spacing(newValue) }
    }

    private lazy var _IStackLayout2: __ABI_Microsoft_UI_Xaml_Controls.IStackLayout2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.isvirtualizationenabled)
    public var isVirtualizationEnabled : Bool {
        get { try! _IStackLayout2.get_IsVirtualizationEnabled() }
        set { try! _IStackLayout2.put_IsVirtualizationEnabled(newValue) }
    }

    deinit {
        _default = nil
        _IStackLayout2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel)
open class StackPanel : WinUI.Panel, WinUI.IScrollSnapPointsInfo, IInsertionPanel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IStackPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IStackPanelFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackPanel")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.StackPanelBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IStackPanelFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IStackPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IStackPanelStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackPanel")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.arescrollsnappointsregularproperty)
    public class var areScrollSnapPointsRegularProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_AreScrollSnapPointsRegularProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_BackgroundSizingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_BorderBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_BorderThicknessProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_CornerRadiusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.spacingproperty)
    public class var spacingProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_SpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.arescrollsnappointsregular)
    public var areScrollSnapPointsRegular : Bool {
        get { try! _default.get_AreScrollSnapPointsRegular() }
        set { try! _default.put_AreScrollSnapPointsRegular(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizing() }
        set { try! _default.put_BackgroundSizing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrush() }
        set { try! _default.put_BorderBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThickness() }
        set { try! _default.put_BorderThickness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.orientation)
    public var orientation : Orientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.spacing)
    public var spacing : Double {
        get { try! _default.get_Spacing() }
        set { try! _default.put_Spacing(newValue) }
    }

    private lazy var _IScrollSnapPointsInfo: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.getirregularsnappoints)
    public func getIrregularSnapPoints(_ orientation: Orientation, _ alignment: WinUI.SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>! {
        try _IScrollSnapPointsInfo.GetIrregularSnapPoints(orientation, alignment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.getregularsnappoints)
    public func getRegularSnapPoints(_ orientation: Orientation, _ alignment: WinUI.SnapPointsAlignment, _ offset: inout Float) throws -> Float {
        try _IScrollSnapPointsInfo.GetRegularSnapPoints(orientation, alignment, &offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.arehorizontalsnappointsregular)
    public var areHorizontalSnapPointsRegular : Bool {
        get { try! _IScrollSnapPointsInfo.get_AreHorizontalSnapPointsRegular() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.areverticalsnappointsregular)
    public var areVerticalSnapPointsRegular : Bool {
        get { try! _IScrollSnapPointsInfo.get_AreVerticalSnapPointsRegular() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.horizontalsnappointschanged)
    public lazy var horizontalSnapPointsChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollSnapPointsInfo else { return .init() }
          return try! this.add_HorizontalSnapPointsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IScrollSnapPointsInfo.remove_HorizontalSnapPointsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.verticalsnappointschanged)
    public lazy var verticalSnapPointsChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollSnapPointsInfo else { return .init() }
          return try! this.add_VerticalSnapPointsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IScrollSnapPointsInfo.remove_VerticalSnapPointsChanged($0)
       }
      )
    }()

    private lazy var _IInsertionPanel: __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanel! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.getinsertionindexes)
    public func getInsertionIndexes(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws {
        try _IInsertionPanel.GetInsertionIndexes(position, &first, &second)
    }

    deinit {
        _default = nil
        _IScrollSnapPointsInfo = nil
        _IInsertionPanel = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector)
open class StyleSelector : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IStyleSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StyleSelector")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Controls.StyleSelectorBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IStyleSelectorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector.selectstyle)
    public func selectStyle(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.Style! {
        try _default.SelectStyle(item, container)
    }

    private lazy var _IStyleSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector.selectstylecore)
    open func selectStyleCore(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.Style! {
        try _IStyleSelectorOverrides.SelectStyleCore(item, container)
    }

    deinit {
        _default = nil
        _IStyleSelectorOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel)
open class SwapChainPanel : WinUI.Grid {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISwapChainPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanelFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SwapChainPanel")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.SwapChainPanelBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISwapChainPanelFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ISwapChainPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanelStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SwapChainPanel")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscalexproperty)
    public class var compositionScaleXProperty : WinUI.DependencyProperty! {
        get { try! _ISwapChainPanelStatics.get_CompositionScaleXProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscaleyproperty)
    public class var compositionScaleYProperty : WinUI.DependencyProperty! {
        get { try! _ISwapChainPanelStatics.get_CompositionScaleYProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.createcoreindependentinputsource)
    public func createCoreIndependentInputSource(_ deviceKinds: WinAppSDK.InputPointerSourceDeviceKinds) throws -> WinAppSDK.InputPointerSource! {
        try _default.CreateCoreIndependentInputSource(deviceKinds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscalex)
    public var compositionScaleX : Float {
        get { try! _default.get_CompositionScaleX() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscaley)
    public var compositionScaleY : Float {
        get { try! _default.get_CompositionScaleY() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscalechanged)
    public lazy var compositionScaleChanged : Event<TypedEventHandler<SwapChainPanel?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompositionScaleChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompositionScaleChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip)
open class TeachingTip : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITeachingTipFactory : __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TeachingTip")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TeachingTipBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITeachingTipFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITeachingTipStatics: __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TeachingTip")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommandparameterproperty)
    public class var actionButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonCommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommandproperty)
    public class var actionButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonCommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncontentproperty)
    public class var actionButtonContentProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttonstyleproperty)
    public class var actionButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonCommandParameterProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonCommandProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncontentproperty)
    public class var closeButtonContentProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontentplacementproperty)
    public class var heroContentPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_HeroContentPlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontentproperty)
    public class var heroContentProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_HeroContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_IconSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.islightdismissenabledproperty)
    public class var isLightDismissEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_IsLightDismissEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_IsOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.placementmarginproperty)
    public class var placementMarginProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_PlacementMarginProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.preferredplacementproperty)
    public class var preferredPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_PreferredPlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.shouldconstraintorootboundsproperty)
    public class var shouldConstrainToRootBoundsProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ShouldConstrainToRootBoundsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.subtitleproperty)
    public class var subtitleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_SubtitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.tailvisibilityproperty)
    public class var tailVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TailVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.targetproperty)
    public class var targetProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TemplateSettingsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommand)
    public var actionButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_ActionButtonCommand() }
        set { try! _default.put_ActionButtonCommand(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommandparameter)
    public var actionButtonCommandParameter : Any! {
        get { try! _default.get_ActionButtonCommandParameter() }
        set { try! _default.put_ActionButtonCommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncontent)
    public var actionButtonContent : Any! {
        get { try! _default.get_ActionButtonContent() }
        set { try! _default.put_ActionButtonContent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttonstyle)
    public var actionButtonStyle : WinUI.Style! {
        get { try! _default.get_ActionButtonStyle() }
        set { try! _default.put_ActionButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommand() }
        set { try! _default.put_CloseButtonCommand(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameter() }
        set { try! _default.put_CloseButtonCommandParameter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncontent)
    public var closeButtonContent : Any! {
        get { try! _default.get_CloseButtonContent() }
        set { try! _default.put_CloseButtonContent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyle() }
        set { try! _default.put_CloseButtonStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontent)
    public var heroContent : WinUI.UIElement! {
        get { try! _default.get_HeroContent() }
        set { try! _default.put_HeroContent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontentplacement)
    public var heroContentPlacement : TeachingTipHeroContentPlacementMode {
        get { try! _default.get_HeroContentPlacement() }
        set { try! _default.put_HeroContentPlacement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSource() }
        set { try! _default.put_IconSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.islightdismissenabled)
    public var isLightDismissEnabled : Bool {
        get { try! _default.get_IsLightDismissEnabled() }
        set { try! _default.put_IsLightDismissEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpen() }
        set { try! _default.put_IsOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.placementmargin)
    public var placementMargin : WinUI.Thickness {
        get { try! _default.get_PlacementMargin() }
        set { try! _default.put_PlacementMargin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.preferredplacement)
    public var preferredPlacement : TeachingTipPlacementMode {
        get { try! _default.get_PreferredPlacement() }
        set { try! _default.put_PreferredPlacement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.shouldconstraintorootbounds)
    public var shouldConstrainToRootBounds : Bool {
        get { try! _default.get_ShouldConstrainToRootBounds() }
        set { try! _default.put_ShouldConstrainToRootBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.subtitle)
    public var subtitle : String {
        get { try! _default.get_Subtitle() }
        set { try! _default.put_Subtitle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.tailvisibility)
    public var tailVisibility : TeachingTipTailVisibility {
        get { try! _default.get_TailVisibility() }
        set { try! _default.put_TailVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.target)
    public var target : WinUI.FrameworkElement! {
        get { try! _default.get_Target() }
        set { try! _default.put_Target(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.templatesettings)
    public var templateSettings : TeachingTipTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttonclick)
    public lazy var actionButtonClick : Event<TypedEventHandler<TeachingTip?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ActionButtonClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ActionButtonClick($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<TeachingTip?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseButtonClick($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseButtonClick($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closed)
    public lazy var closed : Event<TypedEventHandler<TeachingTip?, TeachingTipClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closing)
    public lazy var closing : Event<TypedEventHandler<TeachingTip?, TeachingTipClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closing($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosedeventargs)
public final class TeachingTipClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosedeventargs.reason)
    public var reason : TeachingTipCloseReason {
        get { try! _default.get_Reason() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs)
public final class TeachingTipClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs.reason)
    public var reason : TeachingTipCloseReason {
        get { try! _default.get_Reason() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings)
open class TeachingTipTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITeachingTipTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettingsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TeachingTipTemplateSettingsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITeachingTipTemplateSettingsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITeachingTipTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettingsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipTemplateSettingsStatics.get_IconElementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toplefthighlightmarginproperty)
    public class var topLeftHighlightMarginProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipTemplateSettingsStatics.get_TopLeftHighlightMarginProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toprighthighlightmarginproperty)
    public class var topRightHighlightMarginProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipTemplateSettingsStatics.get_TopRightHighlightMarginProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElement() }
        set { try! _default.put_IconElement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toplefthighlightmargin)
    public var topLeftHighlightMargin : WinUI.Thickness {
        get { try! _default.get_TopLeftHighlightMargin() }
        set { try! _default.put_TopLeftHighlightMargin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toprighthighlightmargin)
    public var topRightHighlightMargin : WinUI.Thickness {
        get { try! _default.get_TopRightHighlightMargin() }
        set { try! _default.put_TopRightHighlightMargin(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock)
public final class TextBlock : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBlock
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TextBlock")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ITextBlockStatics: __ABI_Microsoft_UI_Xaml_Controls.ITextBlockStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TextBlock")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.characterspacingproperty)
    public static var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_CharacterSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontfamilyproperty)
    public static var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontFamilyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontsizeproperty)
    public static var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstretchproperty)
    public static var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontStretchProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstyleproperty)
    public static var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontweightproperty)
    public static var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontWeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.foregroundproperty)
    public static var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_ForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.horizontaltextalignmentproperty)
    public static var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_HorizontalTextAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.iscolorfontenabledproperty)
    public static var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsColorFontEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextscalefactorenabledproperty)
    public static var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextScaleFactorEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextselectionenabledproperty)
    public static var isTextSelectionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextSelectionEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmedproperty)
    public static var isTextTrimmedProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextTrimmedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.lineheightproperty)
    public static var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_LineHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.linestackingstrategyproperty)
    public static var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_LineStackingStrategyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.maxlinesproperty)
    public static var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_MaxLinesProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.opticalmarginalignmentproperty)
    public static var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_OpticalMarginAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_PaddingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectedtextproperty)
    public static var selectedTextProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectedTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectionFlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectionHighlightColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textalignmentproperty)
    public static var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textdecorationsproperty)
    public static var textDecorationsProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextDecorationsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textlineboundsproperty)
    public static var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextLineBoundsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextReadingOrderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texttrimmingproperty)
    public static var textTrimmingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextTrimmingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textwrappingproperty)
    public static var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextWrappingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectall)
    public func selectAll() throws {
        try _default.SelectAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.select)
    public func select(_ start: WinUI.TextPointer!, _ end: WinUI.TextPointer!) throws {
        try _default.Select(start, end)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.getalphamask)
    public func getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMask()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.copyselectiontoclipboard)
    public func copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboard()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.baselineoffset)
    public var baselineOffset : Double {
        get { try! _default.get_BaselineOffset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacing() }
        set { try! _default.put_CharacterSpacing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contentend)
    public var contentEnd : WinUI.TextPointer! {
        get { try! _default.get_ContentEnd() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contentstart)
    public var contentStart : WinUI.TextPointer! {
        get { try! _default.get_ContentStart() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamily() }
        set { try! _default.put_FontFamily(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSize() }
        set { try! _default.put_FontSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretch() }
        set { try! _default.put_FontStretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyle() }
        set { try! _default.put_FontStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeight() }
        set { try! _default.put_FontWeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_Foreground() }
        set { try! _default.put_Foreground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignment() }
        set { try! _default.put_HorizontalTextAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.inlines)
    public var inlines : WinUI.InlineCollection! {
        get { try! _default.get_Inlines() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.iscolorfontenabled)
    public var isColorFontEnabled : Bool {
        get { try! _default.get_IsColorFontEnabled() }
        set { try! _default.put_IsColorFontEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabled() }
        set { try! _default.put_IsTextScaleFactorEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextselectionenabled)
    public var isTextSelectionEnabled : Bool {
        get { try! _default.get_IsTextSelectionEnabled() }
        set { try! _default.put_IsTextSelectionEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmed)
    public var isTextTrimmed : Bool {
        get { try! _default.get_IsTextTrimmed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeight() }
        set { try! _default.put_LineHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategy() }
        set { try! _default.put_LineStackingStrategy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLines() }
        set { try! _default.put_MaxLines(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignment() }
        set { try! _default.put_OpticalMarginAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_Padding() }
        set { try! _default.put_Padding(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedText() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionend)
    public var selectionEnd : WinUI.TextPointer! {
        get { try! _default.get_SelectionEnd() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyout() }
        set { try! _default.put_SelectionFlyout(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColor() }
        set { try! _default.put_SelectionHighlightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionstart)
    public var selectionStart : WinUI.TextPointer! {
        get { try! _default.get_SelectionStart() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignment() }
        set { try! _default.put_TextAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textdecorations)
    public var textDecorations : UWP.TextDecorations {
        get { try! _default.get_TextDecorations() }
        set { try! _default.put_TextDecorations(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texthighlighters)
    public var textHighlighters : WindowsFoundation.AnyIVector<WinUI.TextHighlighter?>! {
        get { try! _default.get_TextHighlighters() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBounds() }
        set { try! _default.put_TextLineBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrder() }
        set { try! _default.put_TextReadingOrder(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texttrimming)
    public var textTrimming : WinUI.TextTrimming {
        get { try! _default.get_TextTrimming() }
        set { try! _default.put_TextTrimming(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrapping() }
        set { try! _default.put_TextWrapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpening($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpening($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmedchanged)
    public lazy var isTextTrimmedChanged : Event<TypedEventHandler<TextBlock?, IsTextTrimmedChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsTextTrimmedChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsTextTrimmedChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox)
open class TextBox : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITextBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.ITextBoxFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TextBox")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TextBoxBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITextBoxFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITextBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.ITextBoxStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TextBox")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.acceptsreturnproperty)
    public class var acceptsReturnProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_AcceptsReturnProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canpasteclipboardcontentproperty)
    public class var canPasteClipboardContentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanPasteClipboardContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canredoproperty)
    public class var canRedoProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanRedoProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canundoproperty)
    public class var canUndoProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanUndoProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.charactercasingproperty)
    public class var characterCasingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CharacterCasingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_DescriptionProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.desiredcandidatewindowalignmentproperty)
    public class var desiredCandidateWindowAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_DesiredCandidateWindowAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.horizontaltextalignmentproperty)
    public class var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HorizontalTextAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.inputscopeproperty)
    public class var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_InputScopeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.iscolorfontenabledproperty)
    public class var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsColorFontEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isreadonlyproperty)
    public class var isReadOnlyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsReadOnlyProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isspellcheckenabledproperty)
    public class var isSpellCheckEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsSpellCheckEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.istextpredictionenabledproperty)
    public class var isTextPredictionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsTextPredictionEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.maxlengthproperty)
    public class var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_MaxLengthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholderforegroundproperty)
    public class var placeholderForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PlaceholderForegroundProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PlaceholderTextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public class var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.proofingmenuflyoutproperty)
    public class var proofingMenuFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_ProofingMenuFlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionflyoutproperty)
    public class var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionFlyoutProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorproperty)
    public class var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionHighlightColorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorwhennotfocusedproperty)
    public class var selectionHighlightColorWhenNotFocusedProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionHighlightColorWhenNotFocusedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textalignmentproperty)
    public class var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextAlignmentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textreadingorderproperty)
    public class var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextReadingOrderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextWrappingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.select)
    public func select(_ start: Int32, _ length: Int32) throws {
        try _default.Select(start, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectall)
    public func selectAll() throws {
        try _default.SelectAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.getrectfromcharacterindex)
    public func getRectFromCharacterIndex(_ charIndex: Int32, _ trailingEdge: Bool) throws -> WindowsFoundation.Rect {
        try _default.GetRectFromCharacterIndex(charIndex, trailingEdge)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.getlinguisticalternativesasync)
    public func getLinguisticAlternativesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<String>?>! {
        try _default.GetLinguisticAlternativesAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.undo)
    public func undo() throws {
        try _default.Undo()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.redo)
    public func redo() throws {
        try _default.Redo()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.pastefromclipboard)
    public func pasteFromClipboard() throws {
        try _default.PasteFromClipboard()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.copyselectiontoclipboard)
    public func copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboard()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.cutselectiontoclipboard)
    public func cutSelectionToClipboard() throws {
        try _default.CutSelectionToClipboard()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.clearundoredohistory)
    public func clearUndoRedoHistory() throws {
        try _default.ClearUndoRedoHistory()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.acceptsreturn)
    public var acceptsReturn : Bool {
        get { try! _default.get_AcceptsReturn() }
        set { try! _default.put_AcceptsReturn(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canpasteclipboardcontent)
    public var canPasteClipboardContent : Bool {
        get { try! _default.get_CanPasteClipboardContent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canredo)
    public var canRedo : Bool {
        get { try! _default.get_CanRedo() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canundo)
    public var canUndo : Bool {
        get { try! _default.get_CanUndo() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.charactercasing)
    public var characterCasing : CharacterCasing {
        get { try! _default.get_CharacterCasing() }
        set { try! _default.put_CharacterCasing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.description)
    public var description : Any! {
        get { try! _default.get_Description() }
        set { try! _default.put_Description(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.desiredcandidatewindowalignment)
    public var desiredCandidateWindowAlignment : CandidateWindowAlignment {
        get { try! _default.get_DesiredCandidateWindowAlignment() }
        set { try! _default.put_DesiredCandidateWindowAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignment() }
        set { try! _default.put_HorizontalTextAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScope() }
        set { try! _default.put_InputScope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.iscolorfontenabled)
    public var isColorFontEnabled : Bool {
        get { try! _default.get_IsColorFontEnabled() }
        set { try! _default.put_IsColorFontEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isreadonly)
    public var isReadOnly : Bool {
        get { try! _default.get_IsReadOnly() }
        set { try! _default.put_IsReadOnly(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isspellcheckenabled)
    public var isSpellCheckEnabled : Bool {
        get { try! _default.get_IsSpellCheckEnabled() }
        set { try! _default.put_IsSpellCheckEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.istextpredictionenabled)
    public var isTextPredictionEnabled : Bool {
        get { try! _default.get_IsTextPredictionEnabled() }
        set { try! _default.put_IsTextPredictionEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLength() }
        set { try! _default.put_MaxLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholderforeground)
    public var placeholderForeground : WinUI.Brush! {
        get { try! _default.get_PlaceholderForeground() }
        set { try! _default.put_PlaceholderForeground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderText() }
        set { try! _default.put_PlaceholderText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Bool {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocus() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocus(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.proofingmenuflyout)
    public var proofingMenuFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_ProofingMenuFlyout() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedText() }
        set { try! _default.put_SelectedText(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyout() }
        set { try! _default.put_SelectionFlyout(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColor() }
        set { try! _default.put_SelectionHighlightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorwhennotfocused)
    public var selectionHighlightColorWhenNotFocused : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorWhenNotFocused() }
        set { try! _default.put_SelectionHighlightColorWhenNotFocused(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLength() }
        set { try! _default.put_SelectionLength(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStart() }
        set { try! _default.put_SelectionStart(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignment() }
        set { try! _default.put_TextAlignment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrder() }
        set { try! _default.put_TextReadingOrder(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrapping() }
        set { try! _default.put_TextWrapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.beforetextchanging)
    public lazy var beforeTextChanging : Event<TypedEventHandler<TextBox?, TextBoxBeforeTextChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BeforeTextChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BeforeTextChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.candidatewindowboundschanged)
    public lazy var candidateWindowBoundsChanged : Event<TypedEventHandler<TextBox?, CandidateWindowBoundsChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CandidateWindowBoundsChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CandidateWindowBoundsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpening($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpening($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.copyingtoclipboard)
    public lazy var copyingToClipboard : Event<TypedEventHandler<TextBox?, TextControlCopyingToClipboardEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CopyingToClipboard($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CopyingToClipboard($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.cuttingtoclipboard)
    public lazy var cuttingToClipboard : Event<TypedEventHandler<TextBox?, TextControlCuttingToClipboardEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CuttingToClipboard($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CuttingToClipboard($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Paste($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Paste($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionchanging)
    public lazy var selectionChanging : Event<TypedEventHandler<TextBox?, TextBoxSelectionChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textchanged)
    public lazy var textChanged : Event<TextChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textchanging)
    public lazy var textChanging : Event<TypedEventHandler<TextBox?, TextBoxTextChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionchanged)
    public lazy var textCompositionChanged : Event<TypedEventHandler<TextBox?, TextCompositionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionended)
    public lazy var textCompositionEnded : Event<TypedEventHandler<TextBox?, TextCompositionEndedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionEnded($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionEnded($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionstarted)
    public lazy var textCompositionStarted : Event<TypedEventHandler<TextBox?, TextCompositionStartedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionStarted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionStarted($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs)
public final class TextBoxBeforeTextChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxBeforeTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs.newtext)
    public var newText : String {
        get { try! _default.get_NewText() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs)
public final class TextBoxSelectionChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxSelectionChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLength() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStart() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxtextchangingeventargs)
public final class TextBoxTextChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxtextchangingeventargs.iscontentchanging)
    public var isContentChanging : Bool {
        get { try! _default.get_IsContentChanging() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textchangedeventargs)
public final class TextChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs)
public final class TextCompositionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_Length() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndex() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs)
public final class TextCompositionEndedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionEndedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_Length() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndex() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs)
public final class TextCompositionStartedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionStartedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_Length() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndex() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcopyingtoclipboardeventargs)
public final class TextControlCopyingToClipboardEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlCopyingToClipboardEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcopyingtoclipboardeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcuttingtoclipboardeventargs)
public final class TextControlCuttingToClipboardEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlCuttingToClipboardEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcuttingtoclipboardeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolpasteeventargs)
public final class TextControlPasteEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlPasteEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolpasteeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar)
open class TitleBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITitleBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITitleBarFactory : __ABI_Microsoft_UI_Xaml_Controls.ITitleBarFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TitleBar")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TitleBarBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITitleBarFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITitleBarStatics: __ABI_Microsoft_UI_Xaml_Controls.ITitleBarStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TitleBar")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_IconSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.isbackbuttonenabledproperty)
    public class var isBackButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_IsBackButtonEnabledProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.isbackbuttonvisibleproperty)
    public class var isBackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_IsBackButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.ispanetogglebuttonvisibleproperty)
    public class var isPaneToggleButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_IsPaneToggleButtonVisibleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.leftheaderproperty)
    public class var leftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_LeftHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.rightheaderproperty)
    public class var rightHeaderProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_RightHeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.subtitleproperty)
    public class var subtitleProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_SubtitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_TemplateSettingsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarStatics.get_TitleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSource() }
        set { try! _default.put_IconSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.isbackbuttonenabled)
    public var isBackButtonEnabled : Bool {
        get { try! _default.get_IsBackButtonEnabled() }
        set { try! _default.put_IsBackButtonEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.isbackbuttonvisible)
    public var isBackButtonVisible : Bool {
        get { try! _default.get_IsBackButtonVisible() }
        set { try! _default.put_IsBackButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.ispanetogglebuttonvisible)
    public var isPaneToggleButtonVisible : Bool {
        get { try! _default.get_IsPaneToggleButtonVisible() }
        set { try! _default.put_IsPaneToggleButtonVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.leftheader)
    public var leftHeader : WinUI.UIElement! {
        get { try! _default.get_LeftHeader() }
        set { try! _default.put_LeftHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.rightheader)
    public var rightHeader : WinUI.UIElement! {
        get { try! _default.get_RightHeader() }
        set { try! _default.put_RightHeader(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.subtitle)
    public var subtitle : String {
        get { try! _default.get_Subtitle() }
        set { try! _default.put_Subtitle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.templatesettings)
    public var templateSettings : TitleBarTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.backrequested)
    public lazy var backRequested : Event<TypedEventHandler<TitleBar?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BackRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BackRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebar.panetogglerequested)
    public lazy var paneToggleRequested : Event<TypedEventHandler<TitleBar?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneToggleRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneToggleRequested($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebartemplatesettings)
open class TitleBarTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITitleBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBarTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITitleBarTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.ITitleBarTemplateSettingsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TitleBarTemplateSettingsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITitleBarTemplateSettingsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITitleBarTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.ITitleBarTemplateSettingsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebartemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _ITitleBarTemplateSettingsStatics.get_IconElementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.titlebartemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElement() }
        set { try! _default.put_IconElement(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem)
open class ToggleMenuFlyoutItem : WinUI.MenuFlyoutItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IToggleMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ToggleMenuFlyoutItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IToggleMenuFlyoutItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IToggleMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem.ischeckedproperty)
    public class var isCheckedProperty : WinUI.DependencyProperty! {
        get { try! _IToggleMenuFlyoutItemStatics.get_IsCheckedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem.ischecked)
    public var isChecked : Bool {
        get { try! _default.get_IsChecked() }
        set { try! _default.put_IsChecked(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch)
public final class ToggleSwitch : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitch
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToggleSwitch")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IToggleSwitchStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitchStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToggleSwitch")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_HeaderProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_HeaderTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.isonproperty)
    public static var isOnProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_IsOnProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontentproperty)
    public static var offContentProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OffContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontenttemplateproperty)
    public static var offContentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OffContentTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontentproperty)
    public static var onContentProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OnContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontenttemplateproperty)
    public static var onContentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OnContentTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.header)
    public var header : Any! {
        get { try! _default.get_Header() }
        set { try! _default.put_Header(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplate() }
        set { try! _default.put_HeaderTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.ison)
    public var isOn : Bool {
        get { try! _default.get_IsOn() }
        set { try! _default.put_IsOn(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontent)
    public var offContent : Any! {
        get { try! _default.get_OffContent() }
        set { try! _default.put_OffContent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontenttemplate)
    public var offContentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_OffContentTemplate() }
        set { try! _default.put_OffContentTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontent)
    public var onContent : Any! {
        get { try! _default.get_OnContent() }
        set { try! _default.put_OnContent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontenttemplate)
    public var onContentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_OnContentTemplate() }
        set { try! _default.put_OnContentTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.templatesettings)
    public var templateSettings : WinUI.ToggleSwitchTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.toggled)
    public lazy var toggled : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Toggled($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Toggled($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip)
open class ToolTip : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToolTip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IToolTipFactory : __ABI_Microsoft_UI_Xaml_Controls.IToolTipFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToolTip")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.ToolTipBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IToolTipFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IToolTipStatics: __ABI_Microsoft_UI_Xaml_Controls.IToolTipStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToolTip")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.horizontaloffsetproperty)
    public class var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_HorizontalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_IsOpenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementproperty)
    public class var placementProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_PlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementrectproperty)
    public class var placementRectProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_PlacementRectProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementtargetproperty)
    public class var placementTargetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_PlacementTargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.verticaloffsetproperty)
    public class var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_VerticalOffsetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffset() }
        set { try! _default.put_HorizontalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpen() }
        set { try! _default.put_IsOpen(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placement)
    public var placement : WinUI.PlacementMode {
        get { try! _default.get_Placement() }
        set { try! _default.put_Placement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementrect)
    public var placementRect : WindowsFoundation.Rect? {
        get { try! _default.get_PlacementRect() }
        set { try! _default.put_PlacementRect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementtarget)
    public var placementTarget : WinUI.UIElement! {
        get { try! _default.get_PlacementTarget() }
        set { try! _default.put_PlacementTarget(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.templatesettings)
    public var templateSettings : WinUI.ToolTipTemplateSettings! {
        get { try! _default.get_TemplateSettings() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffset() }
        set { try! _default.put_VerticalOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.closed)
    public lazy var closed : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.opened)
    public lazy var opened : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Opened($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Opened($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice)
public final class ToolTipService : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToolTipService
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IToolTipServiceStatics: __ABI_Microsoft_UI_Xaml_Controls.IToolTipServiceStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ToolTipService")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.getplacement)
    public static func getPlacement(_ element: WinUI.DependencyObject!) throws -> WinUI.PlacementMode {
        return try _IToolTipServiceStatics.GetPlacement(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.setplacement)
    public static func setPlacement(_ element: WinUI.DependencyObject!, _ value: WinUI.PlacementMode) throws {
        try _IToolTipServiceStatics.SetPlacement(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.getplacementtarget)
    public static func getPlacementTarget(_ element: WinUI.DependencyObject!) throws -> WinUI.UIElement! {
        return try _IToolTipServiceStatics.GetPlacementTarget(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.setplacementtarget)
    public static func setPlacementTarget(_ element: WinUI.DependencyObject!, _ value: WinUI.UIElement!) throws {
        try _IToolTipServiceStatics.SetPlacementTarget(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.gettooltip)
    public static func getToolTip(_ element: WinUI.DependencyObject!) throws -> Any! {
        return try _IToolTipServiceStatics.GetToolTip(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.settooltip)
    public static func setToolTip(_ element: WinUI.DependencyObject!, _ value: Any!) throws {
        try _IToolTipServiceStatics.SetToolTip(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.placementproperty)
    public static var placementProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipServiceStatics.get_PlacementProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.placementtargetproperty)
    public static var placementTargetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipServiceStatics.get_PlacementTargetProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.tooltipproperty)
    public static var toolTipProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipServiceStatics.get_ToolTipProperty() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview)
open class TreeView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeView")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TreeViewBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics.get_SelectedItemProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics.get_SelectionModeProperty() }
    }

    private static let _ITreeViewStatics2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeView")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.candragitemsproperty)
    public class var canDragItemsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_CanDragItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.canreorderitemsproperty)
    public class var canReorderItemsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_CanReorderItemsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyleproperty)
    public class var itemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemContainerStyleProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyleselectorproperty)
    public class var itemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemContainerStyleSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainertransitionsproperty)
    public class var itemContainerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemContainerTransitionsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemTemplateProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplateselectorproperty)
    public class var itemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemTemplateSelectorProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.expand)
    public func expand(_ value: TreeViewNode!) throws {
        try _default.Expand(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.collapse)
    public func collapse(_ value: TreeViewNode!) throws {
        try _default.Collapse(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectall)
    public func selectAll() throws {
        try _default.SelectAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.rootnodes)
    public var rootNodes : WindowsFoundation.AnyIVector<TreeViewNode?>! {
        get { try! _default.get_RootNodes() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectednodes)
    public var selectedNodes : WindowsFoundation.AnyIVector<TreeViewNode?>! {
        get { try! _default.get_SelectedNodes() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectionmode)
    public var selectionMode : TreeViewSelectionMode {
        get { try! _default.get_SelectionMode() }
        set { try! _default.put_SelectionMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.collapsed)
    public lazy var collapsed : Event<TypedEventHandler<TreeView?, TreeViewCollapsedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Collapsed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Collapsed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.expanding)
    public lazy var expanding : Event<TypedEventHandler<TreeView?, TreeViewExpandingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Expanding($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Expanding($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.iteminvoked)
    public lazy var itemInvoked : Event<TypedEventHandler<TreeView?, TreeViewItemInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemInvoked($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemInvoked($0)
       }
      )
    }()

    private lazy var _ITreeView2: __ABI_Microsoft_UI_Xaml_Controls.ITreeView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.nodefromcontainer)
    public func nodeFromContainer(_ container: WinUI.DependencyObject!) throws -> TreeViewNode! {
        try _ITreeView2.NodeFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.containerfromnode)
    public func containerFromNode(_ node: TreeViewNode!) throws -> WinUI.DependencyObject! {
        try _ITreeView2.ContainerFromNode(node)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemfromcontainer)
    public func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _ITreeView2.ItemFromContainer(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _ITreeView2.ContainerFromItem(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.candragitems)
    public var canDragItems : Bool {
        get { try! _ITreeView2.get_CanDragItems() }
        set { try! _ITreeView2.put_CanDragItems(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.canreorderitems)
    public var canReorderItems : Bool {
        get { try! _ITreeView2.get_CanReorderItems() }
        set { try! _ITreeView2.put_CanReorderItems(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyle)
    public var itemContainerStyle : WinUI.Style! {
        get { try! _ITreeView2.get_ItemContainerStyle() }
        set { try! _ITreeView2.put_ItemContainerStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyleselector)
    public var itemContainerStyleSelector : StyleSelector! {
        get { try! _ITreeView2.get_ItemContainerStyleSelector() }
        set { try! _ITreeView2.put_ItemContainerStyleSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainertransitions)
    public var itemContainerTransitions : WinUI.TransitionCollection! {
        get { try! _ITreeView2.get_ItemContainerTransitions() }
        set { try! _ITreeView2.put_ItemContainerTransitions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplate)
    public var itemTemplate : WinUI.DataTemplate! {
        get { try! _ITreeView2.get_ItemTemplate() }
        set { try! _ITreeView2.put_ItemTemplate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplateselector)
    public var itemTemplateSelector : DataTemplateSelector! {
        get { try! _ITreeView2.get_ItemTemplateSelector() }
        set { try! _ITreeView2.put_ItemTemplateSelector(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemssource)
    public var itemsSource : Any! {
        get { try! _ITreeView2.get_ItemsSource() }
        set { try! _ITreeView2.put_ItemsSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selecteditem)
    public var selectedItem : Any! {
        get { try! _ITreeView2.get_SelectedItem() }
        set { try! _ITreeView2.put_SelectedItem(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _ITreeView2.get_SelectedItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectednode)
    public var selectedNode : TreeViewNode! {
        get { try! _ITreeView2.get_SelectedNode() }
        set { try! _ITreeView2.put_SelectedNode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.dragitemscompleted)
    public lazy var dragItemsCompleted : Event<TypedEventHandler<TreeView?, TreeViewDragItemsCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ITreeView2 else { return .init() }
          return try! this.add_DragItemsCompleted($0)
        },
        remove: { [weak self] in
         try? self?._ITreeView2.remove_DragItemsCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.dragitemsstarting)
    public lazy var dragItemsStarting : Event<TypedEventHandler<TreeView?, TreeViewDragItemsStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ITreeView2 else { return .init() }
          return try! this.add_DragItemsStarting($0)
        },
        remove: { [weak self] in
         try? self?._ITreeView2.remove_DragItemsStarting($0)
       }
      )
    }()

    private lazy var _ITreeView3: __ABI_Microsoft_UI_Xaml_Controls.ITreeView3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<TreeView?, TreeViewSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ITreeView3 else { return .init() }
          return try! this.add_SelectionChanged($0)
        },
        remove: { [weak self] in
         try? self?._ITreeView3.remove_SelectionChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
        _ITreeView2 = nil
        _ITreeView3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewcollapsedeventargs)
public final class TreeViewCollapsedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewCollapsedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewcollapsedeventargs.node)
    public var node : TreeViewNode! {
        get { try! _default.get_Node() }
    }

    private lazy var _ITreeViewCollapsedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewCollapsedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewcollapsedeventargs.item)
    public var item : Any! {
        get { try! _ITreeViewCollapsedEventArgs2.get_Item() }
    }

    deinit {
        _default = nil
        _ITreeViewCollapsedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs)
public final class TreeViewDragItemsCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewDragItemsCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResult() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs.items)
    public var items : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _default.get_Items() }
    }

    private lazy var _ITreeViewDragItemsCompletedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewDragItemsCompletedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs.newparentitem)
    public var newParentItem : Any! {
        get { try! _ITreeViewDragItemsCompletedEventArgs2.get_NewParentItem() }
    }

    deinit {
        _default = nil
        _ITreeViewDragItemsCompletedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs)
public final class TreeViewDragItemsStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewDragItemsStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_Data() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_Items() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewexpandingeventargs)
public final class TreeViewExpandingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewExpandingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewexpandingeventargs.node)
    public var node : TreeViewNode! {
        get { try! _default.get_Node() }
    }

    private lazy var _ITreeViewExpandingEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewExpandingEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewexpandingeventargs.item)
    public var item : Any! {
        get { try! _ITreeViewExpandingEventArgs2.get_Item() }
    }

    deinit {
        _default = nil
        _ITreeViewExpandingEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem)
open class TreeViewItem : WinUI.ListViewItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewItem")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TreeViewItemBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewItemFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewItemStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.collapsedglyphproperty)
    public class var collapsedGlyphProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_CollapsedGlyphProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.expandedglyphproperty)
    public class var expandedGlyphProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_ExpandedGlyphProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphbrushproperty)
    public class var glyphBrushProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_GlyphBrushProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphopacityproperty)
    public class var glyphOpacityProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_GlyphOpacityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphsizeproperty)
    public class var glyphSizeProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_GlyphSizeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_IsExpandedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.treeviewitemtemplatesettingsproperty)
    public class var treeViewItemTemplateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_TreeViewItemTemplateSettingsProperty() }
    }

    private static let _ITreeViewItemStatics2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemStatics2 = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewItem")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.hasunrealizedchildrenproperty)
    public class var hasUnrealizedChildrenProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics2.get_HasUnrealizedChildrenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics2.get_ItemsSourceProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.collapsedglyph)
    public var collapsedGlyph : String {
        get { try! _default.get_CollapsedGlyph() }
        set { try! _default.put_CollapsedGlyph(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.expandedglyph)
    public var expandedGlyph : String {
        get { try! _default.get_ExpandedGlyph() }
        set { try! _default.put_ExpandedGlyph(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphbrush)
    public var glyphBrush : WinUI.Brush! {
        get { try! _default.get_GlyphBrush() }
        set { try! _default.put_GlyphBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphopacity)
    public var glyphOpacity : Double {
        get { try! _default.get_GlyphOpacity() }
        set { try! _default.put_GlyphOpacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphsize)
    public var glyphSize : Double {
        get { try! _default.get_GlyphSize() }
        set { try! _default.put_GlyphSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.isexpanded)
    public var isExpanded : Bool {
        get { try! _default.get_IsExpanded() }
        set { try! _default.put_IsExpanded(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.treeviewitemtemplatesettings)
    public var treeViewItemTemplateSettings : TreeViewItemTemplateSettings! {
        get { try! _default.get_TreeViewItemTemplateSettings() }
    }

    private lazy var _ITreeViewItem2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.hasunrealizedchildren)
    public var hasUnrealizedChildren : Bool {
        get { try! _ITreeViewItem2.get_HasUnrealizedChildren() }
        set { try! _ITreeViewItem2.put_HasUnrealizedChildren(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.itemssource)
    public var itemsSource : Any! {
        get { try! _ITreeViewItem2.get_ItemsSource() }
        set { try! _ITreeViewItem2.put_ItemsSource(newValue) }
    }

    deinit {
        _default = nil
        _ITreeViewItem2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewiteminvokedeventargs)
public final class TreeViewItemInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewiteminvokedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewiteminvokedeventargs.invokeditem)
    public var invokedItem : Any! {
        get { try! _default.get_InvokedItem() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings)
open class TreeViewItemTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewItemTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettingsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TreeViewItemTemplateSettingsBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewItemTemplateSettingsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewItemTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettingsStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.collapsedglyphvisibilityproperty)
    public class var collapsedGlyphVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_CollapsedGlyphVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.dragitemscountproperty)
    public class var dragItemsCountProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_DragItemsCountProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.expandedglyphvisibilityproperty)
    public class var expandedGlyphVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_ExpandedGlyphVisibilityProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.indentationproperty)
    public class var indentationProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_IndentationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.collapsedglyphvisibility)
    public var collapsedGlyphVisibility : WinUI.Visibility {
        get { try! _default.get_CollapsedGlyphVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.dragitemscount)
    public var dragItemsCount : Int32 {
        get { try! _default.get_DragItemsCount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.expandedglyphvisibility)
    public var expandedGlyphVisibility : WinUI.Visibility {
        get { try! _default.get_ExpandedGlyphVisibility() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.indentation)
    public var indentation : WinUI.Thickness {
        get { try! _default.get_Indentation() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewlist)
open class TreeViewList : WinUI.ListView {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewList
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewListFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewListFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewList")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TreeViewListBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewListFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode)
open class TreeViewNode : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNode
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewNodeFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNodeFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewNode")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.TreeViewNodeBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewNodeFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewNodeStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNodeStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TreeViewNode")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.depthproperty)
    public class var depthProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_DepthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.haschildrenproperty)
    public class var hasChildrenProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_HasChildrenProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_IsExpandedProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.children)
    public var children : WindowsFoundation.AnyIVector<TreeViewNode?>! {
        get { try! _default.get_Children() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.content)
    public var content : Any! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.depth)
    public var depth : Int32 {
        get { try! _default.get_Depth() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.haschildren)
    public var hasChildren : Bool {
        get { try! _default.get_HasChildren() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.hasunrealizedchildren)
    public var hasUnrealizedChildren : Bool {
        get { try! _default.get_HasUnrealizedChildren() }
        set { try! _default.put_HasUnrealizedChildren(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.isexpanded)
    public var isExpanded : Bool {
        get { try! _default.get_IsExpanded() }
        set { try! _default.put_IsExpanded(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.parent)
    public var parent : TreeViewNode! {
        get { try! _default.get_Parent() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionchangedeventargs)
public final class TreeViewSelectionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionchangedeventargs.addeditems)
    public var addedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_AddedItems() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionchangedeventargs.removeditems)
    public var removedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_RemovedItems() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection)
public final class UIElementCollection : WinRTClass, IVector, IIterable {
    public typealias T = WinUI.UIElement?
    private typealias SwiftABI = WinUI.IVectorUIElement
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IUIElementCollection: __ABI_Microsoft_UI_Xaml_Controls.IUIElementCollection! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.move)
    public func move(_ oldIndex: UInt32, _ newIndex: UInt32) throws {
        try _IUIElementCollection.Move(oldIndex, newIndex)
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getat)
    public func getAt(_ index: UInt32) -> WinUI.UIElement? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<WinUI.UIElement?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.indexof)
    public func indexOf(_ value: WinUI.UIElement?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.setat)
    public func setAt(_ index: UInt32, _ value: WinUI.UIElement?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: WinUI.UIElement?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.append)
    public func append(_ value: WinUI.UIElement?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [WinUI.UIElement?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.replaceall)
    public func replaceAll(_ items: [WinUI.UIElement?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableUIElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WinUI.UIElement?>? {
        try! _IIterable.First()
    }

    deinit {
        _IUIElementCollection = nil
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout)
open class UniformGridLayout : WinUI.VirtualizingLayout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUniformGridLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayoutFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UniformGridLayout")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.UniformGridLayoutBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUniformGridLayoutFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IUniformGridLayoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayoutStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UniformGridLayout")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsjustificationproperty)
    public class var itemsJustificationProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_ItemsJustificationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsstretchproperty)
    public class var itemsStretchProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_ItemsStretchProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.maximumrowsorcolumnsproperty)
    public class var maximumRowsOrColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MaximumRowsOrColumnsProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.mincolumnspacingproperty)
    public class var minColumnSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinColumnSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemheightproperty)
    public class var minItemHeightProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinItemHeightProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemwidthproperty)
    public class var minItemWidthProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinItemWidthProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minrowspacingproperty)
    public class var minRowSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinRowSpacingProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_OrientationProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsjustification)
    public var itemsJustification : UniformGridLayoutItemsJustification {
        get { try! _default.get_ItemsJustification() }
        set { try! _default.put_ItemsJustification(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsstretch)
    public var itemsStretch : UniformGridLayoutItemsStretch {
        get { try! _default.get_ItemsStretch() }
        set { try! _default.put_ItemsStretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.maximumrowsorcolumns)
    public var maximumRowsOrColumns : Int32 {
        get { try! _default.get_MaximumRowsOrColumns() }
        set { try! _default.put_MaximumRowsOrColumns(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.mincolumnspacing)
    public var minColumnSpacing : Double {
        get { try! _default.get_MinColumnSpacing() }
        set { try! _default.put_MinColumnSpacing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemheight)
    public var minItemHeight : Double {
        get { try! _default.get_MinItemHeight() }
        set { try! _default.put_MinItemHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemwidth)
    public var minItemWidth : Double {
        get { try! _default.get_MinItemWidth() }
        set { try! _default.put_MinItemWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minrowspacing)
    public var minRowSpacing : Double {
        get { try! _default.get_MinRowSpacing() }
        set { try! _default.put_MinRowSpacing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.orientation)
    public var orientation : Orientation {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.usercontrol)
open class UserControl : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUserControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUserControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IUserControlFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UserControl")

    override public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.UserControlBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUserControlFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IUserControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IUserControlStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UserControl")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.usercontrol.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IUserControlStatics.get_ContentProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.usercontrol.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_Content() }
        set { try! _default.put_Content(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout)
open class VirtualizingLayout : WinUI.Layout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IVirtualizingLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.VirtualizingLayout")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.VirtualizingLayoutBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IVirtualizingLayoutFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private lazy var _IVirtualizingLayoutOverrides: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.initializeforcontextcore)
    open func initializeForContextCore(_ context: VirtualizingLayoutContext!) throws {
        try _IVirtualizingLayoutOverrides.InitializeForContextCore(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.uninitializeforcontextcore)
    open func uninitializeForContextCore(_ context: VirtualizingLayoutContext!) throws {
        try _IVirtualizingLayoutOverrides.UninitializeForContextCore(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.measureoverride)
    open func measureOverride(_ context: VirtualizingLayoutContext!, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IVirtualizingLayoutOverrides.MeasureOverride(context, availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.arrangeoverride)
    open func arrangeOverride(_ context: VirtualizingLayoutContext!, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IVirtualizingLayoutOverrides.ArrangeOverride(context, finalSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.onitemschangedcore)
    open func onItemsChangedCore(_ context: VirtualizingLayoutContext!, _ source: Any!, _ args: WinUI.NotifyCollectionChangedEventArgs!) throws {
        try _IVirtualizingLayoutOverrides.OnItemsChangedCore(context, source, args)
    }

    deinit {
        _default = nil
        _IVirtualizingLayoutOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext)
open class VirtualizingLayoutContext : WinUI.LayoutContext {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2Wrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2Wrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IVirtualizingLayoutContextFactory : __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext")

    public init() {
        super.init(composing: __IMPL_Microsoft_UI_Xaml_Controls.VirtualizingLayoutContextBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IVirtualizingLayoutContextFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getitemat)
    public func getItemAt(_ index: Int32) throws -> Any! {
        try _default.GetItemAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getorcreateelementat)
    public func getOrCreateElementAt(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.GetOrCreateElementAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getorcreateelementat)
    public func getOrCreateElementAt(_ index: Int32, _ options: ElementRealizationOptions) throws -> WinUI.UIElement! {
        try _default.GetOrCreateElementAt2(index, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recycleelement)
    public func recycleElement(_ element: WinUI.UIElement!) throws {
        try _default.RecycleElement(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.itemcount)
    public var itemCount : Int32 {
        get { try! _default.get_ItemCount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.layoutorigin)
    public var layoutOrigin : WindowsFoundation.Point {
        get { try! _default.get_LayoutOrigin() }
        set { try! _default.put_LayoutOrigin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.realizationrect)
    public var realizationRect : WindowsFoundation.Rect {
        get { try! _default.get_RealizationRect() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recommendedanchorindex)
    public var recommendedAnchorIndex : Int32 {
        get { try! _default.get_RecommendedAnchorIndex() }
    }

    private lazy var _IVirtualizingLayoutContext2: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.visiblerect)
    public var visibleRect : WindowsFoundation.Rect {
        get { try! _IVirtualizingLayoutContext2.get_VisibleRect() }
    }

    private lazy var _IVirtualizingLayoutContextOverrides: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.itemcountcore)
    open func itemCountCore() throws -> Int32 {
        try _IVirtualizingLayoutContextOverrides.ItemCountCore()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getitematcore)
    open func getItemAtCore(_ index: Int32) throws -> Any! {
        try _IVirtualizingLayoutContextOverrides.GetItemAtCore(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.realizationrectcore)
    open func realizationRectCore() throws -> WindowsFoundation.Rect {
        try _IVirtualizingLayoutContextOverrides.RealizationRectCore()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getorcreateelementatcore)
    open func getOrCreateElementAtCore(_ index: Int32, _ options: ElementRealizationOptions) throws -> WinUI.UIElement! {
        try _IVirtualizingLayoutContextOverrides.GetOrCreateElementAtCore(index, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recycleelementcore)
    open func recycleElementCore(_ element: WinUI.UIElement!) throws {
        try _IVirtualizingLayoutContextOverrides.RecycleElementCore(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.layoutorigincore)
    open var layoutOriginCore : WindowsFoundation.Point {
        get { try! _IVirtualizingLayoutContextOverrides.get_LayoutOriginCore() }
        set { try! _IVirtualizingLayoutContextOverrides.put_LayoutOriginCore(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recommendedanchorindexcore)
    open var recommendedAnchorIndexCore : Int32 {
        get { try! _IVirtualizingLayoutContextOverrides.get_RecommendedAnchorIndexCore() }
    }

    private lazy var _IVirtualizingLayoutContextOverrides2: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.visiblerectcore)
    open func visibleRectCore() throws -> WindowsFoundation.Rect {
        try _IVirtualizingLayoutContextOverrides2.VisibleRectCore()
    }

    deinit {
        _default = nil
        _IVirtualizingLayoutContext2 = nil
        _IVirtualizingLayoutContextOverrides = nil
        _IVirtualizingLayoutContextOverrides2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources)
public final class XamlControlsResources : WinUI.ResourceDictionary {
    public typealias K = Any?
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IXamlControlsResources
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.XamlControlsResources")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IXamlControlsResourcesStatics: __ABI_Microsoft_UI_Xaml_Controls.IXamlControlsResourcesStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.XamlControlsResources")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.ensurereveallights)
    public static func ensureRevealLights(_ element: WinUI.UIElement!) throws {
        try _IXamlControlsResourcesStatics.EnsureRevealLights(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.usecompactresourcesproperty)
    public static var useCompactResourcesProperty : WinUI.DependencyProperty! {
        get { try! _IXamlControlsResourcesStatics.get_UseCompactResourcesProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.usecompactresources)
    public var useCompactResources : Bool {
        get { try! _default.get_UseCompactResources() }
        set { try! _default.put_UseCompactResources(newValue) }
    }

    deinit {
        _default = nil
    }
}

public typealias ContextMenuOpeningEventHandler = (Any?, ContextMenuEventArgs?) throws -> ()
public typealias DragItemsStartingEventHandler = (Any?, DragItemsStartingEventArgs?) throws -> ()
public typealias ItemClickEventHandler = (Any?, ItemClickEventArgs?) throws -> ()
public typealias SelectionChangedEventHandler = (Any?, SelectionChangedEventArgs?) throws -> ()
public typealias SemanticZoomViewChangedEventHandler = (Any?, SemanticZoomViewChangedEventArgs?) throws -> ()
public typealias TextChangedEventHandler = (Any?, TextChangedEventArgs?) throws -> ()
public typealias TextControlPasteEventHandler = (Any?, TextControlPasteEventArgs?) throws -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual)
public protocol IAnimatedVisual : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual.duration)
    var duration: WindowsFoundation.TimeSpan { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual.rootvisual)
    var rootVisual: WinAppSDK.Visual! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual.size)
    var size: WindowsFoundation.Vector2 { get }
}

extension IAnimatedVisual {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisual = any IAnimatedVisual

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource)
public protocol IAnimatedVisualSource : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource.trycreateanimatedvisual)
    func tryCreateAnimatedVisual(_ compositor: WinAppSDK.Compositor!, _ diagnostics: inout Any!) throws -> WinUI.AnyIAnimatedVisual!
}

extension IAnimatedVisualSource {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisualSource = any IAnimatedVisualSource

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iinsertionpanel)
public protocol IInsertionPanel : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iinsertionpanel.getinsertionindexes)
    func getInsertionIndexes(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws
}

extension IInsertionPanel {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInsertionPanel = any IInsertionPanel

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping)
public protocol IItemContainerMapping : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.itemfromcontainer)
    func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromitem)
    func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.indexfromcontainer)
    func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromindex)
    func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject!
}

extension IItemContainerMapping {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIItemContainerMapping = any IItemContainerMapping

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping)
public protocol IKeyIndexMapping : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.keyfromindex)
    func keyFromIndex(_ index: Int32) throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.indexfromkey)
    func indexFromKey(_ key: String) throws -> Int32
}

extension IKeyIndexMapping {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIKeyIndexMapping = any IKeyIndexMapping

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.inavigate)
public protocol INavigate : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.inavigate.navigate)
    func navigate(_ sourcePageType: WinUI.TypeName) throws -> Bool
}

extension INavigate {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.INavigateWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.INavigateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyINavigate = any INavigate

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider)
public protocol IScrollAnchorProvider : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.registeranchorcandidate)
    func registerAnchorCandidate(_ element: WinUI.UIElement!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.unregisteranchorcandidate)
    func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.currentanchor)
    var currentAnchor: WinUI.UIElement! { get }
}

extension IScrollAnchorProvider {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIScrollAnchorProvider = any IScrollAnchorProvider

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation)
public protocol ISemanticZoomInformation : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.initializeviewchange)
    func initializeViewChange() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchange)
    func completeViewChange() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.makevisible)
    func makeVisible(_ item: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangefrom)
    func startViewChangeFrom(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangeto)
    func startViewChangeTo(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangefrom)
    func completeViewChangeFrom(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangeto)
    func completeViewChangeTo(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.isactiveview)
    var isActiveView: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.iszoomedinview)
    var isZoomedInView: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.semanticzoomowner)
    var semanticZoomOwner: WinUI.SemanticZoom! { get set }
}

extension ISemanticZoomInformation {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISemanticZoomInformation = any ISemanticZoomInformation

extension WinUI.AppBarClosedDisplayMode {
    public static var compact : WinUI.AppBarClosedDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode_Compact
    }
    public static var minimal : WinUI.AppBarClosedDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode_Minimal
    }
    public static var hidden : WinUI.AppBarClosedDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode_Hidden
    }
}
extension WinUI.AppBarClosedDisplayMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.AutoSuggestionBoxTextChangeReason {
    public static var userInput : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_UserInput
    }
    public static var programmaticChange : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_ProgrammaticChange
    }
    public static var suggestionChosen : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_SuggestionChosen
    }
}
extension WinUI.AutoSuggestionBoxTextChangeReason: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.BackgroundSizing {
    public static var innerBorderEdge : WinUI.BackgroundSizing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge
    }
    public static var outerBorderEdge : WinUI.BackgroundSizing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_OuterBorderEdge
    }
}
extension WinUI.BackgroundSizing: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.CandidateWindowAlignment {
    public static var `default` : WinUI.CandidateWindowAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment_Default
    }
    public static var bottomEdge : WinUI.CandidateWindowAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment_BottomEdge
    }
}
extension WinUI.CandidateWindowAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.CharacterCasing {
    public static var normal : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Normal
    }
    public static var lower : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Lower
    }
    public static var upper : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Upper
    }
}
extension WinUI.CharacterCasing: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ClickMode {
    public static var release : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Release
    }
    public static var press : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Press
    }
    public static var hover : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Hover
    }
}
extension WinUI.ClickMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ComboBoxSelectionChangedTrigger {
    public static var committed : WinUI.ComboBoxSelectionChangedTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger_Committed
    }
    public static var always : WinUI.ComboBoxSelectionChangedTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger_Always
    }
}
extension WinUI.ComboBoxSelectionChangedTrigger: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ContentDialogButton {
    public static var none : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_None
    }
    public static var primary : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Primary
    }
    public static var secondary : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Secondary
    }
    public static var close : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Close
    }
}
extension WinUI.ContentDialogButton: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ContentDialogPlacement {
    public static var popup : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_Popup
    }
    public static var inPlace : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_InPlace
    }
    public static var unconstrainedPopup : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_UnconstrainedPopup
    }
}
extension WinUI.ContentDialogPlacement: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ContentDialogResult {
    public static var none : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_None
    }
    public static var primary : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_Primary
    }
    public static var secondary : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_Secondary
    }
}
extension WinUI.ContentDialogResult: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ElementRealizationOptions {
    public static var none : WinUI.ElementRealizationOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions_None
    }
    public static var forceCreate : WinUI.ElementRealizationOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions_ForceCreate
    }
    public static var suppressAutoRecycle : WinUI.ElementRealizationOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions_SuppressAutoRecycle
    }
}
extension WinUI.ElementRealizationOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.IncrementalLoadingTrigger {
    public static var none : WinUI.IncrementalLoadingTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger_None
    }
    public static var edge : WinUI.IncrementalLoadingTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger_Edge
    }
}
extension WinUI.IncrementalLoadingTrigger: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.IndexBasedLayoutOrientation {
    public static var none : WinUI.IndexBasedLayoutOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation_None
    }
    public static var topToBottom : WinUI.IndexBasedLayoutOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation_TopToBottom
    }
    public static var leftToRight : WinUI.IndexBasedLayoutOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation_LeftToRight
    }
}
extension WinUI.IndexBasedLayoutOrientation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.InfoBarCloseReason {
    public static var closeButton : WinUI.InfoBarCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason_CloseButton
    }
    public static var programmatic : WinUI.InfoBarCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason_Programmatic
    }
}
extension WinUI.InfoBarCloseReason: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.InfoBarSeverity {
    public static var informational : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Informational
    }
    public static var success : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Success
    }
    public static var warning : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Warning
    }
    public static var error : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Error
    }
}
extension WinUI.InfoBarSeverity: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ItemCollectionTransitionOperation {
    public static var add : WinUI.ItemCollectionTransitionOperation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation_Add
    }
    public static var remove : WinUI.ItemCollectionTransitionOperation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation_Remove
    }
    public static var move : WinUI.ItemCollectionTransitionOperation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation_Move
    }
}
extension WinUI.ItemCollectionTransitionOperation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ItemCollectionTransitionTriggers {
    public static var collectionChangeAdd : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_CollectionChangeAdd
    }
    public static var collectionChangeRemove : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_CollectionChangeRemove
    }
    public static var collectionChangeReset : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_CollectionChangeReset
    }
    public static var layoutTransition : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_LayoutTransition
    }
}
extension WinUI.ItemCollectionTransitionTriggers: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.LightDismissOverlayMode {
    public static var auto : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_Auto
    }
    public static var on : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_On
    }
    public static var off : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_Off
    }
}
extension WinUI.LightDismissOverlayMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ListViewReorderMode {
    public static var disabled : WinUI.ListViewReorderMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode_Disabled
    }
    public static var enabled : WinUI.ListViewReorderMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode_Enabled
    }
}
extension WinUI.ListViewReorderMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ListViewSelectionMode {
    public static var none : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_None
    }
    public static var single : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Single
    }
    public static var multiple : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Multiple
    }
    public static var extended : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Extended
    }
}
extension WinUI.ListViewSelectionMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationViewBackButtonVisible {
    public static var collapsed : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Collapsed
    }
    public static var visible : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Visible
    }
    public static var auto : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Auto
    }
}
extension WinUI.NavigationViewBackButtonVisible: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationViewDisplayMode {
    public static var minimal : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Minimal
    }
    public static var compact : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Compact
    }
    public static var expanded : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Expanded
    }
}
extension WinUI.NavigationViewDisplayMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationViewOverflowLabelMode {
    public static var moreLabel : WinUI.NavigationViewOverflowLabelMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode_MoreLabel
    }
    public static var noLabel : WinUI.NavigationViewOverflowLabelMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode_NoLabel
    }
}
extension WinUI.NavigationViewOverflowLabelMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationViewPaneDisplayMode {
    public static var auto : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Auto
    }
    public static var left : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Left
    }
    public static var top : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Top
    }
    public static var leftCompact : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_LeftCompact
    }
    public static var leftMinimal : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_LeftMinimal
    }
}
extension WinUI.NavigationViewPaneDisplayMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationViewSelectionFollowsFocus {
    public static var disabled : WinUI.NavigationViewSelectionFollowsFocus {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus_Disabled
    }
    public static var enabled : WinUI.NavigationViewSelectionFollowsFocus {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus_Enabled
    }
}
extension WinUI.NavigationViewSelectionFollowsFocus: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationViewShoulderNavigationEnabled {
    public static var whenSelectionFollowsFocus : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_WhenSelectionFollowsFocus
    }
    public static var always : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_Always
    }
    public static var never : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_Never
    }
}
extension WinUI.NavigationViewShoulderNavigationEnabled: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.Orientation {
    public static var vertical : WinUI.Orientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical
    }
    public static var horizontal : WinUI.Orientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation_Horizontal
    }
}
extension WinUI.Orientation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PanelScrollingDirection {
    public static var none : WinUI.PanelScrollingDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection_None
    }
    public static var forward : WinUI.PanelScrollingDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection_Forward
    }
    public static var backward : WinUI.PanelScrollingDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection_Backward
    }
}
extension WinUI.PanelScrollingDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PasswordRevealMode {
    public static var peek : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Peek
    }
    public static var hidden : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Hidden
    }
    public static var visible : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Visible
    }
}
extension WinUI.PasswordRevealMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PipsPagerButtonVisibility {
    public static var visible : WinUI.PipsPagerButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility_Visible
    }
    public static var visibleOnPointerOver : WinUI.PipsPagerButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility_VisibleOnPointerOver
    }
    public static var collapsed : WinUI.PipsPagerButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility_Collapsed
    }
}
extension WinUI.PipsPagerButtonVisibility: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.PipsPagerWrapMode {
    public static var none : WinUI.PipsPagerWrapMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerWrapMode_None
    }
    public static var wrap : WinUI.PipsPagerWrapMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerWrapMode_Wrap
    }
}
extension WinUI.PipsPagerWrapMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.RefreshPullDirection {
    public static var leftToRight : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_LeftToRight
    }
    public static var topToBottom : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_TopToBottom
    }
    public static var rightToLeft : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_RightToLeft
    }
    public static var bottomToTop : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_BottomToTop
    }
}
extension WinUI.RefreshPullDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.RefreshVisualizerOrientation {
    public static var auto : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Auto
    }
    public static var normal : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Normal
    }
    public static var rotate90DegreesCounterclockwise : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Rotate90DegreesCounterclockwise
    }
    public static var rotate270DegreesCounterclockwise : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Rotate270DegreesCounterclockwise
    }
}
extension WinUI.RefreshVisualizerOrientation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.RefreshVisualizerState {
    public static var idle : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Idle
    }
    public static var peeking : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Peeking
    }
    public static var interacting : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Interacting
    }
    public static var pending : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Pending
    }
    public static var refreshing : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Refreshing
    }
}
extension WinUI.RefreshVisualizerState: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.RequiresPointer {
    public static var never : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never
    }
    public static var whenEngaged : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenEngaged
    }
    public static var whenFocused : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenFocused
    }
}
extension WinUI.RequiresPointer: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollBarVisibility {
    public static var disabled : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Disabled
    }
    public static var auto : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Auto
    }
    public static var hidden : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Hidden
    }
    public static var visible : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Visible
    }
}
extension WinUI.ScrollBarVisibility: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollIntoViewAlignment {
    public static var `default` : WinUI.ScrollIntoViewAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment_Default
    }
    public static var leading : WinUI.ScrollIntoViewAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment_Leading
    }
}
extension WinUI.ScrollIntoViewAlignment: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollMode {
    public static var disabled : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Disabled
    }
    public static var enabled : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Enabled
    }
    public static var auto : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Auto
    }
}
extension WinUI.ScrollMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingAnimationMode {
    public static var disabled : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Disabled
    }
    public static var enabled : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Enabled
    }
    public static var auto : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Auto
    }
}
extension WinUI.ScrollingAnimationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingChainMode {
    public static var auto : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Auto
    }
    public static var always : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Always
    }
    public static var never : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Never
    }
}
extension WinUI.ScrollingChainMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingContentOrientation {
    public static var vertical : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Vertical
    }
    public static var horizontal : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Horizontal
    }
    public static var none : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_None
    }
    public static var both : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Both
    }
}
extension WinUI.ScrollingContentOrientation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingInputKinds {
    public static var none : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_None
    }
    public static var touch : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Touch
    }
    public static var pen : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Pen
    }
    public static var mouseWheel : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_MouseWheel
    }
    public static var keyboard : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Keyboard
    }
    public static var gamepad : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Gamepad
    }
    public static var all : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_All
    }
}
extension WinUI.ScrollingInputKinds: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingInteractionState {
    public static var idle : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Idle
    }
    public static var interaction : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Interaction
    }
    public static var inertia : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Inertia
    }
    public static var animation : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Animation
    }
}
extension WinUI.ScrollingInteractionState: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingRailMode {
    public static var enabled : WinUI.ScrollingRailMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode_Enabled
    }
    public static var disabled : WinUI.ScrollingRailMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode_Disabled
    }
}
extension WinUI.ScrollingRailMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingScrollBarVisibility {
    public static var auto : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Auto
    }
    public static var visible : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Visible
    }
    public static var hidden : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Hidden
    }
}
extension WinUI.ScrollingScrollBarVisibility: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingScrollMode {
    public static var enabled : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Enabled
    }
    public static var disabled : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Disabled
    }
    public static var auto : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Auto
    }
}
extension WinUI.ScrollingScrollMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingSnapPointsMode {
    public static var `default` : WinUI.ScrollingSnapPointsMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode_Default
    }
    public static var ignore : WinUI.ScrollingSnapPointsMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode_Ignore
    }
}
extension WinUI.ScrollingSnapPointsMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ScrollingZoomMode {
    public static var enabled : WinUI.ScrollingZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode_Enabled
    }
    public static var disabled : WinUI.ScrollingZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode_Disabled
    }
}
extension WinUI.ScrollingZoomMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SelectionMode {
    public static var single : WinUI.SelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode_Single
    }
    public static var multiple : WinUI.SelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode_Multiple
    }
    public static var extended : WinUI.SelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode_Extended
    }
}
extension WinUI.SelectionMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SnapPointsType {
    public static var none : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_None
    }
    public static var optional : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_Optional
    }
    public static var mandatory : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_Mandatory
    }
    public static var optionalSingle : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_OptionalSingle
    }
    public static var mandatorySingle : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_MandatorySingle
    }
}
extension WinUI.SnapPointsType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SplitViewDisplayMode {
    public static var overlay : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_Overlay
    }
    public static var inline : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_Inline
    }
    public static var compactOverlay : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_CompactOverlay
    }
    public static var compactInline : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_CompactInline
    }
}
extension WinUI.SplitViewDisplayMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.SplitViewPanePlacement {
    public static var left : WinUI.SplitViewPanePlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement_Left
    }
    public static var right : WinUI.SplitViewPanePlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement_Right
    }
}
extension WinUI.SplitViewPanePlacement: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TeachingTipCloseReason {
    public static var closeButton : WinUI.TeachingTipCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason_CloseButton
    }
    public static var lightDismiss : WinUI.TeachingTipCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason_LightDismiss
    }
    public static var programmatic : WinUI.TeachingTipCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason_Programmatic
    }
}
extension WinUI.TeachingTipCloseReason: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TeachingTipHeroContentPlacementMode {
    public static var auto : WinUI.TeachingTipHeroContentPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode_Auto
    }
    public static var top : WinUI.TeachingTipHeroContentPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode_Top
    }
    public static var bottom : WinUI.TeachingTipHeroContentPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode_Bottom
    }
}
extension WinUI.TeachingTipHeroContentPlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TeachingTipPlacementMode {
    public static var auto : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Auto
    }
    public static var top : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Top
    }
    public static var bottom : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Bottom
    }
    public static var left : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Left
    }
    public static var right : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Right
    }
    public static var topRight : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_TopRight
    }
    public static var topLeft : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_TopLeft
    }
    public static var bottomRight : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_BottomRight
    }
    public static var bottomLeft : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_BottomLeft
    }
    public static var leftTop : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_LeftTop
    }
    public static var leftBottom : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_LeftBottom
    }
    public static var rightTop : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_RightTop
    }
    public static var rightBottom : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_RightBottom
    }
    public static var center : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Center
    }
}
extension WinUI.TeachingTipPlacementMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TeachingTipTailVisibility {
    public static var auto : WinUI.TeachingTipTailVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility_Auto
    }
    public static var visible : WinUI.TeachingTipTailVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility_Visible
    }
    public static var collapsed : WinUI.TeachingTipTailVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility_Collapsed
    }
}
extension WinUI.TeachingTipTailVisibility: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.TreeViewSelectionMode {
    public static var none : WinUI.TreeViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode_None
    }
    public static var single : WinUI.TreeViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode_Single
    }
    public static var multiple : WinUI.TreeViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode_Multiple
    }
}
extension WinUI.TreeViewSelectionMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.UniformGridLayoutItemsJustification {
    public static var start : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_Start
    }
    public static var center : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_Center
    }
    public static var end : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_End
    }
    public static var spaceAround : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_SpaceAround
    }
    public static var spaceBetween : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_SpaceBetween
    }
    public static var spaceEvenly : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_SpaceEvenly
    }
}
extension WinUI.UniformGridLayoutItemsJustification: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.UniformGridLayoutItemsStretch {
    public static var none : WinUI.UniformGridLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch_None
    }
    public static var fill : WinUI.UniformGridLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch_Fill
    }
    public static var uniform : WinUI.UniformGridLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch_Uniform
    }
}
extension WinUI.UniformGridLayoutItemsStretch: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.ZoomMode {
    public static var disabled : WinUI.ZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode_Disabled
    }
    public static var enabled : WinUI.ZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode_Enabled
    }
}
extension WinUI.ZoomMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

