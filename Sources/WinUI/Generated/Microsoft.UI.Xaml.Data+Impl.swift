// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml_Data {
    public enum INotifyPropertyChangedBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CINotifyPropertyChanged
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged
        public typealias SwiftProjection = AnyINotifyPropertyChanged
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return INotifyPropertyChangedImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChangedVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class INotifyPropertyChangedImpl: INotifyPropertyChanged, WinRTAbiImpl {
        fileprivate typealias Bridge = INotifyPropertyChangedBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.inotifypropertychanged.propertychanged)
        fileprivate lazy var propertyChanged : Event<PropertyChangedEventHandler> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_PropertyChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_PropertyChanged($0)
           }
          )
        }()

    }

    public enum IValueConverterBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIValueConverter
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IValueConverter
        public typealias SwiftProjection = AnyIValueConverter
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IValueConverterImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Data.IValueConverterVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IValueConverterImpl: IValueConverter, WinRTAbiImpl {
        fileprivate typealias Bridge = IValueConverterBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter.convert)
        fileprivate func convert(_ value: Any!, _ targetType: WinUI.TypeName, _ parameter: Any!, _ language: String) throws -> Any! {
            try _default.Convert(value, targetType, parameter, language)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter.convertback)
        fileprivate func convertBack(_ value: Any!, _ targetType: WinUI.TypeName, _ parameter: Any!, _ language: String) throws -> Any! {
            try _default.ConvertBack(value, targetType, parameter, language)
        }

    }

    public class PropertyChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = PropertyChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.PropertyChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public enum BindingBridge: ComposableBridge {
        public typealias SwiftProjection = Binding
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBinding
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBinding>?) -> Binding? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBinding : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = Binding
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBinding
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBinding
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBinding
    }

    public enum BindingBaseBridge: ComposableBridge {
        public typealias SwiftProjection = BindingBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingBase>?) -> BindingBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBindingBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = BindingBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBindingBase
    }

    public enum BindingExpressionBridge: ComposableBridge {
        public typealias SwiftProjection = BindingExpression
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpression
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpression>?) -> BindingExpression? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBindingExpression : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = BindingExpression
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpression
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingExpression
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBindingExpression
    }

    public enum BindingExpressionBaseBridge: ComposableBridge {
        public typealias SwiftProjection = BindingExpressionBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase>?) -> BindingExpressionBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBindingExpressionBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = BindingExpressionBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingExpressionBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBindingExpressionBase
    }

    public enum ItemIndexRangeBridge: ComposableBridge {
        public typealias SwiftProjection = ItemIndexRange
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIItemIndexRange
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIItemIndexRange>?) -> ItemIndexRange? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemIndexRange : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ItemIndexRange
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIItemIndexRange
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IItemIndexRange
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemIndexRange
    }

    public enum PropertyChangedEventArgsBridge: ComposableBridge {
        public typealias SwiftProjection = PropertyChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventArgs>?) -> PropertyChangedEventArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IPropertyChangedEventArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = PropertyChangedEventArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IPropertyChangedEventArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IPropertyChangedEventArgs
    }

    public enum RelativeSourceBridge: ComposableBridge {
        public typealias SwiftProjection = RelativeSource
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIRelativeSource
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIRelativeSource>?) -> RelativeSource? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IRelativeSource : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = RelativeSource
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIRelativeSource
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IRelativeSource
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IRelativeSource
    }

}
@_spi(WinRTInternal)
extension LoadMoreItemsResult: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CLoadMoreItemsResult
    public static func from(abi: ABI) -> Self {
        .init(count: abi.Count)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class INotifyPropertyChangedMaker: MakeFromAbi {
    public typealias SwiftType = AnyINotifyPropertyChanged
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Data.INotifyPropertyChangedBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IValueConverterMaker: MakeFromAbi {
    public typealias SwiftType = AnyIValueConverter
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.IValueConverter = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Data.IValueConverterBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class BindingMaker: MakeFromAbi {
    public typealias SwiftType = Binding
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Binding(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BindingBaseMaker: MakeFromAbi {
    public typealias SwiftType = BindingBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BindingBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BindingExpressionMaker: MakeFromAbi {
    public typealias SwiftType = BindingExpression
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BindingExpression(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BindingExpressionBaseMaker: MakeFromAbi {
    public typealias SwiftType = BindingExpressionBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BindingExpressionBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemIndexRangeMaker: MakeFromAbi {
    public typealias SwiftType = ItemIndexRange
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemIndexRange(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PropertyChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = PropertyChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PropertyChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RelativeSourceMaker: MakeFromAbi {
    public typealias SwiftType = RelativeSource
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RelativeSource(fromAbi: abi)
    }
}
