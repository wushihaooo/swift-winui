// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml_Controls {
    public enum IInsertionPanelBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanel
        public typealias SwiftProjection = AnyIInsertionPanel
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IInsertionPanelImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IInsertionPanelImpl: IInsertionPanel, WinRTAbiImpl {
        fileprivate typealias Bridge = IInsertionPanelBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iinsertionpanel.getinsertionindexes)
        fileprivate func getInsertionIndexes(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws {
            try _default.GetInsertionIndexes(position, &first, &second)
        }

    }

    public enum IItemContainerMappingBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping
        public typealias SwiftProjection = AnyIItemContainerMapping
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IItemContainerMappingImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IItemContainerMappingImpl: IItemContainerMapping, WinRTAbiImpl {
        fileprivate typealias Bridge = IItemContainerMappingBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.itemfromcontainer)
        fileprivate func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
            try _default.ItemFromContainer(container)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromitem)
        fileprivate func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
            try _default.ContainerFromItem(item)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.indexfromcontainer)
        fileprivate func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
            try _default.IndexFromContainer(container)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromindex)
        fileprivate func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
            try _default.ContainerFromIndex(index)
        }

    }

    public enum IKeyIndexMappingBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMapping
        public typealias SwiftProjection = AnyIKeyIndexMapping
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IKeyIndexMappingImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IKeyIndexMappingImpl: IKeyIndexMapping, WinRTAbiImpl {
        fileprivate typealias Bridge = IKeyIndexMappingBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.keyfromindex)
        fileprivate func keyFromIndex(_ index: Int32) throws -> String {
            try _default.KeyFromIndex(index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.indexfromkey)
        fileprivate func indexFromKey(_ key: String) throws -> Int32 {
            try _default.IndexFromKey(key)
        }

    }

    public enum INavigateBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigate
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigate
        public typealias SwiftProjection = AnyINavigate
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return INavigateImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.INavigateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class INavigateImpl: INavigate, WinRTAbiImpl {
        fileprivate typealias Bridge = INavigateBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.inavigate.navigate)
        fileprivate func navigate(_ sourcePageType: WinUI.TypeName) throws -> Bool {
            try _default.Navigate(sourcePageType)
        }

    }

    public enum IScrollAnchorProviderBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider
        public typealias SwiftProjection = AnyIScrollAnchorProvider
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollAnchorProviderImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollAnchorProviderImpl: IScrollAnchorProvider, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollAnchorProviderBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.registeranchorcandidate)
        fileprivate func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
            try _default.RegisterAnchorCandidate(element)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.unregisteranchorcandidate)
        fileprivate func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
            try _default.UnregisterAnchorCandidate(element)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.currentanchor)
        fileprivate var currentAnchor : WinUI.UIElement! {
            get { try! _default.get_CurrentAnchor() }
        }

    }

    public enum ISemanticZoomInformationBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation
        public typealias SwiftProjection = AnyISemanticZoomInformation
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ISemanticZoomInformationImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ISemanticZoomInformationImpl: ISemanticZoomInformation, WinRTAbiImpl {
        fileprivate typealias Bridge = ISemanticZoomInformationBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.initializeviewchange)
        fileprivate func initializeViewChange() throws {
            try _default.InitializeViewChange()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchange)
        fileprivate func completeViewChange() throws {
            try _default.CompleteViewChange()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.makevisible)
        fileprivate func makeVisible(_ item: SemanticZoomLocation!) throws {
            try _default.MakeVisible(item)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangefrom)
        fileprivate func startViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.StartViewChangeFrom(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangeto)
        fileprivate func startViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.StartViewChangeTo(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangefrom)
        fileprivate func completeViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.CompleteViewChangeFrom(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangeto)
        fileprivate func completeViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.CompleteViewChangeTo(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.isactiveview)
        fileprivate var isActiveView : Bool {
            get { try! _default.get_IsActiveView() }
            set { try! _default.put_IsActiveView(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.iszoomedinview)
        fileprivate var isZoomedInView : Bool {
            get { try! _default.get_IsZoomedInView() }
            set { try! _default.put_IsZoomedInView(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.semanticzoomowner)
        fileprivate var semanticZoomOwner : SemanticZoom! {
            get { try! _default.get_SemanticZoomOwner() }
            set { try! _default.put_SemanticZoomOwner(newValue) }
        }

    }

    public class ContextMenuOpeningEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ContextMenuOpeningEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class DragItemsStartingEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DragItemsStartingEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class ItemClickEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ItemClickEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ItemClickEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class SelectionChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = SelectionChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class SemanticZoomViewChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = SemanticZoomViewChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class TextChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = TextChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.TextChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class TextControlPasteEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = TextControlPasteEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public enum AnchorRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = AnchorRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs>?) -> AnchorRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum AppBarBridge: ComposableBridge {
        public typealias SwiftProjection = AppBar
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar>?) -> AppBar? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IAppBarOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverrides
            public typealias Class = AppBar
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBar
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IAppBarOverrides
    }

    public enum AutoSuggestBoxBridge: AbiBridge {
        public typealias SwiftProjection = AutoSuggestBox
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox>?) -> AutoSuggestBox? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum AutoSuggestBoxQuerySubmittedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = AutoSuggestBoxQuerySubmittedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs>?) -> AutoSuggestBoxQuerySubmittedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum AutoSuggestBoxSuggestionChosenEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = AutoSuggestBoxSuggestionChosenEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs>?) -> AutoSuggestBoxSuggestionChosenEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum AutoSuggestBoxTextChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = AutoSuggestBoxTextChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs>?) -> AutoSuggestBoxTextChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapIconBridge: ComposableBridge {
        public typealias SwiftProjection = BitmapIcon
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon>?) -> BitmapIcon? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = BitmapIcon
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBitmapIcon
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum BorderBridge: AbiBridge {
        public typealias SwiftProjection = Border
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder>?) -> Border? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ButtonBridge: ComposableBridge {
        public typealias SwiftProjection = Button
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton>?) -> Button? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = Button
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IButton
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum CandidateWindowBoundsChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = CandidateWindowBoundsChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs>?) -> CandidateWindowBoundsChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CanvasBridge: ComposableBridge {
        public typealias SwiftProjection = Canvas
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas>?) -> Canvas? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = Canvas
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICanvas
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum CheckBoxBridge: ComposableBridge {
        public typealias SwiftProjection = CheckBox
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox>?) -> CheckBox? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IToggleButtonOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
            public typealias Class = CheckBox
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICheckBox
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IToggleButtonOverrides
    }

    public enum ChoosingGroupHeaderContainerEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ChoosingGroupHeaderContainerEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs>?) -> ChoosingGroupHeaderContainerEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ChoosingItemContainerEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ChoosingItemContainerEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs>?) -> ChoosingItemContainerEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColumnDefinitionBridge: AbiBridge {
        public typealias SwiftProjection = ColumnDefinition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>?) -> ColumnDefinition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColumnDefinitionCollectionBridge: AbiBridge {
        public typealias SwiftProjection = ColumnDefinitionCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition>?) -> ColumnDefinitionCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ComboBoxBridge: ComposableBridge {
        public typealias SwiftProjection = ComboBox
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox>?) -> ComboBox? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IComboBoxOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverrides
            public typealias Class = ComboBox
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBox
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IComboBoxOverrides
    }

    public enum ComboBoxTextSubmittedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ComboBoxTextSubmittedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs>?) -> ComboBoxTextSubmittedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContainerContentChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ContainerContentChangingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs>?) -> ContainerContentChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentControlBridge: ComposableBridge {
        public typealias SwiftProjection = ContentControl
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl>?) -> ContentControl? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ContentControl
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControl
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum ContentDialogBridge: ComposableBridge {
        public typealias SwiftProjection = ContentDialog
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog>?) -> ContentDialog? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ContentDialog
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialog
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum ContentDialogButtonClickDeferralBridge: AbiBridge {
        public typealias SwiftProjection = ContentDialogButtonClickDeferral
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral>?) -> ContentDialogButtonClickDeferral? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentDialogButtonClickEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ContentDialogButtonClickEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs>?) -> ContentDialogButtonClickEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentDialogClosedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ContentDialogClosedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs>?) -> ContentDialogClosedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentDialogClosingDeferralBridge: AbiBridge {
        public typealias SwiftProjection = ContentDialogClosingDeferral
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral>?) -> ContentDialogClosingDeferral? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentDialogClosingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ContentDialogClosingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs>?) -> ContentDialogClosingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentDialogOpenedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ContentDialogOpenedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs>?) -> ContentDialogOpenedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContentPresenterBridge: ComposableBridge {
        public typealias SwiftProjection = ContentPresenter
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter>?) -> ContentPresenter? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentPresenterOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides
            public typealias Class = ContentPresenter
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenter
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentPresenterOverrides
    }

    public enum ContextMenuEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ContextMenuEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>?) -> ContextMenuEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ControlBridge: ComposableBridge {
        public typealias SwiftProjection = Control
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl>?) -> Control? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = Control
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControl
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum ControlTemplateBridge: AbiBridge {
        public typealias SwiftProjection = ControlTemplate
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>?) -> ControlTemplate? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DataTemplateSelectorBridge: ComposableBridge {
        public typealias SwiftProjection = DataTemplateSelector
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>?) -> DataTemplateSelector? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IDataTemplateSelectorOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverrides
            public typealias Class = DataTemplateSelector
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelector
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IDataTemplateSelectorOverrides
    }

    public enum DragItemsCompletedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DragItemsCompletedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs>?) -> DragItemsCompletedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragItemsStartingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DragItemsStartingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs>?) -> DragItemsStartingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FlipViewBridge: ComposableBridge {
        public typealias SwiftProjection = FlipView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView>?) -> FlipView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = FlipView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum FlipViewItemBridge: ComposableBridge {
        public typealias SwiftProjection = FlipViewItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem>?) -> FlipViewItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = FlipViewItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipViewItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum FlyoutBridge: ComposableBridge {
        public typealias SwiftProjection = Flyout
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout>?) -> Flyout? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFlyoutBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
            public typealias Class = Flyout
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyout
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFlyoutBaseOverrides
    }

    public enum FlyoutPresenterBridge: ComposableBridge {
        public typealias SwiftProjection = FlyoutPresenter
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter>?) -> FlyoutPresenter? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = FlyoutPresenter
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenter
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum FocusDisengagedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = FocusDisengagedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs>?) -> FocusDisengagedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FocusEngagedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = FocusEngagedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs>?) -> FocusEngagedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FontIconBridge: ComposableBridge {
        public typealias SwiftProjection = FontIcon
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon>?) -> FontIcon? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = FontIcon
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIcon
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum FontIconSourceBridge: ComposableBridge {
        public typealias SwiftProjection = FontIconSource
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource>?) -> FontIconSource? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IIconSourceOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
            public typealias Class = FontIconSource
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIconSource
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IIconSourceOverrides
    }

    public enum FrameBridge: ComposableBridge {
        public typealias SwiftProjection = Frame
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame>?) -> Frame? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = Frame
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFrame
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum GridBridge: ComposableBridge {
        public typealias SwiftProjection = Grid
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid>?) -> Grid? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = Grid
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGrid
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum GridViewBridge: ComposableBridge {
        public typealias SwiftProjection = GridView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView>?) -> GridView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = GridView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum GridViewItemBridge: ComposableBridge {
        public typealias SwiftProjection = GridViewItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem>?) -> GridViewItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = GridViewItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridViewItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum GroupStyleBridge: ComposableBridge {
        public typealias SwiftProjection = GroupStyle
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle>?) -> GroupStyle? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IGroupStyle : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = GroupStyle
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyle
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IGroupStyle
    }

    public enum GroupStyleSelectorBridge: ComposableBridge {
        public typealias SwiftProjection = GroupStyleSelector
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector>?) -> GroupStyleSelector? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IGroupStyleSelectorOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverrides
            public typealias Class = GroupStyleSelector
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelector
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IGroupStyleSelectorOverrides
    }

    public enum HyperlinkButtonBridge: ComposableBridge {
        public typealias SwiftProjection = HyperlinkButton
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton>?) -> HyperlinkButton? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = HyperlinkButton
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButton
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum IconElementBridge: ComposableBridge {
        public typealias SwiftProjection = IconElement
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement>?) -> IconElement? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = IconElement
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconElement
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum IconSourceBridge: ComposableBridge {
        public typealias SwiftProjection = IconSource
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource>?) -> IconSource? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IIconSourceOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
            public typealias Class = IconSource
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSource
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IIconSourceOverrides
    }

    public enum IconSourceElementBridge: ComposableBridge {
        public typealias SwiftProjection = IconSourceElement
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement>?) -> IconSourceElement? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = IconSourceElement
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElement
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum ImageBridge: AbiBridge {
        public typealias SwiftProjection = Image
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage>?) -> Image? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ImageIconBridge: ComposableBridge {
        public typealias SwiftProjection = ImageIcon
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon>?) -> ImageIcon? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = ImageIcon
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImageIcon
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum InfoBadgeBridge: ComposableBridge {
        public typealias SwiftProjection = InfoBadge
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge>?) -> InfoBadge? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = InfoBadge
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadge
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum InfoBadgeTemplateSettingsBridge: ComposableBridge {
        public typealias SwiftProjection = InfoBadgeTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings>?) -> InfoBadgeTemplateSettings? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IInfoBadgeTemplateSettings : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = InfoBadgeTemplateSettings
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettings
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IInfoBadgeTemplateSettings
    }

    public enum InfoBarBridge: ComposableBridge {
        public typealias SwiftProjection = InfoBar
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar>?) -> InfoBar? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = InfoBar
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBar
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum InfoBarClosedEventArgsBridge: ComposableBridge {
        public typealias SwiftProjection = InfoBarClosedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs>?) -> InfoBarClosedEventArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IInfoBarClosedEventArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = InfoBarClosedEventArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosedEventArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IInfoBarClosedEventArgs
    }

    public enum InfoBarClosingEventArgsBridge: ComposableBridge {
        public typealias SwiftProjection = InfoBarClosingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs>?) -> InfoBarClosingEventArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IInfoBarClosingEventArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = InfoBarClosingEventArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosingEventArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IInfoBarClosingEventArgs
    }

    public enum InfoBarTemplateSettingsBridge: ComposableBridge {
        public typealias SwiftProjection = InfoBarTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings>?) -> InfoBarTemplateSettings? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IInfoBarTemplateSettings : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = InfoBarTemplateSettings
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettings
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IInfoBarTemplateSettings
    }

    public enum IsTextTrimmedChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = IsTextTrimmedChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs>?) -> IsTextTrimmedChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemClickEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ItemClickEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs>?) -> ItemClickEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemCollectionBridge: AbiBridge {
        public typealias SwiftProjection = ItemCollection
        public typealias CABI = __x_ABI_C__FIObservableVector_1_IInspectable
        public static func from(abi: ComPtr<__x_ABI_C__FIObservableVector_1_IInspectable>?) -> ItemCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemCollectionTransitionBridge: AbiBridge {
        public typealias SwiftProjection = ItemCollectionTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition>?) -> ItemCollectionTransition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemCollectionTransitionCompletedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ItemCollectionTransitionCompletedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs>?) -> ItemCollectionTransitionCompletedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemCollectionTransitionProgressBridge: AbiBridge {
        public typealias SwiftProjection = ItemCollectionTransitionProgress
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress>?) -> ItemCollectionTransitionProgress? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemCollectionTransitionProviderBridge: ComposableBridge {
        public typealias SwiftProjection = ItemCollectionTransitionProvider
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider>?) -> ItemCollectionTransitionProvider? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemCollectionTransitionProviderOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverrides
            public typealias Class = ItemCollectionTransitionProvider
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProvider
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemCollectionTransitionProviderOverrides
    }

    public enum ItemContainerGeneratorBridge: AbiBridge {
        public typealias SwiftProjection = ItemContainerGenerator
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator>?) -> ItemContainerGenerator? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemsControlBridge: ComposableBridge {
        public typealias SwiftProjection = ItemsControl
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl>?) -> ItemsControl? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = ItemsControl
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControl
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum ItemsPanelTemplateBridge: AbiBridge {
        public typealias SwiftProjection = ItemsPanelTemplate
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate>?) -> ItemsPanelTemplate? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemsRepeaterBridge: ComposableBridge {
        public typealias SwiftProjection = ItemsRepeater
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater>?) -> ItemsRepeater? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = ItemsRepeater
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeater
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum ItemsRepeaterElementClearingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ItemsRepeaterElementClearingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs>?) -> ItemsRepeaterElementClearingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemsRepeaterElementIndexChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ItemsRepeaterElementIndexChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs>?) -> ItemsRepeaterElementIndexChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemsRepeaterElementPreparedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ItemsRepeaterElementPreparedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs>?) -> ItemsRepeaterElementPreparedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemsSourceViewBridge: ComposableBridge {
        public typealias SwiftProjection = ItemsSourceView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView>?) -> ItemsSourceView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsSourceView : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ItemsSourceView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsSourceView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsSourceView
    }

    public enum ItemsWrapGridBridge: ComposableBridge {
        public typealias SwiftProjection = ItemsWrapGrid
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid>?) -> ItemsWrapGrid? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = ItemsWrapGrid
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGrid
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum LayoutBridge: ComposableBridge {
        public typealias SwiftProjection = Layout
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout>?) -> Layout? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ILayoutOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverrides
            public typealias Class = Layout
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayout
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ILayoutOverrides
    }

    public enum LayoutContextBridge: ComposableBridge {
        public typealias SwiftProjection = LayoutContext
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext>?) -> LayoutContext? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ILayoutContextOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverrides
            public typealias Class = LayoutContext
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContext
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ILayoutContextOverrides
    }

    public enum ListBoxBridge: ComposableBridge {
        public typealias SwiftProjection = ListBox
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox>?) -> ListBox? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = ListBox
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBox
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum ListBoxItemBridge: ComposableBridge {
        public typealias SwiftProjection = ListBoxItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem>?) -> ListBoxItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ListBoxItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBoxItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum ListViewBridge: ComposableBridge {
        public typealias SwiftProjection = ListView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView>?) -> ListView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = ListView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum ListViewBaseBridge: ComposableBridge {
        public typealias SwiftProjection = ListViewBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase>?) -> ListViewBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = ListViewBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum ListViewBaseHeaderItemBridge: ComposableBridge {
        public typealias SwiftProjection = ListViewBaseHeaderItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem>?) -> ListViewBaseHeaderItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ListViewBaseHeaderItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum ListViewItemBridge: ComposableBridge {
        public typealias SwiftProjection = ListViewItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem>?) -> ListViewItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ListViewItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum MediaPlayerElementBridge: ComposableBridge {
        public typealias SwiftProjection = MediaPlayerElement
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement>?) -> MediaPlayerElement? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MediaPlayerElement
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElement
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MediaTransportControlsBridge: ComposableBridge {
        public typealias SwiftProjection = MediaTransportControls
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls>?) -> MediaTransportControls? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MediaTransportControls
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControls
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MenuBarBridge: ComposableBridge {
        public typealias SwiftProjection = MenuBar
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar>?) -> MenuBar? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MenuBar
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBar
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MenuBarItemBridge: ComposableBridge {
        public typealias SwiftProjection = MenuBarItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem>?) -> MenuBarItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MenuBarItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MenuFlyoutBridge: ComposableBridge {
        public typealias SwiftProjection = MenuFlyout
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout>?) -> MenuFlyout? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFlyoutBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
            public typealias Class = MenuFlyout
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyout
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFlyoutBaseOverrides
    }

    public enum MenuFlyoutItemBridge: ComposableBridge {
        public typealias SwiftProjection = MenuFlyoutItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem>?) -> MenuFlyoutItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MenuFlyoutItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MenuFlyoutItemBaseBridge: ComposableBridge {
        public typealias SwiftProjection = MenuFlyoutItemBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase>?) -> MenuFlyoutItemBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MenuFlyoutItemBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MenuFlyoutSeparatorBridge: ComposableBridge {
        public typealias SwiftProjection = MenuFlyoutSeparator
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator>?) -> MenuFlyoutSeparator? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = MenuFlyoutSeparator
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparator
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum MenuFlyoutSubItemBridge: AbiBridge {
        public typealias SwiftProjection = MenuFlyoutSubItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem>?) -> MenuFlyoutSubItem? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewBridge: ComposableBridge {
        public typealias SwiftProjection = NavigationView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView>?) -> NavigationView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = NavigationView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum NavigationViewBackRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewBackRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs>?) -> NavigationViewBackRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewDisplayModeChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewDisplayModeChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs>?) -> NavigationViewDisplayModeChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewItemBridge: ComposableBridge {
        public typealias SwiftProjection = NavigationViewItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem>?) -> NavigationViewItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = NavigationViewItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum NavigationViewItemBaseBridge: ComposableBridge {
        public typealias SwiftProjection = NavigationViewItemBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase>?) -> NavigationViewItemBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = NavigationViewItemBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum NavigationViewItemCollapsedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewItemCollapsedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs>?) -> NavigationViewItemCollapsedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewItemExpandingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewItemExpandingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs>?) -> NavigationViewItemExpandingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewItemInvokedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewItemInvokedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs>?) -> NavigationViewItemInvokedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewPaneClosingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewPaneClosingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs>?) -> NavigationViewPaneClosingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewSelectionChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = NavigationViewSelectionChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs>?) -> NavigationViewSelectionChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum NavigationViewTemplateSettingsBridge: ComposableBridge {
        public typealias SwiftProjection = NavigationViewTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings>?) -> NavigationViewTemplateSettings? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum INavigationViewTemplateSettings : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = NavigationViewTemplateSettings
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = INavigationViewTemplateSettings
    }

    public enum PageBridge: ComposableBridge {
        public typealias SwiftProjection = Page
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage>?) -> Page? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IPageOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPageOverrides
            public typealias Class = Page
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPage
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IPageOverrides
    }

    public enum PanelBridge: ComposableBridge {
        public typealias SwiftProjection = Panel
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel>?) -> Panel? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = Panel
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPanel
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum PasswordBoxBridge: AbiBridge {
        public typealias SwiftProjection = PasswordBox
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox>?) -> PasswordBox? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PasswordBoxPasswordChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = PasswordBoxPasswordChangingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs>?) -> PasswordBoxPasswordChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PipsPagerBridge: ComposableBridge {
        public typealias SwiftProjection = PipsPager
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager>?) -> PipsPager? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = PipsPager
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPager
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum PipsPagerSelectedIndexChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = PipsPagerSelectedIndexChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs>?) -> PipsPagerSelectedIndexChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PipsPagerTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = PipsPagerTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings>?) -> PipsPagerTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ProgressBarBridge: ComposableBridge {
        public typealias SwiftProjection = ProgressBar
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar>?) -> ProgressBar? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IRangeBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
            public typealias Class = ProgressBar
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBar
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IRangeBaseOverrides
    }

    public enum ProgressBarTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = ProgressBarTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings>?) -> ProgressBarTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ProgressRingBridge: ComposableBridge {
        public typealias SwiftProjection = ProgressRing
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing>?) -> ProgressRing? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = ProgressRing
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRing
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum ProgressRingTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = ProgressRingTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings>?) -> ProgressRingTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RadioButtonBridge: ComposableBridge {
        public typealias SwiftProjection = RadioButton
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton>?) -> RadioButton? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IToggleButtonOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
            public typealias Class = RadioButton
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButton
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IToggleButtonOverrides
    }

    public enum RadioButtonsBridge: ComposableBridge {
        public typealias SwiftProjection = RadioButtons
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons>?) -> RadioButtons? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = RadioButtons
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButtons
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum RefreshContainerBridge: ComposableBridge {
        public typealias SwiftProjection = RefreshContainer
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer>?) -> RefreshContainer? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = RefreshContainer
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainer
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum RefreshRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = RefreshRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshRequestedEventArgs>?) -> RefreshRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RefreshStateChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = RefreshStateChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshStateChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshStateChangedEventArgs>?) -> RefreshStateChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RefreshVisualizerBridge: ComposableBridge {
        public typealias SwiftProjection = RefreshVisualizer
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer>?) -> RefreshVisualizer? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = RefreshVisualizer
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizer
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum RelativePanelBridge: ComposableBridge {
        public typealias SwiftProjection = RelativePanel
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel>?) -> RelativePanel? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = RelativePanel
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRelativePanel
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum RowDefinitionBridge: AbiBridge {
        public typealias SwiftProjection = RowDefinition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>?) -> RowDefinition? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RowDefinitionCollectionBridge: AbiBridge {
        public typealias SwiftProjection = RowDefinitionCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition>?) -> RowDefinitionCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollViewBridge: ComposableBridge {
        public typealias SwiftProjection = ScrollView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView>?) -> ScrollView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = ScrollView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum ScrollViewerBridge: AbiBridge {
        public typealias SwiftProjection = ScrollViewer
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer>?) -> ScrollViewer? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollViewerViewBridge: AbiBridge {
        public typealias SwiftProjection = ScrollViewerView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView>?) -> ScrollViewerView? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollViewerViewChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollViewerViewChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs>?) -> ScrollViewerViewChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollViewerViewChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollViewerViewChangingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs>?) -> ScrollViewerViewChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingAnchorRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollingAnchorRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs>?) -> ScrollingAnchorRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingBringingIntoViewEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollingBringingIntoViewEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs>?) -> ScrollingBringingIntoViewEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingScrollAnimationStartingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollingScrollAnimationStartingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs>?) -> ScrollingScrollAnimationStartingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingScrollCompletedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollingScrollCompletedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs>?) -> ScrollingScrollCompletedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingScrollOptionsBridge: ComposableBridge {
        public typealias SwiftProjection = ScrollingScrollOptions
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions>?) -> ScrollingScrollOptions? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IScrollingScrollOptions : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ScrollingScrollOptions
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptions
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IScrollingScrollOptions
    }

    public enum ScrollingZoomAnimationStartingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollingZoomAnimationStartingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs>?) -> ScrollingZoomAnimationStartingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingZoomCompletedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollingZoomCompletedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs>?) -> ScrollingZoomCompletedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollingZoomOptionsBridge: ComposableBridge {
        public typealias SwiftProjection = ScrollingZoomOptions
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions>?) -> ScrollingZoomOptions? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IScrollingZoomOptions : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ScrollingZoomOptions
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptions
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IScrollingZoomOptions
    }

    public enum SelectionChangedEventArgsBridge: ComposableBridge {
        public typealias SwiftProjection = SelectionChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs>?) -> SelectionChangedEventArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ISelectionChangedEventArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = SelectionChangedEventArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ISelectionChangedEventArgs
    }

    public enum SemanticZoomBridge: AbiBridge {
        public typealias SwiftProjection = SemanticZoom
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom>?) -> SemanticZoom? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SemanticZoomLocationBridge: AbiBridge {
        public typealias SwiftProjection = SemanticZoomLocation
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation>?) -> SemanticZoomLocation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SemanticZoomViewChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = SemanticZoomViewChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs>?) -> SemanticZoomViewChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SliderBridge: ComposableBridge {
        public typealias SwiftProjection = Slider
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider>?) -> Slider? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IRangeBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
            public typealias Class = Slider
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISlider
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IRangeBaseOverrides
    }

    public enum SplitViewBridge: ComposableBridge {
        public typealias SwiftProjection = SplitView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView>?) -> SplitView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = SplitView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum SplitViewPaneClosingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = SplitViewPaneClosingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs>?) -> SplitViewPaneClosingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum StackLayoutBridge: ComposableBridge {
        public typealias SwiftProjection = StackLayout
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout>?) -> StackLayout? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVirtualizingLayoutOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
            public typealias Class = StackLayout
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackLayout
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVirtualizingLayoutOverrides
    }

    public enum StackPanelBridge: ComposableBridge {
        public typealias SwiftProjection = StackPanel
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel>?) -> StackPanel? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = StackPanel
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackPanel
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum StyleSelectorBridge: ComposableBridge {
        public typealias SwiftProjection = StyleSelector
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector>?) -> StyleSelector? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IStyleSelectorOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverrides
            public typealias Class = StyleSelector
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelector
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IStyleSelectorOverrides
    }

    public enum SwapChainPanelBridge: ComposableBridge {
        public typealias SwiftProjection = SwapChainPanel
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel>?) -> SwapChainPanel? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = SwapChainPanel
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanel
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum TeachingTipBridge: ComposableBridge {
        public typealias SwiftProjection = TeachingTip
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip>?) -> TeachingTip? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = TeachingTip
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTip
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum TeachingTipClosedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TeachingTipClosedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs>?) -> TeachingTipClosedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TeachingTipClosingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TeachingTipClosingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs>?) -> TeachingTipClosingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TeachingTipTemplateSettingsBridge: ComposableBridge {
        public typealias SwiftProjection = TeachingTipTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings>?) -> TeachingTipTemplateSettings? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITeachingTipTemplateSettings : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = TeachingTipTemplateSettings
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettings
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITeachingTipTemplateSettings
    }

    public enum TextBlockBridge: AbiBridge {
        public typealias SwiftProjection = TextBlock
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock>?) -> TextBlock? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextBoxBridge: ComposableBridge {
        public typealias SwiftProjection = TextBox
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox>?) -> TextBox? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = TextBox
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBox
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum TextBoxBeforeTextChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextBoxBeforeTextChangingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs>?) -> TextBoxBeforeTextChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextBoxSelectionChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextBoxSelectionChangingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs>?) -> TextBoxSelectionChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextBoxTextChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextBoxTextChangingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs>?) -> TextBoxTextChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs>?) -> TextChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextCompositionChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextCompositionChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs>?) -> TextCompositionChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextCompositionEndedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextCompositionEndedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs>?) -> TextCompositionEndedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextCompositionStartedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextCompositionStartedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs>?) -> TextCompositionStartedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextControlCopyingToClipboardEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextControlCopyingToClipboardEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs>?) -> TextControlCopyingToClipboardEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextControlCuttingToClipboardEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextControlCuttingToClipboardEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs>?) -> TextControlCuttingToClipboardEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TextControlPasteEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TextControlPasteEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs>?) -> TextControlPasteEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TitleBarBridge: ComposableBridge {
        public typealias SwiftProjection = TitleBar
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBar
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBar>?) -> TitleBar? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = TitleBar
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBar
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITitleBar
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum TitleBarTemplateSettingsBridge: ComposableBridge {
        public typealias SwiftProjection = TitleBarTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBarTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBarTemplateSettings>?) -> TitleBarTemplateSettings? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITitleBarTemplateSettings : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = TitleBarTemplateSettings
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITitleBarTemplateSettings
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITitleBarTemplateSettings
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITitleBarTemplateSettings
    }

    public enum ToggleMenuFlyoutItemBridge: ComposableBridge {
        public typealias SwiftProjection = ToggleMenuFlyoutItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem>?) -> ToggleMenuFlyoutItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = ToggleMenuFlyoutItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum ToggleSwitchBridge: AbiBridge {
        public typealias SwiftProjection = ToggleSwitch
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch>?) -> ToggleSwitch? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ToolTipBridge: ComposableBridge {
        public typealias SwiftProjection = ToolTip
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip>?) -> ToolTip? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ToolTip
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToolTip
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum ToolTipServiceBridge: AbiBridge {
        public typealias SwiftProjection = ToolTipService
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService>?) -> ToolTipService? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TreeViewBridge: ComposableBridge {
        public typealias SwiftProjection = TreeView
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView>?) -> TreeView? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = TreeView
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeView
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum TreeViewCollapsedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TreeViewCollapsedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs>?) -> TreeViewCollapsedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TreeViewDragItemsCompletedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TreeViewDragItemsCompletedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs>?) -> TreeViewDragItemsCompletedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TreeViewDragItemsStartingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TreeViewDragItemsStartingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs>?) -> TreeViewDragItemsStartingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TreeViewExpandingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TreeViewExpandingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs>?) -> TreeViewExpandingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TreeViewItemBridge: ComposableBridge {
        public typealias SwiftProjection = TreeViewItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem>?) -> TreeViewItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = TreeViewItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum TreeViewItemInvokedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TreeViewItemInvokedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs>?) -> TreeViewItemInvokedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TreeViewItemTemplateSettingsBridge: ComposableBridge {
        public typealias SwiftProjection = TreeViewItemTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings>?) -> TreeViewItemTemplateSettings? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITreeViewItemTemplateSettings : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = TreeViewItemTemplateSettings
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettings
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITreeViewItemTemplateSettings
    }

    public enum TreeViewListBridge: ComposableBridge {
        public typealias SwiftProjection = TreeViewList
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList>?) -> TreeViewList? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = TreeViewList
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewList
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum TreeViewNodeBridge: ComposableBridge {
        public typealias SwiftProjection = TreeViewNode
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode>?) -> TreeViewNode? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITreeViewNode : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = TreeViewNode
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNode
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITreeViewNode
    }

    public enum TreeViewSelectionChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = TreeViewSelectionChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs>?) -> TreeViewSelectionChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum UIElementCollectionBridge: AbiBridge {
        public typealias SwiftProjection = UIElementCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement>?) -> UIElementCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum UniformGridLayoutBridge: ComposableBridge {
        public typealias SwiftProjection = UniformGridLayout
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout>?) -> UniformGridLayout? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVirtualizingLayoutOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
            public typealias Class = UniformGridLayout
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayout
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVirtualizingLayoutOverrides
    }

    public enum UserControlBridge: ComposableBridge {
        public typealias SwiftProjection = UserControl
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl>?) -> UserControl? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
            public typealias Class = UserControl
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUserControl
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IControlOverrides
    }

    public enum VirtualizingLayoutBridge: ComposableBridge {
        public typealias SwiftProjection = VirtualizingLayout
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout>?) -> VirtualizingLayout? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVirtualizingLayoutOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
            public typealias Class = VirtualizingLayout
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayout
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVirtualizingLayoutOverrides
    }

    public enum VirtualizingLayoutContextBridge: ComposableBridge {
        public typealias SwiftProjection = VirtualizingLayoutContext
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext>?) -> VirtualizingLayoutContext? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVirtualizingLayoutContextOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides
            public typealias Class = VirtualizingLayoutContext
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVirtualizingLayoutContextOverrides
        public enum IVirtualizingLayoutContextOverrides2 : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2
            public typealias Class = VirtualizingLayoutContext
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext
            }
        }
    }

    public enum XamlControlsResourcesBridge: AbiBridge {
        public typealias SwiftProjection = XamlControlsResources
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources>?) -> XamlControlsResources? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class IInsertionPanelMaker: MakeFromAbi {
    public typealias SwiftType = AnyIInsertionPanel
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanel = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls.IInsertionPanelBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IItemContainerMappingMaker: MakeFromAbi {
    public typealias SwiftType = AnyIItemContainerMapping
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls.IItemContainerMappingBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IKeyIndexMappingMaker: MakeFromAbi {
    public typealias SwiftType = AnyIKeyIndexMapping
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMapping = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls.IKeyIndexMappingBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class INavigateMaker: MakeFromAbi {
    public typealias SwiftType = AnyINavigate
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.INavigate = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls.INavigateBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IScrollAnchorProviderMaker: MakeFromAbi {
    public typealias SwiftType = AnyIScrollAnchorProvider
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class ISemanticZoomInformationMaker: MakeFromAbi {
    public typealias SwiftType = AnyISemanticZoomInformation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class AnchorRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = AnchorRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AnchorRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class AppBarMaker: MakeFromAbi {
    public typealias SwiftType = AppBar
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AppBar(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class AutoSuggestBoxMaker: MakeFromAbi {
    public typealias SwiftType = AutoSuggestBox
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AutoSuggestBox(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class AutoSuggestBoxQuerySubmittedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = AutoSuggestBoxQuerySubmittedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AutoSuggestBoxQuerySubmittedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class AutoSuggestBoxSuggestionChosenEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = AutoSuggestBoxSuggestionChosenEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AutoSuggestBoxSuggestionChosenEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class AutoSuggestBoxTextChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = AutoSuggestBoxTextChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AutoSuggestBoxTextChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapIconMaker: MakeFromAbi {
    public typealias SwiftType = BitmapIcon
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapIcon(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BorderMaker: MakeFromAbi {
    public typealias SwiftType = Border
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Border(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ButtonMaker: MakeFromAbi {
    public typealias SwiftType = Button
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Button(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CandidateWindowBoundsChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = CandidateWindowBoundsChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CandidateWindowBoundsChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CanvasMaker: MakeFromAbi {
    public typealias SwiftType = Canvas
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Canvas(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CheckBoxMaker: MakeFromAbi {
    public typealias SwiftType = CheckBox
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CheckBox(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ChoosingGroupHeaderContainerEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ChoosingGroupHeaderContainerEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ChoosingGroupHeaderContainerEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ChoosingItemContainerEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ChoosingItemContainerEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ChoosingItemContainerEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColumnDefinitionMaker: MakeFromAbi {
    public typealias SwiftType = ColumnDefinition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColumnDefinition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColumnDefinitionCollectionMaker: MakeFromAbi {
    public typealias SwiftType = ColumnDefinitionCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColumnDefinitionCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ComboBoxMaker: MakeFromAbi {
    public typealias SwiftType = ComboBox
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ComboBox(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ComboBoxTextSubmittedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ComboBoxTextSubmittedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ComboBoxTextSubmittedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContainerContentChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ContainerContentChangingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContainerContentChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentControlMaker: MakeFromAbi {
    public typealias SwiftType = ContentControl
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentControl(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialog
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialog(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogButtonClickDeferralMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialogButtonClickDeferral
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialogButtonClickDeferral(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogButtonClickEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialogButtonClickEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialogButtonClickEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogClosedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialogClosedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialogClosedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogClosingDeferralMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialogClosingDeferral
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialogClosingDeferral(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialogClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialogClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentDialogOpenedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ContentDialogOpenedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentDialogOpenedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContentPresenterMaker: MakeFromAbi {
    public typealias SwiftType = ContentPresenter
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContentPresenter(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContextMenuEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ContextMenuEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContextMenuEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ControlMaker: MakeFromAbi {
    public typealias SwiftType = Control
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Control(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ControlTemplateMaker: MakeFromAbi {
    public typealias SwiftType = ControlTemplate
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ControlTemplate(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DataTemplateSelectorMaker: MakeFromAbi {
    public typealias SwiftType = DataTemplateSelector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DataTemplateSelector(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragItemsCompletedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DragItemsCompletedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragItemsCompletedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragItemsStartingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DragItemsStartingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragItemsStartingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlipViewMaker: MakeFromAbi {
    public typealias SwiftType = FlipView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FlipView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlipViewItemMaker: MakeFromAbi {
    public typealias SwiftType = FlipViewItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FlipViewItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlyoutMaker: MakeFromAbi {
    public typealias SwiftType = Flyout
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Flyout(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlyoutPresenterMaker: MakeFromAbi {
    public typealias SwiftType = FlyoutPresenter
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FlyoutPresenter(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FocusDisengagedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = FocusDisengagedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FocusDisengagedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FocusEngagedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = FocusEngagedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FocusEngagedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FontIconMaker: MakeFromAbi {
    public typealias SwiftType = FontIcon
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FontIcon(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FontIconSourceMaker: MakeFromAbi {
    public typealias SwiftType = FontIconSource
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FontIconSource(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FrameMaker: MakeFromAbi {
    public typealias SwiftType = Frame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Frame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GridMaker: MakeFromAbi {
    public typealias SwiftType = Grid
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Grid(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GridViewMaker: MakeFromAbi {
    public typealias SwiftType = GridView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GridView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GridViewItemMaker: MakeFromAbi {
    public typealias SwiftType = GridViewItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GridViewItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GroupStyleMaker: MakeFromAbi {
    public typealias SwiftType = GroupStyle
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GroupStyle(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GroupStyleSelectorMaker: MakeFromAbi {
    public typealias SwiftType = GroupStyleSelector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GroupStyleSelector(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class HyperlinkButtonMaker: MakeFromAbi {
    public typealias SwiftType = HyperlinkButton
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return HyperlinkButton(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class IconElementMaker: MakeFromAbi {
    public typealias SwiftType = IconElement
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return IconElement(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class IconSourceMaker: MakeFromAbi {
    public typealias SwiftType = IconSource
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return IconSource(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class IconSourceElementMaker: MakeFromAbi {
    public typealias SwiftType = IconSourceElement
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return IconSourceElement(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ImageMaker: MakeFromAbi {
    public typealias SwiftType = Image
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Image(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ImageIconMaker: MakeFromAbi {
    public typealias SwiftType = ImageIcon
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ImageIcon(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InfoBadgeMaker: MakeFromAbi {
    public typealias SwiftType = InfoBadge
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InfoBadge(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InfoBadgeTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = InfoBadgeTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InfoBadgeTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InfoBarMaker: MakeFromAbi {
    public typealias SwiftType = InfoBar
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InfoBar(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InfoBarClosedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = InfoBarClosedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InfoBarClosedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InfoBarClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = InfoBarClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InfoBarClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InfoBarTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = InfoBarTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InfoBarTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class IsTextTrimmedChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = IsTextTrimmedChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return IsTextTrimmedChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemClickEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ItemClickEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemClickEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemCollectionMaker: MakeFromAbi {
    public typealias SwiftType = ItemCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemCollectionTransitionMaker: MakeFromAbi {
    public typealias SwiftType = ItemCollectionTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemCollectionTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemCollectionTransitionCompletedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ItemCollectionTransitionCompletedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemCollectionTransitionCompletedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemCollectionTransitionProgressMaker: MakeFromAbi {
    public typealias SwiftType = ItemCollectionTransitionProgress
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemCollectionTransitionProgress(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemCollectionTransitionProviderMaker: MakeFromAbi {
    public typealias SwiftType = ItemCollectionTransitionProvider
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemCollectionTransitionProvider(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemContainerGeneratorMaker: MakeFromAbi {
    public typealias SwiftType = ItemContainerGenerator
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemContainerGenerator(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsControlMaker: MakeFromAbi {
    public typealias SwiftType = ItemsControl
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsControl(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsPanelTemplateMaker: MakeFromAbi {
    public typealias SwiftType = ItemsPanelTemplate
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsPanelTemplate(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsRepeaterMaker: MakeFromAbi {
    public typealias SwiftType = ItemsRepeater
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsRepeater(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsRepeaterElementClearingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ItemsRepeaterElementClearingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsRepeaterElementClearingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsRepeaterElementIndexChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ItemsRepeaterElementIndexChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsRepeaterElementIndexChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsRepeaterElementPreparedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ItemsRepeaterElementPreparedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsRepeaterElementPreparedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsSourceViewMaker: MakeFromAbi {
    public typealias SwiftType = ItemsSourceView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsSourceView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsWrapGridMaker: MakeFromAbi {
    public typealias SwiftType = ItemsWrapGrid
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsWrapGrid(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LayoutMaker: MakeFromAbi {
    public typealias SwiftType = Layout
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Layout(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LayoutContextMaker: MakeFromAbi {
    public typealias SwiftType = LayoutContext
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LayoutContext(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListBoxMaker: MakeFromAbi {
    public typealias SwiftType = ListBox
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListBox(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListBoxItemMaker: MakeFromAbi {
    public typealias SwiftType = ListBoxItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListBoxItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListViewMaker: MakeFromAbi {
    public typealias SwiftType = ListView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListViewBaseMaker: MakeFromAbi {
    public typealias SwiftType = ListViewBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListViewBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListViewBaseHeaderItemMaker: MakeFromAbi {
    public typealias SwiftType = ListViewBaseHeaderItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListViewBaseHeaderItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListViewItemMaker: MakeFromAbi {
    public typealias SwiftType = ListViewItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListViewItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MediaPlayerElementMaker: MakeFromAbi {
    public typealias SwiftType = MediaPlayerElement
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MediaPlayerElement(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MediaTransportControlsMaker: MakeFromAbi {
    public typealias SwiftType = MediaTransportControls
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MediaTransportControls(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuBarMaker: MakeFromAbi {
    public typealias SwiftType = MenuBar
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuBar(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuBarItemMaker: MakeFromAbi {
    public typealias SwiftType = MenuBarItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuBarItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuFlyoutMaker: MakeFromAbi {
    public typealias SwiftType = MenuFlyout
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuFlyout(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuFlyoutItemMaker: MakeFromAbi {
    public typealias SwiftType = MenuFlyoutItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuFlyoutItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuFlyoutItemBaseMaker: MakeFromAbi {
    public typealias SwiftType = MenuFlyoutItemBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuFlyoutItemBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuFlyoutSeparatorMaker: MakeFromAbi {
    public typealias SwiftType = MenuFlyoutSeparator
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuFlyoutSeparator(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuFlyoutSubItemMaker: MakeFromAbi {
    public typealias SwiftType = MenuFlyoutSubItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuFlyoutSubItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewMaker: MakeFromAbi {
    public typealias SwiftType = NavigationView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewBackRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewBackRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewBackRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewDisplayModeChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewDisplayModeChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewDisplayModeChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewItemMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewItemBaseMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewItemBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewItemBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewItemCollapsedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewItemCollapsedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewItemCollapsedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewItemExpandingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewItemExpandingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewItemExpandingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewItemInvokedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewItemInvokedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewItemInvokedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewPaneClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewPaneClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewPaneClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewSelectionChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewSelectionChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewSelectionChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class NavigationViewTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = NavigationViewTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return NavigationViewTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PageMaker: MakeFromAbi {
    public typealias SwiftType = Page
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Page(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PanelMaker: MakeFromAbi {
    public typealias SwiftType = Panel
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Panel(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PasswordBoxMaker: MakeFromAbi {
    public typealias SwiftType = PasswordBox
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PasswordBox(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PasswordBoxPasswordChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = PasswordBoxPasswordChangingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PasswordBoxPasswordChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PipsPagerMaker: MakeFromAbi {
    public typealias SwiftType = PipsPager
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PipsPager(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PipsPagerSelectedIndexChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = PipsPagerSelectedIndexChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PipsPagerSelectedIndexChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PipsPagerTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = PipsPagerTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PipsPagerTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ProgressBarMaker: MakeFromAbi {
    public typealias SwiftType = ProgressBar
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ProgressBar(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ProgressBarTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = ProgressBarTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ProgressBarTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ProgressRingMaker: MakeFromAbi {
    public typealias SwiftType = ProgressRing
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ProgressRing(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ProgressRingTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = ProgressRingTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ProgressRingTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RadioButtonMaker: MakeFromAbi {
    public typealias SwiftType = RadioButton
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RadioButton(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RadioButtonsMaker: MakeFromAbi {
    public typealias SwiftType = RadioButtons
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RadioButtons(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RefreshContainerMaker: MakeFromAbi {
    public typealias SwiftType = RefreshContainer
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RefreshContainer(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RefreshRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = RefreshRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RefreshRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RefreshStateChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = RefreshStateChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RefreshStateChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RefreshVisualizerMaker: MakeFromAbi {
    public typealias SwiftType = RefreshVisualizer
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RefreshVisualizer(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RelativePanelMaker: MakeFromAbi {
    public typealias SwiftType = RelativePanel
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RelativePanel(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RowDefinitionMaker: MakeFromAbi {
    public typealias SwiftType = RowDefinition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RowDefinition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RowDefinitionCollectionMaker: MakeFromAbi {
    public typealias SwiftType = RowDefinitionCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RowDefinitionCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollViewMaker: MakeFromAbi {
    public typealias SwiftType = ScrollView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollViewerMaker: MakeFromAbi {
    public typealias SwiftType = ScrollViewer
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollViewer(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollViewerViewMaker: MakeFromAbi {
    public typealias SwiftType = ScrollViewerView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollViewerView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollViewerViewChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollViewerViewChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollViewerViewChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollViewerViewChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollViewerViewChangingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollViewerViewChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingAnchorRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingAnchorRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingAnchorRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingBringingIntoViewEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingBringingIntoViewEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingBringingIntoViewEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingScrollAnimationStartingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingScrollAnimationStartingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingScrollAnimationStartingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingScrollCompletedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingScrollCompletedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingScrollCompletedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingScrollOptionsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingScrollOptions
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingScrollOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingZoomAnimationStartingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingZoomAnimationStartingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingZoomAnimationStartingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingZoomCompletedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingZoomCompletedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingZoomCompletedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollingZoomOptionsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollingZoomOptions
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollingZoomOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SelectionChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = SelectionChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SelectionChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SemanticZoomMaker: MakeFromAbi {
    public typealias SwiftType = SemanticZoom
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SemanticZoom(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SemanticZoomLocationMaker: MakeFromAbi {
    public typealias SwiftType = SemanticZoomLocation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SemanticZoomLocation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SemanticZoomViewChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = SemanticZoomViewChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SemanticZoomViewChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SliderMaker: MakeFromAbi {
    public typealias SwiftType = Slider
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Slider(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplitViewMaker: MakeFromAbi {
    public typealias SwiftType = SplitView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplitView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplitViewPaneClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = SplitViewPaneClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplitViewPaneClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class StackLayoutMaker: MakeFromAbi {
    public typealias SwiftType = StackLayout
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return StackLayout(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class StackPanelMaker: MakeFromAbi {
    public typealias SwiftType = StackPanel
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return StackPanel(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class StyleSelectorMaker: MakeFromAbi {
    public typealias SwiftType = StyleSelector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return StyleSelector(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SwapChainPanelMaker: MakeFromAbi {
    public typealias SwiftType = SwapChainPanel
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SwapChainPanel(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TeachingTipMaker: MakeFromAbi {
    public typealias SwiftType = TeachingTip
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TeachingTip(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TeachingTipClosedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TeachingTipClosedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TeachingTipClosedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TeachingTipClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TeachingTipClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TeachingTipClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TeachingTipTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = TeachingTipTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TeachingTipTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextBlockMaker: MakeFromAbi {
    public typealias SwiftType = TextBlock
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextBlock(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextBoxMaker: MakeFromAbi {
    public typealias SwiftType = TextBox
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextBox(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextBoxBeforeTextChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextBoxBeforeTextChangingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextBoxBeforeTextChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextBoxSelectionChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextBoxSelectionChangingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextBoxSelectionChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextBoxTextChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextBoxTextChangingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextBoxTextChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextCompositionChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextCompositionChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextCompositionChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextCompositionEndedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextCompositionEndedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextCompositionEndedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextCompositionStartedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextCompositionStartedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextCompositionStartedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextControlCopyingToClipboardEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextControlCopyingToClipboardEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextControlCopyingToClipboardEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextControlCuttingToClipboardEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextControlCuttingToClipboardEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextControlCuttingToClipboardEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TextControlPasteEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TextControlPasteEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TextControlPasteEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TitleBarMaker: MakeFromAbi {
    public typealias SwiftType = TitleBar
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TitleBar(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TitleBarTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = TitleBarTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TitleBarTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToggleMenuFlyoutItemMaker: MakeFromAbi {
    public typealias SwiftType = ToggleMenuFlyoutItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToggleMenuFlyoutItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToggleSwitchMaker: MakeFromAbi {
    public typealias SwiftType = ToggleSwitch
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToggleSwitch(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToolTipMaker: MakeFromAbi {
    public typealias SwiftType = ToolTip
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToolTip(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToolTipServiceMaker: MakeFromAbi {
    public typealias SwiftType = ToolTipService
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToolTipService(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewMaker: MakeFromAbi {
    public typealias SwiftType = TreeView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewCollapsedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewCollapsedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewCollapsedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewDragItemsCompletedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewDragItemsCompletedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewDragItemsCompletedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewDragItemsStartingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewDragItemsStartingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewDragItemsStartingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewExpandingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewExpandingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewExpandingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewItemMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewItemInvokedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewItemInvokedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewItemInvokedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewItemTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewItemTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewItemTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewListMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewList
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewList(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewNodeMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewNode
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewNode(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TreeViewSelectionChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = TreeViewSelectionChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TreeViewSelectionChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UIElementCollectionMaker: MakeFromAbi {
    public typealias SwiftType = UIElementCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UIElementCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UniformGridLayoutMaker: MakeFromAbi {
    public typealias SwiftType = UniformGridLayout
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UniformGridLayout(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UserControlMaker: MakeFromAbi {
    public typealias SwiftType = UserControl
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UserControl(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class VirtualizingLayoutMaker: MakeFromAbi {
    public typealias SwiftType = VirtualizingLayout
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return VirtualizingLayout(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class VirtualizingLayoutContextMaker: MakeFromAbi {
    public typealias SwiftType = VirtualizingLayoutContext
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return VirtualizingLayoutContext(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class XamlControlsResourcesMaker: MakeFromAbi {
    public typealias SwiftType = XamlControlsResources
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return XamlControlsResources(fromAbi: abi)
    }
}
