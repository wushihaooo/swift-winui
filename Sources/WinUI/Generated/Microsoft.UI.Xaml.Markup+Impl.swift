// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml_Markup {
    public enum IComponentConnectorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Markup.IComponentConnector
        public typealias SwiftProjection = AnyIComponentConnector
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IComponentConnectorImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IComponentConnectorImpl: IComponentConnector, WinRTAbiImpl {
        fileprivate typealias Bridge = IComponentConnectorBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.icomponentconnector.connect)
        fileprivate func connect(_ connectionId: Int32, _ target: Any!) throws {
            try _default.Connect(connectionId, target)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.icomponentconnector.getbindingconnector)
        fileprivate func getBindingConnector(_ connectionId: Int32, _ target: Any!) throws -> AnyIComponentConnector! {
            try _default.GetBindingConnector(connectionId, target)
        }

    }

    public enum IDataTemplateComponentBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponent
        public typealias SwiftProjection = AnyIDataTemplateComponent
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IDataTemplateComponentImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponentVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IDataTemplateComponentImpl: IDataTemplateComponent, WinRTAbiImpl {
        fileprivate typealias Bridge = IDataTemplateComponentBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.idatatemplatecomponent.recycle)
        fileprivate func recycle() throws {
            try _default.Recycle()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.idatatemplatecomponent.processbindings)
        fileprivate func processBindings(_ item: Any!, _ itemIndex: Int32, _ phase: Int32, _ nextPhase: inout Int32) throws {
            try _default.ProcessBindings(item, itemIndex, phase, &nextPhase)
        }

    }

    public enum IXamlMemberBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Markup.IXamlMember
        public typealias SwiftProjection = AnyIXamlMember
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXamlMemberImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Markup.IXamlMemberVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXamlMemberImpl: IXamlMember, WinRTAbiImpl {
        fileprivate typealias Bridge = IXamlMemberBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.getvalue)
        fileprivate func getValue(_ instance: Any!) throws -> Any! {
            try _default.GetValue(instance)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.setvalue)
        fileprivate func setValue(_ instance: Any!, _ value: Any!) throws {
            try _default.SetValue(instance, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.isattachable)
        fileprivate var isAttachable : Bool {
            get { try! _default.get_IsAttachable() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.isdependencyproperty)
        fileprivate var isDependencyProperty : Bool {
            get { try! _default.get_IsDependencyProperty() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.isreadonly)
        fileprivate var isReadOnly : Bool {
            get { try! _default.get_IsReadOnly() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.name)
        fileprivate var name : String {
            get { try! _default.get_Name() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.targettype)
        fileprivate var targetType : AnyIXamlType! {
            get { try! _default.get_TargetType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmember.type)
        fileprivate var type : AnyIXamlType! {
            get { try! _default.get_Type() }
        }

    }

    public enum IXamlMetadataProviderBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Markup.IXamlMetadataProvider
        public typealias SwiftProjection = AnyIXamlMetadataProvider
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXamlMetadataProviderImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXamlMetadataProviderImpl: IXamlMetadataProvider, WinRTAbiImpl {
        fileprivate typealias Bridge = IXamlMetadataProviderBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmetadataprovider.getxamltype)
        fileprivate func getXamlType(_ type: WinUI.TypeName) throws -> AnyIXamlType! {
            try _default.GetXamlType(type)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmetadataprovider.getxamltype)
        fileprivate func getXamlType(_ fullName: String) throws -> AnyIXamlType! {
            try _default.GetXamlTypeByFullName(fullName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamlmetadataprovider.getxmlnsdefinitions)
        fileprivate func getXmlnsDefinitions() throws -> [XmlnsDefinition] {
            try _default.GetXmlnsDefinitions()
        }

    }

    public enum IXamlTypeBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Markup.IXamlType
        public typealias SwiftProjection = AnyIXamlType
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXamlTypeImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Markup.IXamlTypeVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXamlTypeImpl: IXamlType, WinRTAbiImpl {
        fileprivate typealias Bridge = IXamlTypeBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.activateinstance)
        fileprivate func activateInstance() throws -> Any! {
            try _default.ActivateInstance()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.createfromstring)
        fileprivate func createFromString(_ value: String) throws -> Any! {
            try _default.CreateFromString(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.getmember)
        fileprivate func getMember(_ name: String) throws -> AnyIXamlMember! {
            try _default.GetMember(name)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.addtovector)
        fileprivate func addToVector(_ instance: Any!, _ value: Any!) throws {
            try _default.AddToVector(instance, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.addtomap)
        fileprivate func addToMap(_ instance: Any!, _ key: Any!, _ value: Any!) throws {
            try _default.AddToMap(instance, key, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.runinitializer)
        fileprivate func runInitializer() throws {
            try _default.RunInitializer()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.basetype)
        fileprivate var baseType : AnyIXamlType! {
            get { try! _default.get_BaseType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.boxedtype)
        fileprivate var boxedType : AnyIXamlType! {
            get { try! _default.get_BoxedType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.contentproperty)
        fileprivate var contentProperty : AnyIXamlMember! {
            get { try! _default.get_ContentProperty() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.fullname)
        fileprivate var fullName : String {
            get { try! _default.get_FullName() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.isarray)
        fileprivate var isArray : Bool {
            get { try! _default.get_IsArray() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.isbindable)
        fileprivate var isBindable : Bool {
            get { try! _default.get_IsBindable() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.iscollection)
        fileprivate var isCollection : Bool {
            get { try! _default.get_IsCollection() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.isconstructible)
        fileprivate var isConstructible : Bool {
            get { try! _default.get_IsConstructible() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.isdictionary)
        fileprivate var isDictionary : Bool {
            get { try! _default.get_IsDictionary() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.ismarkupextension)
        fileprivate var isMarkupExtension : Bool {
            get { try! _default.get_IsMarkupExtension() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.itemtype)
        fileprivate var itemType : AnyIXamlType! {
            get { try! _default.get_ItemType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.keytype)
        fileprivate var keyType : AnyIXamlType! {
            get { try! _default.get_KeyType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.markup.ixamltype.underlyingtype)
        fileprivate var underlyingType : WinUI.TypeName {
            get { try! _default.get_UnderlyingType() }
        }

    }

    public enum XamlBindingHelperBridge: AbiBridge {
        public typealias SwiftProjection = XamlBindingHelper
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelper
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelper>?) -> XamlBindingHelper? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum XamlReaderBridge: AbiBridge {
        public typealias SwiftProjection = XamlReader
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReader
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReader>?) -> XamlReader? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension XmlnsDefinition: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition
    public static func from(abi: ABI) -> Self {
        .init(xmlNamespace: .init(from: abi.XmlNamespace), namespace: .init(from: abi.Namespace))
    }
    public func toABI() -> ABI {
        __ABI_Microsoft_UI_Xaml_Markup._ABI_XmlnsDefinition(from: self).detach()
    }
}

@_spi(WinRTInternal)
public class IComponentConnectorMaker: MakeFromAbi {
    public typealias SwiftType = AnyIComponentConnector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IComponentConnector = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Markup.IComponentConnectorBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IDataTemplateComponentMaker: MakeFromAbi {
    public typealias SwiftType = AnyIDataTemplateComponent
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponent = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Markup.IDataTemplateComponentBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IXamlMemberMaker: MakeFromAbi {
    public typealias SwiftType = AnyIXamlMember
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IXamlMember = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Markup.IXamlMemberBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IXamlMetadataProviderMaker: MakeFromAbi {
    public typealias SwiftType = AnyIXamlMetadataProvider
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IXamlMetadataProvider = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IXamlTypeMaker: MakeFromAbi {
    public typealias SwiftType = AnyIXamlType
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IXamlType = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Markup.IXamlTypeBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class XamlBindingHelperMaker: MakeFromAbi {
    public typealias SwiftType = XamlBindingHelper
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return XamlBindingHelper(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class XamlReaderMaker: MakeFromAbi {
    public typealias SwiftType = XamlReader
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return XamlReader(fromAbi: abi)
    }
}
