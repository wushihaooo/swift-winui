// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationcachemode)
public typealias NavigationCacheMode = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationCacheMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationmode)
public typealias NavigationMode = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.framenavigationoptions)
open class FrameNavigationOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Navigation.IFrameNavigationOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CIFrameNavigationOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFrameNavigationOptionsFactory : __ABI_Microsoft_UI_Xaml_Navigation.IFrameNavigationOptionsFactory =  try! RoGetActivationFactory("Microsoft.UI.Xaml.Navigation.FrameNavigationOptions")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_Microsoft_UI_Xaml_Navigation.FrameNavigationOptionsBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IFrameNavigationOptionsFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.framenavigationoptions.isnavigationstackenabled)
    public var isNavigationStackEnabled : Bool {
        get { try! _default.get_IsNavigationStackEnabled() }
        set { try! _default.put_IsNavigationStackEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.framenavigationoptions.transitioninfooverride)
    public var transitionInfoOverride : WinUI.NavigationTransitionInfo! {
        get { try! _default.get_TransitionInfoOverride() }
        set { try! _default.put_TransitionInfoOverride(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigatingcanceleventargs)
public final class NavigatingCancelEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Navigation.INavigatingCancelEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CINavigatingCancelEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigatingcanceleventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigatingcanceleventargs.navigationmode)
    public var navigationMode : NavigationMode {
        get { try! _default.get_NavigationMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigatingcanceleventargs.navigationtransitioninfo)
    public var navigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _default.get_NavigationTransitionInfo() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigatingcanceleventargs.parameter)
    public var parameter : Any! {
        get { try! _default.get_Parameter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigatingcanceleventargs.sourcepagetype)
    public var sourcePageType : WinUI.TypeName {
        get { try! _default.get_SourcePageType() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs)
public final class NavigationEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Navigation.INavigationEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CINavigationEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs.content)
    public var content : Any! {
        get { try! _default.get_Content() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs.navigationmode)
    public var navigationMode : NavigationMode {
        get { try! _default.get_NavigationMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs.navigationtransitioninfo)
    public var navigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _default.get_NavigationTransitionInfo() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs.parameter)
    public var parameter : Any! {
        get { try! _default.get_Parameter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs.sourcepagetype)
    public var sourcePageType : WinUI.TypeName {
        get { try! _default.get_SourcePageType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationeventargs.uri)
    public var uri : WindowsFoundation.Uri! {
        get { try! _default.get_Uri() }
        set { try! _default.put_Uri(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationfailedeventargs)
public final class NavigationFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Navigation.INavigationFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CINavigationFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationfailedeventargs.exception)
    public var exception : HRESULT {
        get { try! _default.get_Exception() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationfailedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.navigationfailedeventargs.sourcepagetype)
    public var sourcePageType : WinUI.TypeName {
        get { try! _default.get_SourcePageType() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.pagestackentry)
public final class PageStackEntry : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Navigation.IPageStackEntry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CIPageStackEntry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IPageStackEntryFactory: __ABI_Microsoft_UI_Xaml_Navigation.IPageStackEntryFactory = try! RoGetActivationFactory("Microsoft.UI.Xaml.Navigation.PageStackEntry")
    public init(_ sourcePageType: WinUI.TypeName, _ parameter: Any!, _ navigationTransitionInfo: WinUI.NavigationTransitionInfo!) {
        super.init(fromAbi: try! Self._IPageStackEntryFactory.CreateInstance(sourcePageType, parameter, navigationTransitionInfo))
    }

    private static let _IPageStackEntryStatics: __ABI_Microsoft_UI_Xaml_Navigation.IPageStackEntryStatics = try! RoGetActivationFactory("Microsoft.UI.Xaml.Navigation.PageStackEntry")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.pagestackentry.sourcepagetypeproperty)
    public static var sourcePageTypeProperty : WinUI.DependencyProperty! {
        get { try! _IPageStackEntryStatics.get_SourcePageTypeProperty() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.pagestackentry.navigationtransitioninfo)
    public var navigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _default.get_NavigationTransitionInfo() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.pagestackentry.parameter)
    public var parameter : Any! {
        get { try! _default.get_Parameter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.navigation.pagestackentry.sourcepagetype)
    public var sourcePageType : WinUI.TypeName {
        get { try! _default.get_SourcePageType() }
    }

    deinit {
        _default = nil
    }
}

public typealias NavigatedEventHandler = (Any?, NavigationEventArgs?) throws -> ()
public typealias NavigatingCancelEventHandler = (Any?, NavigatingCancelEventArgs?) throws -> ()
public typealias NavigationFailedEventHandler = (Any?, NavigationFailedEventArgs?) throws -> ()
public typealias NavigationStoppedEventHandler = (Any?, NavigationEventArgs?) throws -> ()
extension WinUI.NavigationCacheMode {
    public static var disabled : WinUI.NavigationCacheMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationCacheMode_Disabled
    }
    public static var required : WinUI.NavigationCacheMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationCacheMode_Required
    }
    public static var enabled : WinUI.NavigationCacheMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationCacheMode_Enabled
    }
}
extension WinUI.NavigationCacheMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinUI.NavigationMode {
    public static var new : WinUI.NavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationMode_New
    }
    public static var back : WinUI.NavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationMode_Back
    }
    public static var forward : WinUI.NavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationMode_Forward
    }
    public static var refresh : WinUI.NavigationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationMode_Refresh
    }
}
extension WinUI.NavigationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

