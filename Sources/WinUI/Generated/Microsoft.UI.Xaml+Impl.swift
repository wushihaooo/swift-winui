// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml {
    public enum IDataTemplateExtensionBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplateExtension
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDataTemplateExtension
        public typealias SwiftProjection = AnyIDataTemplateExtension
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IDataTemplateExtensionImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml.IDataTemplateExtensionVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IDataTemplateExtensionImpl: IDataTemplateExtension, WinRTAbiImpl {
        fileprivate typealias Bridge = IDataTemplateExtensionBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.resettemplate)
        fileprivate func resetTemplate() throws {
            try _default.ResetTemplate()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.processbinding)
        fileprivate func processBinding(_ phase: UInt32) throws -> Bool {
            try _default.ProcessBinding(phase)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.processbindings)
        fileprivate func processBindings(_ arg: WinUI.ContainerContentChangingEventArgs!) throws -> Int32 {
            try _default.ProcessBindings(arg)
        }

    }

    public enum IElementFactoryBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactory
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IElementFactory
        public typealias SwiftProjection = AnyIElementFactory
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IElementFactoryImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml.IElementFactoryVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IElementFactoryImpl: IElementFactory, WinRTAbiImpl {
        fileprivate typealias Bridge = IElementFactoryBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory.getelement)
        fileprivate func getElement(_ args: ElementFactoryGetArgs!) throws -> UIElement! {
            try _default.GetElement(args)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory.recycleelement)
        fileprivate func recycleElement(_ args: ElementFactoryRecycleArgs!) throws {
            try _default.RecycleElement(args)
        }

    }

    public class ApplicationInitializationCallbackBridge : WinRTDelegateBridge {
        public typealias Handler = ApplicationInitializationCallback
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ApplicationInitializationCallback

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (p) in
                try _default.Invoke(p)
            }
            return handler
        }
    }
    public class BindingFailedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = BindingFailedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBindingFailedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.BindingFailedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class CreateDefaultValueCallbackBridge : WinRTDelegateBridge {
        public typealias Handler = CreateDefaultValueCallback
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CICreateDefaultValueCallback
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.CreateDefaultValueCallback

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try _default.Invoke()
            }
            return handler
        }
    }
    public class DependencyPropertyChangedCallbackBridge : WinRTDelegateBridge {
        public typealias Handler = DependencyPropertyChangedCallback
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.DependencyPropertyChangedCallback

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, dp) in
                try _default.Invoke(sender, dp)
            }
            return handler
        }
    }
    public class DependencyPropertyChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DependencyPropertyChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.DependencyPropertyChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class DragEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DragEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.DragEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class ExceptionRoutedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ExceptionRoutedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ExceptionRoutedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class PropertyChangedCallbackBridge : WinRTDelegateBridge {
        public typealias Handler = PropertyChangedCallback
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyChangedCallback
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.PropertyChangedCallback

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (d, e) in
                try _default.Invoke(d, e)
            }
            return handler
        }
    }
    public class RoutedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = RoutedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.RoutedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class SizeChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = SizeChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.SizeChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class UnhandledExceptionEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = UnhandledExceptionEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.UnhandledExceptionEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public enum ApplicationBridge: ComposableBridge {
        public typealias SwiftProjection = Application
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplication
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIApplication>?) -> Application? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IApplicationOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplicationOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IApplicationOverrides
            public typealias Class = Application
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplication
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IApplication
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IApplicationOverrides
    }

    public enum ApplicationInitializationCallbackParamsBridge: AbiBridge {
        public typealias SwiftProjection = ApplicationInitializationCallbackParams
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams>?) -> ApplicationInitializationCallbackParams? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BindingFailedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = BindingFailedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBindingFailedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBindingFailedEventArgs>?) -> BindingFailedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BringIntoViewOptionsBridge: AbiBridge {
        public typealias SwiftProjection = BringIntoViewOptions
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions>?) -> BringIntoViewOptions? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BringIntoViewRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = BringIntoViewRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs>?) -> BringIntoViewRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BrushTransitionBridge: ComposableBridge {
        public typealias SwiftProjection = BrushTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition>?) -> BrushTransition? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBrushTransition : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = BrushTransition
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IBrushTransition
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBrushTransition
    }

    public enum DataContextChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DataContextChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs>?) -> DataContextChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DataTemplateBridge: ComposableBridge {
        public typealias SwiftProjection = DataTemplate
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate>?) -> DataTemplate? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IDataTemplate : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = DataTemplate
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDataTemplate
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IDataTemplate
    }

    public enum DebugSettingsBridge: AbiBridge {
        public typealias SwiftProjection = DebugSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDebugSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDebugSettings>?) -> DebugSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DependencyObjectBridge: ComposableBridge {
        public typealias SwiftProjection = DependencyObject
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject>?) -> DependencyObject? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IDependencyObject : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = DependencyObject
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IDependencyObject
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IDependencyObject
    }

    public enum DependencyPropertyBridge: AbiBridge {
        public typealias SwiftProjection = DependencyProperty
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyProperty
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDependencyProperty>?) -> DependencyProperty? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DependencyPropertyChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DependencyPropertyChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs>?) -> DependencyPropertyChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DragEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragEventArgs>?) -> DragEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragOperationDeferralBridge: AbiBridge {
        public typealias SwiftProjection = DragOperationDeferral
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragOperationDeferral
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragOperationDeferral>?) -> DragOperationDeferral? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragStartingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DragStartingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs>?) -> DragStartingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragUIBridge: AbiBridge {
        public typealias SwiftProjection = DragUI
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragUI
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragUI>?) -> DragUI? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DragUIOverrideBridge: AbiBridge {
        public typealias SwiftProjection = DragUIOverride
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragUIOverride
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragUIOverride>?) -> DragUIOverride? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DropCompletedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DropCompletedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs>?) -> DropCompletedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EffectiveViewportChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = EffectiveViewportChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs>?) -> EffectiveViewportChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ElementFactoryGetArgsBridge: ComposableBridge {
        public typealias SwiftProjection = ElementFactoryGetArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs>?) -> ElementFactoryGetArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IElementFactoryGetArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ElementFactoryGetArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IElementFactoryGetArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IElementFactoryGetArgs
    }

    public enum ElementFactoryRecycleArgsBridge: ComposableBridge {
        public typealias SwiftProjection = ElementFactoryRecycleArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs>?) -> ElementFactoryRecycleArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IElementFactoryRecycleArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ElementFactoryRecycleArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IElementFactoryRecycleArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IElementFactoryRecycleArgs
    }

    public enum ExceptionRoutedEventArgsBridge: ComposableBridge {
        public typealias SwiftProjection = ExceptionRoutedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs>?) -> ExceptionRoutedEventArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IExceptionRoutedEventArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ExceptionRoutedEventArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IExceptionRoutedEventArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IExceptionRoutedEventArgs
    }

    public enum FrameworkElementBridge: ComposableBridge {
        public typealias SwiftProjection = FrameworkElement
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement>?) -> FrameworkElement? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = FrameworkElement
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElement
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum FrameworkTemplateBridge: ComposableBridge {
        public typealias SwiftProjection = FrameworkTemplate
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate>?) -> FrameworkTemplate? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkTemplate : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = FrameworkTemplate
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkTemplate
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkTemplate
    }

    public enum LaunchActivatedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = LaunchActivatedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs>?) -> LaunchActivatedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PropertyMetadataBridge: ComposableBridge {
        public typealias SwiftProjection = PropertyMetadata
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata>?) -> PropertyMetadata? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IPropertyMetadata : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = PropertyMetadata
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IPropertyMetadata
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IPropertyMetadata
    }

    public enum PropertyPathBridge: AbiBridge {
        public typealias SwiftProjection = PropertyPath
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyPath
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIPropertyPath>?) -> PropertyPath? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ResourceDictionaryBridge: ComposableBridge {
        public typealias SwiftProjection = ResourceDictionary
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary>?) -> ResourceDictionary? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IResourceDictionary : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ResourceDictionary
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IResourceDictionary
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IResourceDictionary
    }

    public enum ResourceManagerRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ResourceManagerRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceManagerRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIResourceManagerRequestedEventArgs>?) -> ResourceManagerRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RoutedEventBridge: AbiBridge {
        public typealias SwiftProjection = RoutedEvent
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEvent
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEvent>?) -> RoutedEvent? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RoutedEventArgsBridge: ComposableBridge {
        public typealias SwiftProjection = RoutedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>?) -> RoutedEventArgs? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IRoutedEventArgs : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = RoutedEventArgs
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IRoutedEventArgs
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IRoutedEventArgs
    }

    public enum ScalarTransitionBridge: ComposableBridge {
        public typealias SwiftProjection = ScalarTransition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition>?) -> ScalarTransition? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IScalarTransition : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ScalarTransition
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IScalarTransition
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IScalarTransition
    }

    public enum SetterBridge: AbiBridge {
        public typealias SwiftProjection = Setter
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetter
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISetter>?) -> Setter? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SetterBaseBridge: ComposableBridge {
        public typealias SwiftProjection = SetterBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISetterBase>?) -> SetterBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ISetterBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = SetterBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ISetterBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ISetterBase
    }

    public enum SetterBaseCollectionBridge: AbiBridge {
        public typealias SwiftProjection = SetterBaseCollection
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBaseCollection
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISetterBaseCollection>?) -> SetterBaseCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SizeChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = SizeChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs>?) -> SizeChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum StyleBridge: AbiBridge {
        public typealias SwiftProjection = Style
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIStyle
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIStyle>?) -> Style? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TargetPropertyPathBridge: AbiBridge {
        public typealias SwiftProjection = TargetPropertyPath
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITargetPropertyPath
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CITargetPropertyPath>?) -> TargetPropertyPath? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TriggerActionBridge: ComposableBridge {
        public typealias SwiftProjection = TriggerAction
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction>?) -> TriggerAction? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITriggerAction : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = TriggerAction
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ITriggerAction
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITriggerAction
    }

    public enum TriggerBaseBridge: ComposableBridge {
        public typealias SwiftProjection = TriggerBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase>?) -> TriggerBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ITriggerBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = TriggerBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.ITriggerBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ITriggerBase
    }

    public enum TriggerCollectionBridge: AbiBridge {
        public typealias SwiftProjection = TriggerCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CTriggerBase
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CTriggerBase>?) -> TriggerCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum UIElementBridge: ComposableBridge {
        public typealias SwiftProjection = UIElement
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElement
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIUIElement>?) -> UIElement? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IUIElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IUIElementOverrides
            public typealias Class = UIElement
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElement
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IUIElement
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IUIElementOverrides
    }

    public enum UIElementWeakCollectionBridge: ComposableBridge {
        public typealias SwiftProjection = UIElementWeakCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement>?) -> UIElementWeakCollection? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVectorUIElement : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = UIElementWeakCollection
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
                public typealias SwiftABI = WinUI.IVectorUIElement
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVectorUIElement
    }

    public enum UnhandledExceptionEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = UnhandledExceptionEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs>?) -> UnhandledExceptionEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum Vector3TransitionBridge: ComposableBridge {
        public typealias SwiftProjection = Vector3Transition
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition>?) -> Vector3Transition? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVector3Transition : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = Vector3Transition
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IVector3Transition
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVector3Transition
    }

    public enum WindowBridge: ComposableBridge {
        public typealias SwiftProjection = Window
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindow
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindow>?) -> Window? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IWindow : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = Window
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindow
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IWindow
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IWindow
    }

    public enum WindowActivatedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = WindowActivatedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs>?) -> WindowActivatedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum WindowEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = WindowEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowEventArgs>?) -> WindowEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum WindowSizeChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = WindowSizeChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs>?) -> WindowSizeChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum WindowVisibilityChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = WindowVisibilityChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs>?) -> WindowVisibilityChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum XamlResourceReferenceFailedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = XamlResourceReferenceFailedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlResourceReferenceFailedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIXamlResourceReferenceFailedEventArgs>?) -> XamlResourceReferenceFailedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum XamlRootBridge: AbiBridge {
        public typealias SwiftProjection = XamlRoot
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlRoot
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIXamlRoot>?) -> XamlRoot? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum XamlRootChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = XamlRootChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlRootChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIXamlRootChangedEventArgs>?) -> XamlRootChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension CornerRadius: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius
    public static func from(abi: ABI) -> Self {
        .init(topLeft: abi.TopLeft, topRight: abi.TopRight, bottomRight: abi.BottomRight, bottomLeft: abi.BottomLeft)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension Duration: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CDuration
    public static func from(abi: ABI) -> Self {
        .init(timeSpan: .from(abi: abi.TimeSpan), type: abi.Type)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension GridLength: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CGridLength
    public static func from(abi: ABI) -> Self {
        .init(value: abi.Value, gridUnitType: abi.GridUnitType)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension Thickness: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CThickness
    public static func from(abi: ABI) -> Self {
        .init(left: abi.Left, top: abi.Top, right: abi.Right, bottom: abi.Bottom)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class IDataTemplateExtensionMaker: MakeFromAbi {
    public typealias SwiftType = AnyIDataTemplateExtension
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml.IDataTemplateExtension = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml.IDataTemplateExtensionBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IElementFactoryMaker: MakeFromAbi {
    public typealias SwiftType = AnyIElementFactory
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml.IElementFactory = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml.IElementFactoryBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class ApplicationMaker: MakeFromAbi {
    public typealias SwiftType = Application
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Application(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ApplicationInitializationCallbackParamsMaker: MakeFromAbi {
    public typealias SwiftType = ApplicationInitializationCallbackParams
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ApplicationInitializationCallbackParams(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BindingFailedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = BindingFailedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BindingFailedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BringIntoViewOptionsMaker: MakeFromAbi {
    public typealias SwiftType = BringIntoViewOptions
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BringIntoViewOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BringIntoViewRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = BringIntoViewRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BringIntoViewRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BrushTransitionMaker: MakeFromAbi {
    public typealias SwiftType = BrushTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BrushTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DataContextChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DataContextChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DataContextChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DataTemplateMaker: MakeFromAbi {
    public typealias SwiftType = DataTemplate
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DataTemplate(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DebugSettingsMaker: MakeFromAbi {
    public typealias SwiftType = DebugSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DebugSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DependencyObjectMaker: MakeFromAbi {
    public typealias SwiftType = DependencyObject
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DependencyObject(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DependencyPropertyMaker: MakeFromAbi {
    public typealias SwiftType = DependencyProperty
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DependencyProperty(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DependencyPropertyChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DependencyPropertyChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DependencyPropertyChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DragEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragOperationDeferralMaker: MakeFromAbi {
    public typealias SwiftType = DragOperationDeferral
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragOperationDeferral(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragStartingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DragStartingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragStartingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragUIMaker: MakeFromAbi {
    public typealias SwiftType = DragUI
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragUI(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DragUIOverrideMaker: MakeFromAbi {
    public typealias SwiftType = DragUIOverride
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DragUIOverride(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DropCompletedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DropCompletedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DropCompletedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EffectiveViewportChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = EffectiveViewportChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EffectiveViewportChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ElementFactoryGetArgsMaker: MakeFromAbi {
    public typealias SwiftType = ElementFactoryGetArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ElementFactoryGetArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ElementFactoryRecycleArgsMaker: MakeFromAbi {
    public typealias SwiftType = ElementFactoryRecycleArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ElementFactoryRecycleArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ExceptionRoutedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ExceptionRoutedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ExceptionRoutedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FrameworkElementMaker: MakeFromAbi {
    public typealias SwiftType = FrameworkElement
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FrameworkElement(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FrameworkTemplateMaker: MakeFromAbi {
    public typealias SwiftType = FrameworkTemplate
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FrameworkTemplate(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LaunchActivatedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = LaunchActivatedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LaunchActivatedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PropertyMetadataMaker: MakeFromAbi {
    public typealias SwiftType = PropertyMetadata
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PropertyMetadata(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PropertyPathMaker: MakeFromAbi {
    public typealias SwiftType = PropertyPath
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PropertyPath(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ResourceDictionaryMaker: MakeFromAbi {
    public typealias SwiftType = ResourceDictionary
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceDictionary(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ResourceManagerRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ResourceManagerRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceManagerRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RoutedEventMaker: MakeFromAbi {
    public typealias SwiftType = RoutedEvent
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RoutedEvent(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RoutedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = RoutedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RoutedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScalarTransitionMaker: MakeFromAbi {
    public typealias SwiftType = ScalarTransition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScalarTransition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SetterMaker: MakeFromAbi {
    public typealias SwiftType = Setter
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Setter(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SetterBaseMaker: MakeFromAbi {
    public typealias SwiftType = SetterBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SetterBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SetterBaseCollectionMaker: MakeFromAbi {
    public typealias SwiftType = SetterBaseCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SetterBaseCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SizeChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = SizeChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SizeChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class StyleMaker: MakeFromAbi {
    public typealias SwiftType = Style
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Style(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TargetPropertyPathMaker: MakeFromAbi {
    public typealias SwiftType = TargetPropertyPath
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TargetPropertyPath(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TriggerActionMaker: MakeFromAbi {
    public typealias SwiftType = TriggerAction
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TriggerAction(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TriggerBaseMaker: MakeFromAbi {
    public typealias SwiftType = TriggerBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TriggerBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TriggerCollectionMaker: MakeFromAbi {
    public typealias SwiftType = TriggerCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TriggerCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UIElementMaker: MakeFromAbi {
    public typealias SwiftType = UIElement
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UIElement(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UIElementWeakCollectionMaker: MakeFromAbi {
    public typealias SwiftType = UIElementWeakCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UIElementWeakCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UnhandledExceptionEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = UnhandledExceptionEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UnhandledExceptionEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class Vector3TransitionMaker: MakeFromAbi {
    public typealias SwiftType = Vector3Transition
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Vector3Transition(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class WindowMaker: MakeFromAbi {
    public typealias SwiftType = Window
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Window(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class WindowActivatedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = WindowActivatedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return WindowActivatedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class WindowEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = WindowEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return WindowEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class WindowSizeChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = WindowSizeChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return WindowSizeChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class WindowVisibilityChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = WindowVisibilityChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return WindowVisibilityChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class XamlResourceReferenceFailedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = XamlResourceReferenceFailedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return XamlResourceReferenceFailedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class XamlRootMaker: MakeFromAbi {
    public typealias SwiftType = XamlRoot
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return XamlRoot(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class XamlRootChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = XamlRootChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return XamlRootChangedEventArgs(fromAbi: abi)
    }
}
