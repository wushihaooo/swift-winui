// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI_Xaml_Controls_Primitives {
    public enum IScrollControllerBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollController
        public typealias SwiftProjection = AnyIScrollController
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollControllerImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollControllerImpl: IScrollController, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollControllerBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.setisscrollable)
        fileprivate func setIsScrollable(_ isScrollable: Bool) throws {
            try _default.SetIsScrollable(isScrollable)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.setvalues)
        fileprivate func setValues(_ minOffset: Double, _ maxOffset: Double, _ offset: Double, _ viewportLength: Double) throws {
            try _default.SetValues(minOffset, maxOffset, offset, viewportLength)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.getscrollanimation)
        fileprivate func getScrollAnimation(_ correlationId: Int32, _ startPosition: WindowsFoundation.Vector2, _ endPosition: WindowsFoundation.Vector2, _ defaultAnimation: WinAppSDK.CompositionAnimation!) throws -> WinAppSDK.CompositionAnimation! {
            try _default.GetScrollAnimation(correlationId, startPosition, endPosition, defaultAnimation)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.notifyrequestedscrollcompleted)
        fileprivate func notifyRequestedScrollCompleted(_ correlationId: Int32) throws {
            try _default.NotifyRequestedScrollCompleted(correlationId)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.canscroll)
        fileprivate var canScroll : Bool {
            get { try! _default.get_CanScroll() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.isscrollingwithmouse)
        fileprivate var isScrollingWithMouse : Bool {
            get { try! _default.get_IsScrollingWithMouse() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.panninginfo)
        fileprivate var panningInfo : AnyIScrollControllerPanningInfo! {
            get { try! _default.get_PanningInfo() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.addscrollvelocityrequested)
        fileprivate lazy var addScrollVelocityRequested : Event<TypedEventHandler<IScrollController?, ScrollControllerAddScrollVelocityRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_AddScrollVelocityRequested($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_AddScrollVelocityRequested($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.canscrollchanged)
        fileprivate lazy var canScrollChanged : Event<TypedEventHandler<IScrollController?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_CanScrollChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_CanScrollChanged($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.isscrollingwithmousechanged)
        fileprivate lazy var isScrollingWithMouseChanged : Event<TypedEventHandler<IScrollController?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_IsScrollingWithMouseChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_IsScrollingWithMouseChanged($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.scrollbyrequested)
        fileprivate lazy var scrollByRequested : Event<TypedEventHandler<IScrollController?, ScrollControllerScrollByRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ScrollByRequested($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ScrollByRequested($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.scrolltorequested)
        fileprivate lazy var scrollToRequested : Event<TypedEventHandler<IScrollController?, ScrollControllerScrollToRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ScrollToRequested($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ScrollToRequested($0)
           }
          )
        }()

    }

    public enum IScrollControllerPanningInfoBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfo
        public typealias SwiftProjection = AnyIScrollControllerPanningInfo
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollControllerPanningInfoImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollControllerPanningInfoImpl: IScrollControllerPanningInfo, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollControllerPanningInfoBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.setpanningelementexpressionanimationsources)
        fileprivate func setPanningElementExpressionAnimationSources(_ propertySet: WinAppSDK.CompositionPropertySet!, _ minOffsetPropertyName: String, _ maxOffsetPropertyName: String, _ offsetPropertyName: String, _ multiplierPropertyName: String) throws {
            try _default.SetPanningElementExpressionAnimationSources(propertySet, minOffsetPropertyName, maxOffsetPropertyName, offsetPropertyName, multiplierPropertyName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.israilenabled)
        fileprivate var isRailEnabled : Bool {
            get { try! _default.get_IsRailEnabled() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panorientation)
        fileprivate var panOrientation : WinUI.Orientation {
            get { try! _default.get_PanOrientation() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panningelementancestor)
        fileprivate var panningElementAncestor : WinUI.UIElement! {
            get { try! _default.get_PanningElementAncestor() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.changed)
        fileprivate lazy var changed : Event<TypedEventHandler<IScrollControllerPanningInfo?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_Changed($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_Changed($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panrequested)
        fileprivate lazy var panRequested : Event<TypedEventHandler<IScrollControllerPanningInfo?, ScrollControllerPanRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_PanRequested($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_PanRequested($0)
           }
          )
        }()

    }

    public enum IScrollSnapPointsInfoBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo
        public typealias SwiftProjection = AnyIScrollSnapPointsInfo
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollSnapPointsInfoImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollSnapPointsInfoImpl: IScrollSnapPointsInfo, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollSnapPointsInfoBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.getirregularsnappoints)
        fileprivate func getIrregularSnapPoints(_ orientation: WinUI.Orientation, _ alignment: SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>! {
            try _default.GetIrregularSnapPoints(orientation, alignment)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.getregularsnappoints)
        fileprivate func getRegularSnapPoints(_ orientation: WinUI.Orientation, _ alignment: SnapPointsAlignment, _ offset: inout Float) throws -> Float {
            try _default.GetRegularSnapPoints(orientation, alignment, &offset)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.arehorizontalsnappointsregular)
        fileprivate var areHorizontalSnapPointsRegular : Bool {
            get { try! _default.get_AreHorizontalSnapPointsRegular() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.areverticalsnappointsregular)
        fileprivate var areVerticalSnapPointsRegular : Bool {
            get { try! _default.get_AreVerticalSnapPointsRegular() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.horizontalsnappointschanged)
        fileprivate lazy var horizontalSnapPointsChanged : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_HorizontalSnapPointsChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_HorizontalSnapPointsChanged($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.verticalsnappointschanged)
        fileprivate lazy var verticalSnapPointsChanged : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_VerticalSnapPointsChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_VerticalSnapPointsChanged($0)
           }
          )
        }()

    }

    public class ItemsChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ItemsChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ItemsChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public class RangeBaseValueChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = RangeBaseValueChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.RangeBaseValueChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try _default.Invoke(sender, e)
            }
            return handler
        }
    }
    public enum AppBarTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = AppBarTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings>?) -> AppBarTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ButtonBaseBridge: ComposableBridge {
        public typealias SwiftProjection = ButtonBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase>?) -> ButtonBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = ButtonBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IButtonBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum ComboBoxTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = ComboBoxTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings>?) -> ComboBoxTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FlyoutBaseBridge: ComposableBridge {
        public typealias SwiftProjection = FlyoutBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>?) -> FlyoutBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFlyoutBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
            public typealias Class = FlyoutBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFlyoutBaseOverrides
    }

    public enum FlyoutBaseClosingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = FlyoutBaseClosingEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs>?) -> FlyoutBaseClosingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FlyoutShowOptionsBridge: ComposableBridge {
        public typealias SwiftProjection = FlyoutShowOptions
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions>?) -> FlyoutShowOptions? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFlyoutShowOptions : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = FlyoutShowOptions
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutShowOptions
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFlyoutShowOptions
    }

    public enum GridViewItemTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = GridViewItemTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIGridViewItemTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIGridViewItemTemplateSettings>?) -> GridViewItemTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ItemsChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ItemsChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs>?) -> ItemsChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ListViewItemTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = ListViewItemTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIListViewItemTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIListViewItemTemplateSettings>?) -> ListViewItemTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum MenuFlyoutItemTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = MenuFlyoutItemTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIMenuFlyoutItemTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIMenuFlyoutItemTemplateSettings>?) -> MenuFlyoutItemTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PopupBridge: AbiBridge {
        public typealias SwiftProjection = Popup
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup>?) -> Popup? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RangeBaseBridge: ComposableBridge {
        public typealias SwiftProjection = RangeBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase>?) -> RangeBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IRangeBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
            public typealias Class = RangeBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IRangeBaseOverrides
    }

    public enum RangeBaseValueChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = RangeBaseValueChangedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs>?) -> RangeBaseValueChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollControllerAddScrollVelocityRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollControllerAddScrollVelocityRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs>?) -> ScrollControllerAddScrollVelocityRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollControllerPanRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollControllerPanRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs>?) -> ScrollControllerPanRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollControllerScrollByRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollControllerScrollByRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs>?) -> ScrollControllerScrollByRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollControllerScrollToRequestedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ScrollControllerScrollToRequestedEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs>?) -> ScrollControllerScrollToRequestedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScrollPresenterBridge: ComposableBridge {
        public typealias SwiftProjection = ScrollPresenter
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter>?) -> ScrollPresenter? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IFrameworkElementOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
            public typealias Class = ScrollPresenter
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollPresenter
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IFrameworkElementOverrides
    }

    public enum ScrollSnapPointBaseBridge: ComposableBridge {
        public typealias SwiftProjection = ScrollSnapPointBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase>?) -> ScrollSnapPointBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IScrollSnapPointBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ScrollSnapPointBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IScrollSnapPointBase
    }

    public enum SelectorBridge: ComposableBridge {
        public typealias SwiftProjection = Selector
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector>?) -> Selector? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IItemsControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
            public typealias Class = Selector
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelector
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IItemsControlOverrides
    }

    public enum SelectorItemBridge: ComposableBridge {
        public typealias SwiftProjection = SelectorItem
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem>?) -> SelectorItem? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IContentControlOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
            public typealias Class = SelectorItem
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISelectorItem
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IContentControlOverrides
    }

    public enum SnapPointBaseBridge: ComposableBridge {
        public typealias SwiftProjection = SnapPointBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBase>?) -> SnapPointBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum ISnapPointBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = SnapPointBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ISnapPointBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = ISnapPointBase
    }

    public enum SplitViewTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = SplitViewTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings>?) -> SplitViewTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ToggleButtonBridge: ComposableBridge {
        public typealias SwiftProjection = ToggleButton
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton>?) -> ToggleButton? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IToggleButtonOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
            public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
            public typealias Class = ToggleButton
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButton
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IToggleButtonOverrides
    }

    public enum ToggleSwitchTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = ToggleSwitchTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings>?) -> ToggleSwitchTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ToolTipTemplateSettingsBridge: AbiBridge {
        public typealias SwiftProjection = ToolTipTemplateSettings
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings>?) -> ToolTipTemplateSettings? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ZoomSnapPointBaseBridge: ComposableBridge {
        public typealias SwiftProjection = ZoomSnapPointBase
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBase
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBase>?) -> ZoomSnapPointBase? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IZoomSnapPointBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = ZoomSnapPointBase
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBase
                public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IZoomSnapPointBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IZoomSnapPointBase
    }

}
@_spi(WinRTInternal)
extension GeneratorPosition: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition
    public static func from(abi: ABI) -> Self {
        .init(index: abi.Index, offset: abi.Offset)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class IScrollControllerMaker: MakeFromAbi {
    public typealias SwiftType = AnyIScrollController
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollController = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IScrollControllerPanningInfoMaker: MakeFromAbi {
    public typealias SwiftType = AnyIScrollControllerPanningInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfo = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IScrollSnapPointsInfoMaker: MakeFromAbi {
    public typealias SwiftType = AnyIScrollSnapPointsInfo
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class AppBarTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = AppBarTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AppBarTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ButtonBaseMaker: MakeFromAbi {
    public typealias SwiftType = ButtonBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ButtonBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ComboBoxTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = ComboBoxTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ComboBoxTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlyoutBaseMaker: MakeFromAbi {
    public typealias SwiftType = FlyoutBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FlyoutBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlyoutBaseClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = FlyoutBaseClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FlyoutBaseClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FlyoutShowOptionsMaker: MakeFromAbi {
    public typealias SwiftType = FlyoutShowOptions
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FlyoutShowOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GridViewItemTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = GridViewItemTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GridViewItemTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ItemsChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ItemsChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ItemsChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ListViewItemTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = ListViewItemTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ListViewItemTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MenuFlyoutItemTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = MenuFlyoutItemTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MenuFlyoutItemTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PopupMaker: MakeFromAbi {
    public typealias SwiftType = Popup
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Popup(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RangeBaseMaker: MakeFromAbi {
    public typealias SwiftType = RangeBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RangeBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RangeBaseValueChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = RangeBaseValueChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RangeBaseValueChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollControllerAddScrollVelocityRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollControllerAddScrollVelocityRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollControllerAddScrollVelocityRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollControllerPanRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollControllerPanRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollControllerPanRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollControllerScrollByRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollControllerScrollByRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollControllerScrollByRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollControllerScrollToRequestedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ScrollControllerScrollToRequestedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollControllerScrollToRequestedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollPresenterMaker: MakeFromAbi {
    public typealias SwiftType = ScrollPresenter
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollPresenter(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScrollSnapPointBaseMaker: MakeFromAbi {
    public typealias SwiftType = ScrollSnapPointBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScrollSnapPointBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SelectorMaker: MakeFromAbi {
    public typealias SwiftType = Selector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Selector(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SelectorItemMaker: MakeFromAbi {
    public typealias SwiftType = SelectorItem
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SelectorItem(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SnapPointBaseMaker: MakeFromAbi {
    public typealias SwiftType = SnapPointBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SnapPointBase(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SplitViewTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = SplitViewTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SplitViewTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToggleButtonMaker: MakeFromAbi {
    public typealias SwiftType = ToggleButton
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToggleButton(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToggleSwitchTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = ToggleSwitchTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToggleSwitchTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ToolTipTemplateSettingsMaker: MakeFromAbi {
    public typealias SwiftType = ToolTipTemplateSettings
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ToolTipTemplateSettings(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ZoomSnapPointBaseMaker: MakeFromAbi {
    public typealias SwiftType = ZoomSnapPointBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ZoomSnapPointBase(fromAbi: abi)
    }
}
